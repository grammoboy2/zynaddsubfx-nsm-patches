From f186c492a5085101c30d78d02eb86169fd4d202b Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Fri, 8 Feb 2013 18:21:11 -0500
Subject: [PATCH 0056/1936] Minimal GUI librtosc integration

- Well, it sure isn't pretty, but it works
- GUI can now react to OSC events from the backend
- GUI layer abstracted away from main.cpp slightly
- VU meters are now updated ONLY via OSC messages passed safely between layers
- VU meters are no longer inside MasterUI.fl as working with fluid is perhaps
  one of the most painful parts of dealing with complex FLTK UI
- This commit likely breaks the no-UI build for the time being
- May the vumutex warm up hell for its larger friend
---
 src/Misc/Master.cpp        |  24 +--
 src/Misc/Master.h          |   9 +-
 src/UI/CMakeLists.txt      |   1 +
 src/UI/Connection.cpp      | 140 +++++++++++++
 src/UI/Connection.h        |  15 ++
 src/UI/ConnectionDummy.cpp |  18 ++
 src/UI/Fl_Osc_Interface.h  |  21 ++
 src/UI/MasterUI.fl         | 390 ++++++++++---------------------------
 src/UI/VuMasterMeter.h     | 130 +++++++++++++
 src/UI/VuMeter.h           |  23 +++
 src/UI/VuPartMeter.h       |  53 +++++
 src/main.cpp               | 139 ++++---------
 12 files changed, 555 insertions(+), 408 deletions(-)
 create mode 100644 src/UI/Connection.cpp
 create mode 100644 src/UI/Connection.h
 create mode 100644 src/UI/ConnectionDummy.cpp
 create mode 100644 src/UI/Fl_Osc_Interface.h
 create mode 100644 src/UI/VuMasterMeter.h
 create mode 100644 src/UI/VuMeter.h
 create mode 100644 src/UI/VuPartMeter.h

diff --git a/src/Misc/Master.cpp b/src/Misc/Master.cpp
index 3671d5aa..927f3519 100644
--- a/src/Misc/Master.cpp
+++ b/src/Misc/Master.cpp
@@ -62,6 +62,12 @@ T lim(T min, T max, T val)
 static Ports localports = {
     {"echo", ":'hidden':Hidden port to echo messages", 0, [](const char *m, RtData) {
        bToU->raw_write(m-1);}},
+    {"get-vu", "::", 0, [](const char *, RtData d) {
+       Master *m = (Master*)d.obj;
+       bToU->write("/vu-meter", "bb", sizeof(m->vu), &m->vu, sizeof(float)*NUM_MIDI_PARTS, m->vuoutpeakpart);}},
+    {"reset-vu", "::", 0, [](const char *, RtData d) {
+       Master *m = (Master*)d.obj;
+       m->vuresetpeaks();}},
     PARAMF(Master, volume, volume, log, 0.01, 4.42, "Master Volume"),
 };
 
@@ -79,7 +85,6 @@ Master::Master()
     swaplr = 0;
 
     pthread_mutex_init(&mutex, NULL);
-    pthread_mutex_init(&vumutex, NULL);
     fft = new FFTwrapper(synth->oscilsize);
 
     shutup = 0;
@@ -486,10 +491,7 @@ void Master::AudioOut(float *outl, float *outr)
         outr[i] *= volume;
     }
 
-    if(!pthread_mutex_trylock(&vumutex)) {
-        vuUpdate(outl, outr);
-        pthread_mutex_unlock(&vumutex);
-    }
+    vuUpdate(outl, outr);
 
     //Shutup if it is asked (with fade-out)
     if(shutup) {
@@ -563,7 +565,6 @@ Master::~Master()
     delete fft;
 
     pthread_mutex_destroy(&mutex);
-    pthread_mutex_destroy(&vumutex);
 }
 
 
@@ -619,22 +620,11 @@ void Master::ShutUp()
  */
 void Master::vuresetpeaks()
 {
-    pthread_mutex_lock(&vumutex);
     vu.outpeakl    = 1e-9;
     vu.outpeakr    = 1e-9;
     vu.maxoutpeakl = 1e-9;
     vu.maxoutpeakr = 1e-9;
     vu.clipped     = 0;
-    pthread_mutex_unlock(&vumutex);
-}
-
-vuData Master::getVuData()
-{
-    vuData tmp;
-    pthread_mutex_lock(&vumutex);
-    tmp = vu;
-    pthread_mutex_unlock(&vumutex);
-    return tmp;
 }
 
 void Master::applyparameters(bool lockmutex)
diff --git a/src/Misc/Master.h b/src/Misc/Master.h
index ab815256..e5971fa1 100644
--- a/src/Misc/Master.h
+++ b/src/Misc/Master.h
@@ -144,11 +144,8 @@ class Master
 
         //peaks for VU-meter
         void vuresetpeaks();
-        //get VU-meter data
-        vuData getVuData();
 
         //peaks for part VU-meters
-        /**\todo synchronize this with a mutex*/
         float vuoutpeakpart[NUM_MIDI_PARTS];
         unsigned char fakepeakpart[NUM_MIDI_PARTS]; //this is used to compute the "peak" when the part is disabled
 
@@ -161,14 +158,14 @@ class Master
 
         class FFTwrapper * fft;
         pthread_mutex_t mutex;
-        pthread_mutex_t vumutex;
-
 
         static rtosc::Ports &ports;
         float  volume;
+
+        //Statistics on output levels
+        vuData vu;
     private:
         bool   nullRun;
-        vuData vu;
         float  sysefxvol[NUM_SYS_EFX][NUM_MIDI_PARTS];
         float  sysefxsend[NUM_SYS_EFX][NUM_SYS_EFX];
         int    keyshift;
diff --git a/src/UI/CMakeLists.txt b/src/UI/CMakeLists.txt
index 38ea1e11..001a9723 100644
--- a/src/UI/CMakeLists.txt
+++ b/src/UI/CMakeLists.txt
@@ -34,6 +34,7 @@ add_library(zynaddsubfx_gui STATIC
 	${zynaddsubfx_gui_FLTK_UI_SRCS}
         NioUI.cpp
         WidgetPDial.cpp
+        Connection.cpp
 	)
 
 if(NtkGui)
diff --git a/src/UI/Connection.cpp b/src/UI/Connection.cpp
new file mode 100644
index 00000000..71a6830e
--- /dev/null
+++ b/src/UI/Connection.cpp
@@ -0,0 +1,140 @@
+#include "Connection.h"
+#include "Fl_Osc_Interface.h"
+#include "../globals.h"
+
+#include <rtosc/rtosc.h>
+#include <rtosc/ports.h>
+
+#include <FL/Fl.H>
+#include "common.H"
+#include "MasterUI.h"
+
+#ifdef NTK_GUI
+#include <FL/Fl_Shared_Image.H>
+#include <FL/Fl_Tiled_Image.H>
+#include <FL/Fl_Dial.H>
+#endif // NTK_GUI
+
+using namespace GUI;
+MasterUI *ui;
+
+Fl_Osc_Interface *osc;//TODO: the scope of this should be narrowed
+
+#ifdef NTK_GUI
+static Fl_Tiled_Image *module_backdrop;
+#endif
+
+void
+set_module_parameters ( Fl_Widget *o )
+{
+#ifdef NTK_GUI
+    o->box( FL_DOWN_FRAME );
+    o->align( o->align() | FL_ALIGN_IMAGE_BACKDROP );
+    o->color( FL_BLACK );
+    o->image( module_backdrop );
+    o->labeltype( FL_SHADOW_LABEL );
+#else
+    o->box( FL_PLASTIC_UP_BOX );
+    o->color( FL_CYAN );
+    o->labeltype( FL_EMBOSSED_LABEL );
+#endif
+}
+
+ui_handle_t GUI::createUi(Fl_Osc_Interface *osc, void *master, void *exit)
+{
+    ::osc = osc;
+#ifdef NTK_GUI
+    fl_register_images();
+
+    Fl_Dial::default_style(Fl_Dial::PIXMAP_DIAL);
+
+    if(Fl_Shared_Image *img = Fl_Shared_Image::get(PIXMAP_PATH "/knob.png"))
+        Fl_Dial::default_image(img);
+    else
+        Fl_Dial::default_image(Fl_Shared_Image::get(SOURCE_DIR "/../pixmaps/knob.png"));
+
+    if(Fl_Shared_Image *img = Fl_Shared_Image::get(PIXMAP_PATH "/window_backdrop.png"))
+        Fl::scheme_bg(new Fl_Tiled_Image(img));
+    else
+        Fl::scheme_bg(new Fl_Tiled_Image(Fl_Shared_Image::get(SOURCE_DIR "/../pixmaps/window_backdrop.png")));
+
+    if(Fl_Shared_Image *img = Fl_Shared_Image::get(PIXMAP_PATH "/module_backdrop.png"))
+        module_backdrop = new Fl_Tiled_Image(img);
+    else
+        module_backdrop = new Fl_Tiled_Image(Fl_Shared_Image::get(SOURCE_DIR "/../pixmaps/module_backdrop.png"));
+
+    Fl::background(50,  50,  50);
+    Fl::background2(70, 70,  70);
+    Fl::foreground(255, 255, 255);
+#endif
+    
+    return (void*) (ui = new MasterUI((Master*)master, (int*)exit, osc));
+}
+void GUI::destroyUi(ui_handle_t ui)
+{
+    delete static_cast<MasterUI*>(ui);
+}
+
+#define BEGIN(x) {x,"",NULL,[](const char *m, rtosc::RtData d){ \
+    MasterUI *ui   = static_cast<MasterUI*>(d.obj); \
+    rtosc_arg_t a0 = rtosc_argument(m,0); \
+    rtosc_arg_t a1 = rtosc_argument(m,1); \
+    rtosc_arg_t a2 = rtosc_argument(m,2); \
+    rtosc_arg_t a3 = rtosc_argument(m,3);
+#define END }},
+
+//DSL based ports
+static rtosc::Ports ports = {
+    BEGIN("show:T") {
+        ui->showUI();
+    } END
+    BEGIN("alert:s") {
+        fl_alert(a0.s);
+    } END
+    BEGIN("session-type:s") {
+        if(strcmp(a0.s,"LASH"))
+            return;
+        ui->sm_indicator1->value(1);
+        ui->sm_indicator2->value(1);
+        ui->sm_indicator1->tooltip("LASH");
+        ui->sm_indicator2->tooltip("LASH");
+    } END
+    BEGIN("save-master:s") {
+        ui->do_save_master(a0.s);
+    } END
+    BEGIN("load-master:s") {
+        ui->do_load_master(a0.s);
+    } END
+    BEGIN("vu-meter:bb") {
+        if(a0.b.len == sizeof(vuData) &&
+                a1.b.len == sizeof(float)*NUM_MIDI_PARTS) {
+            //Refresh the primary VU meters
+            ui->simplemastervu->update((vuData*)a0.b.data);
+            ui->mastervu->update((vuData*)a0.b.data);
+
+            float *partvu = (float*)a1.b.data;
+            for(int i=0; i<NUM_MIDI_PARTS; ++i)
+                ui->panellistitem[i]->partvu->update(partvu[i]);
+        }
+    } END
+};
+
+void GUI::raiseUi(ui_handle_t gui, const char *message)
+{
+    char buffer[1024];
+    ports.dispatch(buffer, sizeof(buffer), message+1, gui);
+}
+
+void GUI::raiseUi(ui_handle_t gui, const char *dest, const char *args, ...)
+{
+    char buffer[1024];
+    va_list va;
+    va_start(va,args);
+    if(rtosc_vmessage(buffer,1024,dest,args,va))
+        raiseUi(gui, buffer);
+}
+
+void GUI::tickUi(ui_handle_t)
+{
+    Fl::wait(0.02f);
+}
diff --git a/src/UI/Connection.h b/src/UI/Connection.h
new file mode 100644
index 00000000..a1cab857
--- /dev/null
+++ b/src/UI/Connection.h
@@ -0,0 +1,15 @@
+//Defines the methods of communication for the GUI
+//Expect this code to mutate into some sort of ugly beast that will slowly
+//remove the tendrils of the UI from the RT code
+
+class Fl_Osc_Interface;
+namespace GUI
+{
+typedef void *ui_handle_t;
+
+ui_handle_t createUi(Fl_Osc_Interface *osc, void *master, void *exit);
+void destroyUi(ui_handle_t);
+void raiseUi(ui_handle_t, const char *);
+void raiseUi(ui_handle_t, const char *, const char *, ...);
+void tickUi(ui_handle_t);
+};
diff --git a/src/UI/ConnectionDummy.cpp b/src/UI/ConnectionDummy.cpp
new file mode 100644
index 00000000..d9eafd45
--- /dev/null
+++ b/src/UI/ConnectionDummy.cpp
@@ -0,0 +1,18 @@
+
+ui_handle_t createUi(message_cb, void *Master, void *exit)
+{
+    return NULL;
+}
+void destroyUi(ui_handle_t)
+{
+}
+void raiseUi(ui_handle_t, const char *)
+{
+}
+void raiseUi(ui_handle_t, const char *, const char *, ...)
+{
+}
+void tickUi(ui_handle_t)
+{
+    usleep(100000);
+}
diff --git a/src/UI/Fl_Osc_Interface.h b/src/UI/Fl_Osc_Interface.h
new file mode 100644
index 00000000..31d90535
--- /dev/null
+++ b/src/UI/Fl_Osc_Interface.h
@@ -0,0 +1,21 @@
+#pragma once
+#include <stdio.h>
+#include <string>
+using std::string;
+
+class Fl_Osc_Interface
+{
+    public:
+        //It is assumed that you want to have a registry for all of these
+        //elements
+        virtual void createLink(string s, class Fl_Osc_Widget*){printf("linking %s...\n", s.c_str());};
+        virtual void renameLink(string,string,class Fl_Osc_Widget*){};
+        virtual void removeLink(string,class Fl_Osc_Widget*){};
+
+        //Communication link
+        virtual void requestValue(string){};
+        virtual void writeValue(string s, float f){printf("%s -> %f\n",s.c_str(), f); };
+        virtual void writeValue(string, int){};
+        virtual void writeValue(string, bool){};
+        virtual void writeValue(string, string){};
+};
diff --git a/src/UI/MasterUI.fl b/src/UI/MasterUI.fl
index f625b1e2..72d23bb9 100644
--- a/src/UI/MasterUI.fl
+++ b/src/UI/MasterUI.fl
@@ -1,278 +1,83 @@
 # data file for the Fltk User Interface Designer (fluid)
-version 1.0110 
+version 1.0300 
 header_name {.h} 
 code_name {.cc}
-decl {//Copyright (c) 2002-2009 Nasca Octavian Paul} {} 
+decl {//Copyright (c) 2002-2009 Nasca Octavian Paul} {private local
+} 
 
-decl {//License: GNU GPL version 2 or later} {} 
+decl {//License: GNU GPL version 2 or later} {private local
+} 
 
-decl {\#include <stdlib.h>} {public
+decl {\#include <stdlib.h>} {public local
 } 
 
-decl {\#include <stdio.h>} {public
+decl {\#include <stdio.h>} {public local
 } 
 
-decl {\#include <string.h>} {public
+decl {\#include <string.h>} {public local
 } 
 
-decl {\#include "WidgetPDial.h"} {public
+decl {\#include "WidgetPDial.h"} {public local
 } 
 
-decl {\#include "ADnoteUI.h"} {public
+decl {\#include "ADnoteUI.h"} {public local
 } 
 
-decl {\#include "SUBnoteUI.h"} {public
+decl {\#include "SUBnoteUI.h"} {public local
 } 
 
-decl {\#include "EffUI.h"} {public
+decl {\#include "EffUI.h"} {public local
 } 
 
-decl {\#include "VirKeyboard.h"} {public
+decl {\#include "VirKeyboard.h"} {public local
 } 
 
-decl {\#include "ConfigUI.h"} {public
+decl {\#include "ConfigUI.h"} {public local
 } 
 
-decl {\#include "BankUI.h"} {public
+decl {\#include "BankUI.h"} {public local
 } 
 
-decl {\#include "PartUI.h"} {public
+decl {\#include "PartUI.h"} {public local
 } 
 
-decl {\#include "MicrotonalUI.h"} {public
+decl {\#include "MicrotonalUI.h"} {public local
 } 
 
-decl {\#include "PresetsUI.h"} {public
+decl {\#include "PresetsUI.h"} {public local
 } 
 
 decl {\#include "NioUI.h"} {public global
 } 
 
-decl {\#include "../Misc/Master.h"} {public
+decl {\#include "VuPartMeter.h"} {public local
 } 
 
-decl {\#include "../Misc/Part.h"} {public
+decl {\#include "VuMasterMeter.h"} {public local
 } 
 
-decl {\#include "../Misc/Util.h"} {public
+decl {\#include "../Misc/Master.h"} {public local
 } 
 
-decl {\#include "common.H"} {public
+decl {\#include "../Misc/Part.h"} {public local
 } 
 
-decl {\#if USE_NSM
-\#include "NSM.H"
-extern NSM_Client *nsm;
-\#endif} {public
+decl {\#include "../Misc/Util.h"} {public local
 } 
 
-decl {\#include "../globals.h"} {public
+decl {\#include "common.H"} {public local
 } 
 
-class VUMeter {: {public Fl_Box}
-} {
-  Function {VUMeter(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
-    code {master=NULL;
-npart=-1;} {}
-  }
-  Function {init(Master *master_,int part_)} {} {
-    code {//the "part_" parameters sets the part (if it is >=0), else it sets the master
-master=master_;
-label(NULL);
-npart=part_;
-olddbl=0.0;
-olddbr=0.0;
-oldrmsdbl=0.0;
-oldrmsdbr=0.0;} {}
-  }
-  Function {draw_master()} {} {
-    code {\#define MIN_DB (-48)
-
-int ox=x(); int oy=y(); int lx=w(); int ly=h();
-
-vuData data = master->getVuData();
-
-//pthread_mutex_lock(&master->mutex);
-float dbl=rap2dB(data.outpeakl);
-float dbr=rap2dB(data.outpeakr);
-float rmsdbl=rap2dB(data.rmspeakl);
-float rmsdbr=rap2dB(data.rmspeakr);
-float maxdbl=rap2dB(data.maxoutpeakl);
-float maxdbr=rap2dB(data.maxoutpeakr);
-int clipped=data.clipped;
-//pthread_mutex_unlock(&master->mutex);
-
-dbl=(MIN_DB-dbl)/MIN_DB; 
-if (dbl<0.0) dbl=0.0;
-  else if (dbl>1.0)dbl=1.0;
-
-dbr=(MIN_DB-dbr)/MIN_DB; 
-if (dbr<0.0) dbr=0.0;
-  else if (dbr>1.0) dbr=1.0; 
-
-dbl=dbl*0.4+olddbl*0.6;
-dbr=dbr*0.4+olddbr*0.6;
-
-if ( damage() & FL_DAMAGE_USER1 )
-{
-        if ( olddbl == dbl && olddbr == dbr )
-             return;
-}
-
-olddbl=dbl;
-olddbr=dbr;
-
-\#define VULENX (lx-35)
-\#define VULENY (ly/2-3)
-
-dbl*=VULENX;dbr*=VULENX;
-
-int idbl=(int) dbl;
-int idbr=(int) dbr;
-
-//compute RMS - start
-rmsdbl=(MIN_DB-rmsdbl)/MIN_DB; 
-if (rmsdbl<0.0) rmsdbl=0.0;
-  else if (rmsdbl>1.0) rmsdbl=1.0;
-
-rmsdbr=(MIN_DB-rmsdbr)/MIN_DB; 
-if (rmsdbr<0.0) rmsdbr=0.0;
-  else if (rmsdbr>1.0) rmsdbr=1.0; 
-
-rmsdbl=rmsdbl*0.4+oldrmsdbl*0.6;
-rmsdbr=rmsdbr*0.4+oldrmsdbr*0.6;
-
-oldrmsdbl=rmsdbl;
-oldrmsdbr=rmsdbr;
-
-
-rmsdbl*=VULENX;rmsdbr*=VULENX;
-
-int irmsdbl=(int) rmsdbl;
-int irmsdbr=(int) rmsdbr;
-//compute RMS - end
-
-
-
-//draw the vu-meter lines
-//db
-fl_rectf(ox,oy,idbr,VULENY,0,200,255);
-fl_rectf(ox,oy+ly/2,idbl,VULENY,0,200,255);
-//black
-fl_rectf(ox+idbr,oy,VULENX-idbr,VULENY,0,0,0);
-fl_rectf(ox+idbl,oy+ly/2,VULENX-idbl,VULENY,0,0,0);
-
-//draw the scales
-float  tmp=VULENX*1.0/MIN_DB;
-for (int i=1;i<1-MIN_DB;i++){
-   int tx=VULENX+(int) (tmp*i);
-   fl_rectf(ox+tx,oy,1,VULENY+ly/2,0,160,200);
-   if (i%5==0) fl_rectf(ox+tx,oy,1,VULENY+ly/2,0,230,240);
-   if (i%10==0) fl_rectf(ox+tx-1,oy,2,VULENY+ly/2,0,225,255);
-};
-
-//rms
-if (irmsdbr>2) fl_rectf(ox+irmsdbr-1,oy,3,VULENY,255,255,0);
-if (irmsdbl>2) fl_rectf(ox+irmsdbl-1,oy+ly/2,3,VULENY,255,255,0);
-
-
-//draw the red box if clipping has occured
-if (clipped==0) fl_rectf(ox+VULENX+2,oy+1,lx-VULENX-3,ly-4,0,0,10);
-           else fl_rectf(ox+VULENX+2,oy+1,lx-VULENX-3,ly-4,250,10,10);
-
-//draw the maxdB 
-fl_font(FL_HELVETICA|FL_BOLD,10);
-fl_color(255,255,255);
-char tmpstr[10];
-if ((maxdbl>MIN_DB-20)){
-  snprintf((char *)&tmpstr,10,"%ddB",(int)maxdbr);
-  fl_draw(tmpstr,ox+VULENX+1,oy+1,lx-VULENX-1,VULENY,FL_ALIGN_RIGHT,NULL,0);
-};
-if ((maxdbr>MIN_DB-20)){
-  snprintf((char *)&tmpstr,10,"%ddB",(int)maxdbl);
-  fl_draw(tmpstr,ox+VULENX+1,oy+ly/2+1,lx-VULENX-1,VULENY,FL_ALIGN_RIGHT,NULL,0);
-};} {}
-  }
-  Function {draw_part()} {} {
-    code {\#define MIN_DB (-48)
-int ox=x(); int oy=y(); int lx=w(); int ly=h();
-
-if (!active_r()){
-  pthread_mutex_lock(&master->vumutex);
-   int fakedb=master->fakepeakpart[npart];
-  pthread_mutex_unlock(&master->vumutex);
-  fl_rectf(ox,oy,lx,ly,140,140,140);
-  if (fakedb>0){
-    fakedb=(int)(fakedb/255.0*ly)+4;
-    fl_rectf(ox+2,oy+ly-fakedb,lx-4,fakedb,0,0,0);
-  };
-  
-  return;
-};
-
-//draw the vu lines
-pthread_mutex_lock(&master->vumutex);
- float db=rap2dB(master->vuoutpeakpart[npart]);
-pthread_mutex_unlock(&master->vumutex);
-
-db=(MIN_DB-db)/MIN_DB; 
-if (db<0.0) db=0.0;
-  else if (db>1.0) db=1.0;
-
-db*=ly-2;
-
-int idb=(int) db;
-
-fl_rectf(ox,oy+ly-idb,lx,idb,0,200,255);
-fl_rectf(ox,oy,lx,ly-idb,0,0,0);
-
+decl {\#if USE_NSM
+\#include "NSM.H"
+extern NSM_Client *nsm;
+\#endif} {public local
+} 
 
-//draw the scales
-float  tmp=ly*1.0/MIN_DB;
- for (int i=1;i<1-MIN_DB;i++){
-    int ty=ly+(int) (tmp*i);
-    if (i%5==0) fl_rectf(ox,oy+ly-ty,lx,1,0,160,200);
-    if (i%10==0) fl_rectf(ox,oy+ly-ty,lx,1,0,230,240);
-};} {}
-  }
-  Function {draw()} {} {
-    code {if (npart>=0) draw_part();
-   else draw_master();} {}
-  }
-  Function {tickdraw(VUMeter *o)} {return_type {static void}
-  } {
-    code {o->damage(FL_DAMAGE_USER1);} {}
-  }
-  Function {tick(void *v)} {return_type {static void}
-  } {
-    code {tickdraw((VUMeter *) v);
-          Fl::repeat_timeout(1.0/18.0,tick,v);//18 fps} {}
-  }
-  Function {handle(int event)} {return_type int
-  } {
-    code {switch(event){
-   case FL_SHOW:
-             Fl::add_timeout(1.0/18.0,tick,this);
-             break;
-   case FL_HIDE:
-             Fl::remove_timeout(tick,this);
-             break;
-   case FL_PUSH:
-             if (npart>=0) break;
-             pthread_mutex_lock(&master->mutex);
-             master->vuresetpeaks();
-             pthread_mutex_unlock(&master->mutex);
-             break;
-};
-return(1);} {}
-  }
-  decl {Master *master;} {}
-  decl {int npart;} {}
-  decl {float olddbl,olddbr;} {}
-  decl {float oldrmsdbl,oldrmsdbr;} {}
+decl {\#include "../globals.h"} {public local
 } 
 
-class SysEffSend {open : {public WidgetPDial}
+class SysEffSend {: {public WidgetPDial}
 } {
   Function {SysEffSend(int x,int y, int w, int h, const char *label=0):WidgetPDial(x,y,w,h,label)} {} {
     code {master=NULL;
@@ -305,9 +110,12 @@ this->copy_label(tmp);} {}
 
 return(WidgetPDial::handle(event));} {}
   }
-  decl {Master *master;} {}
-  decl {int neff1;} {}
-  decl {int neff2;} {}
+  decl {Master *master;} {private local
+  }
+  decl {int neff1;} {private local
+  }
+  decl {int neff2;} {private local
+  }
 } 
 
 class Panellistitem {open : {public Fl_Group}
@@ -315,7 +123,7 @@ class Panellistitem {open : {public Fl_Group}
   Function {make_window()} {open private
   } {
     Fl_Window panellistitem {open
-      private xywh {608 711 100 260} type Double box NO_BOX
+      private xywh {620 721 100 260} type Double box NO_BOX
       class Fl_Group visible
     } {
       Fl_Group panellistitemgroup {open
@@ -323,14 +131,13 @@ class Panellistitem {open : {public Fl_Group}
         code0 {if (master->part[npart]->Penabled==0) o->deactivate();}
         code1 {set_module_parameters( o );}
       } {
-        Fl_Group {} {
+        Fl_Group {} {open
           xywh {45 65 15 110} box ENGRAVED_FRAME
         } {
-          Fl_Box {} {
+          Fl_Box partvu {
             label {V U}
             xywh {45 65 15 110} box FLAT_BOX color 0 selection_color 75 labelcolor 55 align 128
-            code0 {o->init(master,npart);}
-            class VUMeter
+            class VuPartMeter
           }
         }
         Fl_Button partname {
@@ -426,9 +233,12 @@ panellistitemgroup->redraw();} {}
     code {panellistitem->hide();
 //delete(panellistitem);} {}
   }
-  decl {int npart;} {}
-  decl {Master *master;} {}
-  decl {BankUI *bankui;} {}
+  decl {int npart;} {private local
+  }
+  decl {Master *master;} {private local
+  }
+  decl {BankUI *bankui;} {private local
+  }
 } 
 
 class MasterUI {open
@@ -450,8 +260,8 @@ if ((
     config.save();
     *exitprogram=1;
 };
-\#endif} open
-      xywh {80 370 390 525} type Double xclass zynaddsubfx visible
+\#endif}
+      xywh {92 456 390 525} type Double xclass zynaddsubfx visible
     } {
       Fl_Menu_Bar mastermenu {
         xywh {-5 0 690 25}
@@ -715,21 +525,21 @@ master->shutup=1;
 pthread_mutex_unlock(&master->mutex);}
         xywh {280 29 105 53} color 90 labelfont 1
       }
-      Fl_Group partuigroup {open
+      Fl_Group partuigroup {
         xywh {0 310 390 205}
       } {
-        Fl_Group partui {open selected
+        Fl_Group partui {open
           xywh {0 310 383 175}
           code0 {o->init(master->part[0],master,0,bankui);}
           code1 {o->show();}
           class PartUI
         } {}
       }
-      Fl_Tabs {} {open
+      Fl_Tabs {} {
         xywh {0 145 390 165} box UP_FRAME
       } {
         Fl_Group {} {
-          label {System Effects} open
+          label {System Effects}
           xywh {0 162 390 145} labelsize 15 align 9
         } {
           Fl_Counter syseffnocounter {
@@ -787,7 +597,7 @@ syseffectui->refresh(master->sysefx[nsyseff]);}
               xywh {90 90 100 20} labelfont 1 labelsize 10
             }
           }
-          Fl_Group syseffectuigroup {open
+          Fl_Group syseffectuigroup {
             xywh {5 203 380 95} color 48
           } {
             Fl_Group syseffectui {
@@ -815,7 +625,7 @@ pthread_mutex_unlock(&master->mutex);}
           }
         }
         Fl_Group {} {
-          label {Insertion Effects} open
+          label {Insertion Effects}
           xywh {0 165 390 145} labelsize 15 align 9 hide
         } {
           Fl_Counter inseffnocounter {
@@ -886,7 +696,7 @@ inseffectui->show();}
               xywh {100 100 100 20} labelfont 1 labelsize 10
             }
           }
-          Fl_Group inseffectuigroup {open
+          Fl_Group inseffectuigroup {
             xywh {5 205 380 95} box FLAT_BOX color 48
           } {
             Fl_Group inseffectui {
@@ -974,14 +784,14 @@ mastermenu->redraw();}
           xywh {192 66 30 15} labelfont 1 labelsize 10 deactivate
         }
       }
-      Fl_Group {} {open
+      Fl_Group {} {
         xywh {1 490 389 55}
       } {
-        Fl_Box {} {
+        Fl_Box mastervu {
           label {VU-Meter}
           xywh {5 490 380 30} box FLAT_BOX color 48 selection_color 75
-          code0 {o->init(master,-1);}
-          class VUMeter
+          code0 {o->init(osc);}
+          class VuMasterMeter
         }
       }
       Fl_Check_Button nrpnbutton {
@@ -1013,7 +823,7 @@ simplenpartcounter->do_callback();}
         callback {virkeyboard->show();}
         tooltip {Virtual Keyboard} xywh {280 87 40 23} color 51 labelfont 1
       }
-      Fl_Group {} {open
+      Fl_Group {} {
         xywh {85 32 55 110} box UP_FRAME
       } {
         Fl_Button {} {
@@ -1088,21 +898,21 @@ GNU General Public License for details.}
       }
     }
     Fl_Window panelwindow {
-      label {ZynAddSubFX Panel}
-      xywh {89 59 630 635} type Double hide
+      label {ZynAddSubFX Panel} open
+      xywh {95 105 630 635} type Double visible
     } {
-      Fl_Scroll {} {
+      Fl_Scroll {} {open
         xywh {0 5 570 310} type HORIZONTAL box THIN_UP_BOX
       } {
-        Fl_Pack {} {
+        Fl_Pack {} {open
           xywh {5 10 560 285} type HORIZONTAL
           code0 {for (int i=0;i<NUM_MIDI_PARTS/2;i++){panellistitem[i]=new Panellistitem(0,0,70,260,"");panellistitem[i]->init(master,i,bankui);}}
         } {}
       }
-      Fl_Scroll {} {
+      Fl_Scroll {} {open
         xywh {0 320 570 310} type HORIZONTAL box THIN_UP_BOX
       } {
-        Fl_Pack {} {
+        Fl_Pack {} {open
           xywh {5 325 560 285} type HORIZONTAL
           code0 {for (int i=NUM_MIDI_PARTS/2;i<NUM_MIDI_PARTS;i++){panellistitem[i]=new Panellistitem(0,0,70,260,"");panellistitem[i]->init(master,i,bankui);}}
         } {}
@@ -1128,8 +938,8 @@ if (fl_choice("Exit and leave the unsaved data?","No","Yes",NULL)) {
 	config.save();
 	*exitprogram=1;
 };
-\#endif} open
-      xywh {283 262 600 335} type Double visible
+\#endif}
+      xywh {295 354 600 335} type Double visible
     } {
       Fl_Menu_Bar simplemastermenu {
         xywh {0 0 690 25}
@@ -1229,7 +1039,7 @@ if (result==-10) fl_alert("Error: Could not load the file\\nbecause it is not an
           }
         }
       }
-      Fl_Group simplelistitemgroup {open
+      Fl_Group simplelistitemgroup {
         private xywh {125 65 215 145} box UP_FRAME
         code0 {if (master->part[npart]->Penabled==0) o->deactivate();}
       } {
@@ -1354,14 +1164,14 @@ o->redraw();}
         code0 {o->init(master);}
         class VirKeys
       }
-      Fl_Group {} {open
+      Fl_Group {} {
         xywh {340 30 255 185}
       } {
-        Fl_Tabs {} {open
+        Fl_Tabs {} {
           xywh {345 35 245 175} box UP_FRAME align 18
         } {
           Fl_Group {} {
-            label {System Effects} open
+            label {System Effects}
             xywh {345 55 245 155} box UP_FRAME labelfont 1 labelsize 12 align 18
           } {
             Fl_Counter simplesyseffnocounter {
@@ -1420,7 +1230,7 @@ simplesyseffectui->refresh(master->sysefx[nsyseff]);}
                 xywh {100 100 100 20} labelfont 1 labelsize 10
               }
             }
-            Fl_Group simplesyseffectuigroup {open
+            Fl_Group simplesyseffectuigroup {
               xywh {350 95 235 95} color 48
             } {
               Fl_Group simplesyseffectui {
@@ -1552,14 +1362,14 @@ pthread_mutex_unlock(&master->mutex);}
           }
         }
       }
-      Fl_Group {} {open
+      Fl_Group {} {
         xywh {5 300 590 30} box ENGRAVED_FRAME
       } {
-        Fl_Box {} {
+        Fl_Box simplemastervu {
           label {VU-Meter}
           xywh {5 300 590 30} box FLAT_BOX color 41 selection_color 75
-          code0 {o->init(master,-1);}
-          class VUMeter
+          code0 {o->init(osc);}
+          class VuMasterMeter
         }
       }
       Fl_Dial simplemastervolumedial {
@@ -1679,9 +1489,10 @@ masterwindowlabel[99]='\\0';
 masterwindow->label(&masterwindowlabel[0]);
 simplemasterwindow->label(&masterwindowlabel[0]);} {}
   }
-  Function {MasterUI(Master *master_,int *exitprogram_)} {} {
+  Function {MasterUI(Master *master_,int *exitprogram_, class Fl_Osc_Interface *osc_)} {} {
     code {master=master_;
 exitprogram=exitprogram_;
+osc=osc_;
 ninseff=0;
 nsyseff=0;
 npart=0;
@@ -1870,17 +1681,32 @@ virkeys->midich=master->part[npart]->Prcvchn;
 simplerefresh();
 bankui->hide();} {}
   }
-  decl {Master *master;} {}
-  decl {MicrotonalUI *microtonalui;} {}
-  decl {BankUI *bankui;} {}
-  decl {int ninseff,npart;} {}
-  decl {int nsyseff;} {}
-  decl {int *exitprogram;} {}
-  decl {SysEffSend *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX];} {}
-  decl {VirKeyboard *virkeyboard;} {}
-  decl {ConfigUI *configui;} {}
-  decl {int swapefftype;} {}
-  decl {char masterwindowlabel[100];} {}
-  decl {Panellistitem *panellistitem[NUM_MIDI_PARTS];} {}
-  decl {NioUI nioui;} {}
+  decl {Master *master;} {private local
+  }
+  decl {MicrotonalUI *microtonalui;} {private local
+  }
+  decl {BankUI *bankui;} {private local
+  }
+  decl {int ninseff,npart;} {private local
+  }
+  decl {int nsyseff;} {private local
+  }
+  decl {int *exitprogram;} {private local
+  }
+  decl {SysEffSend *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX];} {private local
+  }
+  decl {VirKeyboard *virkeyboard;} {private local
+  }
+  decl {ConfigUI *configui;} {private local
+  }
+  decl {int swapefftype;} {private local
+  }
+  decl {char masterwindowlabel[100];} {private local
+  }
+  decl {Panellistitem *panellistitem[NUM_MIDI_PARTS];} {selected public local
+  }
+  decl {NioUI nioui;} {private local
+  }
+  decl {class Fl_Osc_Interface *osc;} {private local
+  }
 } 
diff --git a/src/UI/VuMasterMeter.h b/src/UI/VuMasterMeter.h
new file mode 100644
index 00000000..c7720fcc
--- /dev/null
+++ b/src/UI/VuMasterMeter.h
@@ -0,0 +1,130 @@
+#include "VuMeter.h"
+#include "Fl_Osc_Interface.h"
+#define MIN_DB (-48)
+
+class VuMasterMeter: public VuMeter
+{
+    public:
+        VuMasterMeter(int x,int y, int w, int h, const char *label=0)
+        :VuMeter(x,y,w,h,label),osc(NULL)
+        {}
+
+        void init(Fl_Osc_Interface *_osc)
+        {
+            osc = _osc;
+        }
+
+        int handle(int event)
+        {
+            switch(event){
+                case FL_SHOW:
+                    Fl::add_timeout(1.0/18.0,tick,osc);
+                    break;
+                case FL_HIDE:
+                    Fl::remove_timeout(tick,osc);
+                    break;
+                case FL_PUSH:
+                    osc->requestValue("/reset-vu");
+                    break;
+            }
+            
+            return 1;
+        }
+        
+        static void tick(void *v)
+        {
+            Fl::repeat_timeout(1.0/18.0,tick,v);//18 fps
+            Fl_Osc_Interface *osc = (Fl_Osc_Interface*)v;
+            osc->requestValue("/get-vu");
+        }
+
+        void draw(void)
+        {
+            const int X = x(), Y = y(), W = w(), H = h();
+
+#define VULENX (W-35)
+#define VULENY (H/2-3)
+
+            const int idbl    = dbl*VULENX;
+            const int idbr    = dbr*VULENX;
+            const int irmsdbl = rmsdbl*VULENX;
+            const int irmsdbr = rmsdbr*VULENX;
+
+            //draw the vu-meter lines
+            //dB
+            fl_rectf(X,Y,idbr,VULENY,0,200,255);
+            fl_rectf(X,Y+H/2,idbl,VULENY,0,200,255);
+            //black
+            fl_rectf(X+idbr,Y,VULENX-idbr,VULENY,0,0,0);
+            fl_rectf(X+idbl,Y+H/2,VULENX-idbl,VULENY,0,0,0);
+
+            //draw the scales
+            const float  tmp=VULENX*1.0/MIN_DB;
+            for (int i=1;i<1-MIN_DB;i++){
+                const int tx=VULENX+(int) (tmp*i);
+                fl_rectf(X+tx,Y,1,VULENY+H/2,0,160,200);
+                if (i%5==0) fl_rectf(X+tx,Y,1,VULENY+H/2,0,230,240);
+                if (i%10==0) fl_rectf(X+tx-1,Y,2,VULENY+H/2,0,225,255);
+            }
+
+            //rms
+            if (irmsdbr>2) fl_rectf(X+irmsdbr-1,Y,3,VULENY,255,255,0);
+            if (irmsdbl>2) fl_rectf(X+irmsdbl-1,Y+H/2,3,VULENY,255,255,0);
+
+
+            //draw the red box if clipping has occured
+            if (clipped==0) fl_rectf(X+VULENX+2,Y+1,W-VULENX-3,H-4,0,0,10);
+            else fl_rectf(X+VULENX+2,Y+1,W-VULENX-3,H-4,250,10,10);
+
+            //draw the maxdB
+            fl_font(FL_HELVETICA|FL_BOLD,10);
+            fl_color(255,255,255);
+
+            char tmpstr[10];
+            if(maxdbl>MIN_DB-20){
+                snprintf((char *)&tmpstr,10,"%ddB",(int)maxdbr);
+                fl_draw(tmpstr,X+VULENX+1,Y+1,W-VULENX-1,VULENY,FL_ALIGN_RIGHT,NULL,0);
+            }
+            if(maxdbr>MIN_DB-20){
+                snprintf((char *)&tmpstr,10,"%ddB",(int)maxdbl);
+                fl_draw(tmpstr,X+VULENX+1,Y+H/2+1,W-VULENX-1,VULENY,FL_ALIGN_RIGHT,NULL,0);
+            }
+        }
+
+        void update(vuData *d)
+        {
+            //Update properties
+            dbl     = limit((MIN_DB-rap2dB(d->outpeakl))/MIN_DB);
+            dbr     = limit((MIN_DB-rap2dB(d->outpeakr))/MIN_DB);
+            rmsdbl  = limit((MIN_DB-rap2dB(d->rmspeakl))/MIN_DB);
+            rmsdbr  = limit((MIN_DB-rap2dB(d->rmspeakr))/MIN_DB);
+            maxdbl  = rap2dB(d->maxoutpeakl);
+            maxdbr  = rap2dB(d->maxoutpeakr);
+            clipped = d->clipped;
+
+            //interpolate
+            dbl    = 0.4 * dbl    + 0.6 * olddbl;
+            dbr    = 0.4 * dbr    + 0.6 * olddbr;
+
+            rmsdbl = 0.4 * rmsdbl + 0.6 * oldrmsdbl;
+            rmsdbr = 0.4 * rmsdbr + 0.6 * oldrmsdbr;
+
+            //only update when values appear to be different
+            if(olddbl == dbl && olddbr == dbr)
+                return;
+
+            olddbl    = dbl;
+            olddbr    = dbr;
+            oldrmsdbl = rmsdbl;
+            oldrmsdbr = rmsdbr;
+
+            damage(FL_DAMAGE_USER1);
+        }
+    private:
+        float olddbl,olddbr;
+        float oldrmsdbl,oldrmsdbr;
+        float dbl,dbr,rmsdbl,rmsdbr,maxdbl,maxdbr;
+        int clipped;
+
+        Fl_Osc_Interface *osc;
+};
diff --git a/src/UI/VuMeter.h b/src/UI/VuMeter.h
new file mode 100644
index 00000000..6605dff4
--- /dev/null
+++ b/src/UI/VuMeter.h
@@ -0,0 +1,23 @@
+#ifndef VU_METER_H
+#define VU_METER_H
+#include <FL/Fl_Box.H>
+
+class VuMeter: public Fl_Box
+{
+    public:
+
+        VuMeter(int x,int y, int w, int h, const char *label=0)
+            :Fl_Box(x,y,w,h,label)
+        {}
+
+    protected:
+        float limit(float x)
+        {
+            if(x<0.0)
+                x=0.0;
+            else if(x>1.0)
+                x=1.0;
+            return x;
+        }
+}; 
+#endif
diff --git a/src/UI/VuPartMeter.h b/src/UI/VuPartMeter.h
new file mode 100644
index 00000000..df74ce97
--- /dev/null
+++ b/src/UI/VuPartMeter.h
@@ -0,0 +1,53 @@
+#include "VuMeter.h"
+#define MIN_DB (-48)
+
+class VuPartMeter: public VuMeter
+{
+    public:
+        VuPartMeter(int x,int y, int w, int h, const char *label=0)
+            :VuMeter(x,y,w,h,label)
+        {}
+
+        void draw(void)
+        {
+            const int X = x(), Y = y(), W = w(), H = h();
+
+            //XXX perhaps re-enable this later on
+            //if (!active_r()){
+            //    int fakedb=master->fakepeakpart[npart];
+            //    fl_rectf(X,Y,W,H,140,140,140);
+            //    if (fakedb>0){
+            //        fakedb=(int)(fakedb/255.0*H)+4;
+            //        fl_rectf(X+2,Y+H-fakedb,W-4,fakedb,0,0,0);
+            //    }
+            //    return;
+            //}
+
+            //draw the vu lines
+            const int idb = db*(H-2); 
+
+            fl_rectf(X,Y+H-idb,W,idb,0,200,255);
+            fl_rectf(X,Y,W,H-idb,0,0,0);
+
+            //draw the scales
+            const float tmp=H*1.0/MIN_DB;
+            for (int i = 1; i < 1 - MIN_DB; i++) {
+                const int ty = H+(int) (tmp*i);
+                if(i%5  == 0) fl_rectf(X, Y+H-ty, W, 1,0, 160, 200);
+                if(i%10 == 0) fl_rectf(X, Y+H-ty, W, 1,0, 230, 240);
+            }
+        }
+        
+        void update(float x)
+        {
+            const float _db = limit((MIN_DB-rap2dB(x))/MIN_DB);
+
+            if(db != _db) {
+                db = _db;
+                damage(FL_DAMAGE_USER1);
+            }
+        }
+
+    private:
+        float db;
+};
diff --git a/src/main.cpp b/src/main.cpp
index 787bdc14..8a6de1e7 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -20,9 +20,6 @@
 
 */
 
-#include <FL/Fl.H>
-
-#include "UI/common.H"
 
 #include <iostream>
 #include <cmath>
@@ -46,29 +43,17 @@
 #include "Misc/Dump.h"
 extern Dump dump;
 
-
 //Nio System
 #include "Nio/Nio.h"
 
-#ifndef DISABLE_GUI
-#ifdef QT_GUI
-
-#include <QApplication>
-#include "masterui.h"
-QApplication *app;
+//GUI System
+#include "UI/Fl_Osc_Interface.h"
+#include "UI/Connection.h"
+GUI::ui_handle_t gui;
 
-#elif defined FLTK_GUI
-#include "UI/MasterUI.h"
-#elif defined NTK_GUI
-#include "UI/MasterUI.h"
-#include <FL/Fl_Shared_Image.H>
-#include <FL/Fl_Tiled_Image.H>
-#include <FL/Fl_Dial.H>
-#endif // FLTK_GUI
-
-MasterUI *ui;
-
-#endif //DISABLE_GUI
+//The Glue
+rtosc::ThreadLink *bToU = new rtosc::ThreadLink(1024,1024);
+rtosc::ThreadLink *uToB = new rtosc::ThreadLink(1024,1024);
 
 using namespace std;
 
@@ -106,8 +91,6 @@ void error_cb(int i, const char *m, const char *loc)
 }
 
 lo_server server;
-rtosc::ThreadLink *bToU = new rtosc::ThreadLink(1024,1024);
-rtosc::ThreadLink *uToB = new rtosc::ThreadLink(1024,1024);
 string last_url, curr_url;
 
 void path_search(const char *m)
@@ -196,14 +179,16 @@ void osc_setup(void)
  */
 void osc_check(void)
 {
-    lo_server_recv_noblock(server, 100);
+    lo_server_recv_noblock(server, 0);
     while(bToU->hasNext()) {
         const char *rtmsg = bToU->read();
         if(!strcmp(rtmsg, "/echo")
                 && !strcmp(rtosc_argument_string(rtmsg),"ss")
                 && !strcmp(rtosc_argument(rtmsg,0).s, "OSC_URL"))
             curr_url = rtosc_argument(rtmsg,1).s;
-        else {
+        else if(curr_url == "GUI") {
+            GUI::raiseUi(gui, bToU->read());
+        } else{
             lo_message msg  = lo_message_deserialise((void*)rtmsg,
                     rtosc_message_length(rtmsg, bToU->buffer_size()), NULL);
 
@@ -217,28 +202,6 @@ void osc_check(void)
 }
 
 
-#ifndef DISABLE_GUI
-
-#ifdef NTK_GUI
-static Fl_Tiled_Image *module_backdrop;
-#endif
-
-void
-set_module_parameters ( Fl_Widget *o )
-{
-#ifdef NTK_GUI
-    o->box( FL_DOWN_FRAME );
-    o->align( o->align() | FL_ALIGN_IMAGE_BACKDROP );
-    o->color( FL_BLACK );
-    o->image( module_backdrop );
-    o->labeltype( FL_SHADOW_LABEL );
-#else
-    o->box( FL_PLASTIC_UP_BOX );
-    o->color( FL_CYAN );
-    o->labeltype( FL_EMBOSSED_LABEL );
-#endif
-}
-#endif
 
 /*
  * Program initialisation
@@ -263,6 +226,21 @@ void initprogram(void)
     osc_setup();
 }
 
+class UI_Interface:public Fl_Osc_Interface
+{
+    void requestValue(string s)
+    {
+        if(last_url != "GUI") {
+            uToB->write("/echo", "ss", "OSC_URL", "GUI");
+            last_url = "GUI";
+        }
+
+        uToB->write(s.c_str(),"");
+
+    }
+} ui_link;
+
+
 /*
  * Program exit
  */
@@ -274,9 +252,7 @@ void exitprogram()
 
     Nio::stop();
 
-#ifndef DISABLE_GUI
-    delete ui;
-#endif
+    GUI::destroyUi(gui);
 #if LASH
     if(lash)
         delete lash;
@@ -555,47 +531,16 @@ int main(int argc, char *argv[])
     }
 
 
-#ifndef DISABLE_GUI
-
-#ifdef NTK_GUI
-    fl_register_images();
-
-    Fl_Dial::default_style(Fl_Dial::PIXMAP_DIAL);
-
-    if(Fl_Shared_Image *img = Fl_Shared_Image::get(PIXMAP_PATH "/knob.png"))
-        Fl_Dial::default_image(img);
-    else
-        Fl_Dial::default_image(Fl_Shared_Image::get(SOURCE_DIR "/../pixmaps/knob.png"));
-
-    if(Fl_Shared_Image *img = Fl_Shared_Image::get(PIXMAP_PATH "/window_backdrop.png"))
-        Fl::scheme_bg(new Fl_Tiled_Image(img));
-    else
-        Fl::scheme_bg(new Fl_Tiled_Image(Fl_Shared_Image::get(SOURCE_DIR "/../pixmaps/window_backdrop.png")));
-
-    if(Fl_Shared_Image *img = Fl_Shared_Image::get(PIXMAP_PATH "/module_backdrop.png"))
-        module_backdrop = new Fl_Tiled_Image(img);
-    else
-        module_backdrop = new Fl_Tiled_Image(Fl_Shared_Image::get(SOURCE_DIR "/../pixmaps/module_backdrop.png"));
+    gui = GUI::createUi(&ui_link, master, &Pexitprogram);
 
-    Fl::background(  50, 50, 50 );
-    Fl::background2(  70, 70, 70 );
-    Fl::foreground( 255,255,255 );
-#endif
-
-    ui = new MasterUI(master, &Pexitprogram);
-    
-    if ( !noui) 
+    if(!noui)
     {
-        ui->showUI();
-
+        GUI::raiseUi(gui, "/show",  "T");
         if(!ioGood)
-            fl_alert(
-                "Default IO did not initialize.\nDefaulting to NULL backend.");
+            GUI::raiseUi(gui, "/alert", "s",
+                    "Default IO did not initialize.\nDefaulting to NULL backend.");
     }
 
-#endif
-
-#ifndef DISABLE_GUI
 #if USE_NSM
     char *nsm_url = getenv("NSM_URL");
 
@@ -610,7 +555,6 @@ int main(int argc, char *argv[])
         }
     }
 #endif
-#endif
 
 #if USE_NSM
     if(!nsm)
@@ -618,17 +562,11 @@ int main(int argc, char *argv[])
     {
 #if LASH
         lash = new LASHClient(&argc, &argv);
-#ifndef DISABLE_GUI
-        ui->sm_indicator1->value(1);
-        ui->sm_indicator2->value(1);
-        ui->sm_indicator1->tooltip("LASH");
-        ui->sm_indicator2->tooltip("LASH");
-#endif
+        GUI::raiseUi(gui, "/session-type", "s", "LASH");
 #endif
     }
 
     while(Pexitprogram == 0) {
-#ifndef DISABLE_GUI
 #if USE_NSM
         if(nsm) {
             nsm->check();
@@ -640,11 +578,11 @@ int main(int argc, char *argv[])
             string filename;
             switch(lash->checkevents(filename)) {
                 case LASHClient::Save:
-                    ui->do_save_master(filename.c_str());
+                    GUI::raiseUi(gui, "/save-master", "s", filename.c_str());
                     lash->confirmevent(LASHClient::Save);
                     break;
                 case LASHClient::Restore:
-                    ui->do_load_master(filename.c_str());
+                    GUI::raiseUi(gui, "/load-master", "s", filename.c_str());
                     lash->confirmevent(LASHClient::Restore);
                     break;
                 case LASHClient::Quit:
@@ -658,13 +596,8 @@ int main(int argc, char *argv[])
 #if USE_NSM
 done:
 #endif
-
         osc_check();
-
-        Fl::wait(0.02f);
-#else
-        usleep(100000);
-#endif
+        GUI::tickUi(gui);
     }
 
     exitprogram();
-- 
2.47.0

