From 492841d95c35e5cc0320f9e94313c4491dd4029e Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Fri, 13 May 2016 14:25:02 -0400
Subject: [PATCH 0903/1936] OscilGen: Add Short Parameter Names

---
 src/Synth/OscilGen.cpp | 54 +++++++++++++++++++++---------------------
 1 file changed, 27 insertions(+), 27 deletions(-)

diff --git a/src/Synth/OscilGen.cpp b/src/Synth/OscilGen.cpp
index 009c9815..5461b170 100644
--- a/src/Synth/OscilGen.cpp
+++ b/src/Synth/OscilGen.cpp
@@ -34,54 +34,54 @@ const rtosc::Ports OscilGen::non_realtime_ports = {
     rSelf(OscilGen),
     rPaste,
     //TODO ensure min/max
-    rOption(Phmagtype,
+    rOption(Phmagtype, rShort("scale"),
             rOptions(linear,dB scale (-40),
                      dB scale (-60), dB scale (-80),
                      dB scale (-100)),
             "Type of magnitude for harmonics"),
-    rOption(Pcurrentbasefunc,
+    rOption(Pcurrentbasefunc, rShort("base"),
             rOptions(sine, triangle, pulse, saw, power, gauss,
                 diode, abssine, pulsesine, stretchsine,
                 chirp, absstretchsine, chebyshev, sqr,
                 spike, circle), rOpt(127,use-as-base waveform),
             "Base Waveform for harmonics"),
-    rParamZyn(Pbasefuncpar,
+    rParamZyn(Pbasefuncpar, rShort("shape"),
             "Morph between possible base function shapes "
             "(e.g. rising sawtooth vs a falling sawtooth)"),
-    rOption(Pbasefuncmodulation,
+    rOption(Pbasefuncmodulation, rShort("mod"),
             rOptions(None, Rev, Sine, Power, Chop),
             "Modulation applied to Base function spectra"),
-    rParamZyn(Pbasefuncmodulationpar1,
+    rParamZyn(Pbasefuncmodulationpar1, rShort("p1"),
             "Base function modulation parameter"),
-    rParamZyn(Pbasefuncmodulationpar2,
+    rParamZyn(Pbasefuncmodulationpar2, rShort("p2"),
             "Base function modulation parameter"),
-    rParamZyn(Pbasefuncmodulationpar3,
+    rParamZyn(Pbasefuncmodulationpar3, rShort("p3"),
             "Base function modulation parameter"),
     rParamZyn(Pwaveshaping, "Degree Of Waveshaping"),
-    rOption(Pwaveshapingfunction,
+    rOption(Pwaveshapingfunction, rShort("distort"),
             rOptions(Undistorted,
                 Arctangent, Asymmetric, Pow, Sine, Quantisize,
                 Zigzag, Limiter, Upper Limiter, Lower Limiter,
                 Inverse Limiter, Clip, Asym2, Pow2, sigmoid),
             "Shape of distortion to be applied"),
-    rOption(Pfiltertype, rOptions(No Filter,
+    rOption(Pfiltertype, rShort("filter"), rOptions(No Filter,
             lp, hp1, hp1b, bp1, bs1, lp2, hp2, bp2, bs2,
             cos, sin, low_shelf, s), "Harmonic Filter"),
-    rParamZyn(Pfilterpar1, "Filter parameter"),
-    rParamZyn(Pfilterpar2, "Filter parameter"),
-    rToggle(Pfilterbeforews, "Filter before waveshaping spectra;"
+    rParamZyn(Pfilterpar1, rShort("p1"), "Filter parameter"),
+    rParamZyn(Pfilterpar2, rShort("p2"), "Filter parameter"),
+    rToggle(Pfilterbeforews, rShort("pre/post"), "Filter before waveshaping spectra;"
             "When enabled oscilfilter(freqs); then waveshape(freqs);, "
             "otherwise waveshape(freqs); then oscilfilter(freqs);"),
-    rOption(Psatype, rOptions(None, Pow, ThrsD, ThrsU),
+    rOption(Psatype, rShort("spec. adj."), rOptions(None, Pow, ThrsD, ThrsU),
             "Spectral Adjustment Type"),
-    rParamZyn(Psapar, "Spectral Adjustment Parameter"),
-    rParamI(Pharmonicshift, "Amount of shift on harmonics"),
-    rToggle(Pharmonicshiftfirst, "If harmonics are shifted before waveshaping/filtering"),
-    rOption(Pmodulation, rOptions(None, Rev, Sine, Power),
+    rParamZyn(Psapar, rShort("p1"), "Spectral Adjustment Parameter"),
+    rParamI(Pharmonicshift, rShort("shift"), "Amount of shift on harmonics"),
+    rToggle(Pharmonicshiftfirst, rShort("pre/post"), "If harmonics are shifted before waveshaping/filtering"),
+    rOption(Pmodulation, rShort("FM"), rOptions(None, Rev, Sine, Power),
             "Frequency Modulation To Combined Spectra"),
-    rParamZyn(Pmodulationpar1, "modulation parameter"),
-    rParamZyn(Pmodulationpar2, "modulation parameter"),
-    rParamZyn(Pmodulationpar3, "modulation parameter"),
+    rParamZyn(Pmodulationpar1, rShort("p1"), "modulation parameter"),
+    rParamZyn(Pmodulationpar2, rShort("p2"), "modulation parameter"),
+    rParamZyn(Pmodulationpar3, rShort("p3"), "modulation parameter"),
 
 
     //TODO update to rArray and test
@@ -163,20 +163,20 @@ const rtosc::Ports OscilGen::non_realtime_ports = {
 const rtosc::Ports OscilGen::realtime_ports{
     rSelf(OscilGen),
     rPresetType,
-    rParamZyn(Prand, "Oscilator Phase Randomness: smaller than 0 is \""
+    rParamZyn(Prand, rShort("phase rnd"), "Oscilator Phase Randomness: smaller than 0 is \""
             "group\", larger than 0 is for each harmonic"),
-    rParamZyn(Pamprandpower,
+    rParamZyn(Pamprandpower, rShort("variance"),
             "Variance of harmonic randomness"),
-    rOption(Pamprandtype, rOptions(None, Pow, Sin),
+    rOption(Pamprandtype, rShort("distribution"), rOptions(None, Pow, Sin),
             "Harmonic random distribution to select from"),
-    rOption(Padaptiveharmonics,
+    rOption(Padaptiveharmonics, rShort("adapt")
             rOptions(OFF, ON, Square, 2xSub, 2xAdd, 3xSub, 3xAdd, 4xSub, 4xAdd),
             "Adaptive Harmonics Mode"),
-    rParamI(Padaptiveharmonicsbasefreq, rLinear(0,255),
+    rParamI(Padaptiveharmonicsbasefreq, rShort("c. freq"), rLinear(0,255),
             "Base frequency of adaptive harmonic (30..3000Hz)"),
-    rParamI(Padaptiveharmonicspower,rLinear(0,200),
+    rParamI(Padaptiveharmonicspower, rShort("amount"), rLinear(0,200),
             "Adaptive Harmonic Strength"),
-    rParamZyn(Padaptiveharmonicspar,
+    rParamZyn(Padaptiveharmonicspar, rShort("par"),
             "Adaptive Harmonics Postprocessing Power"),
     {"waveform:", rDoc("Returns waveform points"),
         NULL, [](const char *, rtosc::RtData &d) {
-- 
2.47.0

