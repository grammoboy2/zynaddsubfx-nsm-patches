From 59abef3bd13487a772bca9f2ebe51bb60126c2be Mon Sep 17 00:00:00 2001
From: Johannes Lorenz <johannes89@ist-einmalig.de>
Date: Tue, 7 Nov 2017 18:55:52 +0100
Subject: [PATCH 1222/1936] Fix rtosc merge

---
 TODO.txt             |  2 ++
 doc/architecture.txt | 12 ++++++------
 rtosc                |  2 +-
 3 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/TODO.txt b/TODO.txt
index 0bdea5ee..ba6cf597 100644
--- a/TODO.txt
+++ b/TODO.txt
@@ -1,6 +1,8 @@
 TODOs for default values:
 * iterate correctly over arrays
 * use b (or #?) for bundles, not a
+* code for random port ("init() to random")
+* remove rDefaultMissing if possible
 move code:
 ports.cpp => default_values.cpp
 rtosc.cpp => ...cmp.cpp?
diff --git a/doc/architecture.txt b/doc/architecture.txt
index 868bb92a..7bc80eb6 100644
--- a/doc/architecture.txt
+++ b/doc/architecture.txt
@@ -76,7 +76,7 @@ Synthesis Objects::
     Objects which initialize with parameter objects and generate output audio or
     control values for other synthesis objects
 Container Objects::
-    Objects which are responsible for organizing a variety of synthesis and
+    Objects which are responsible for organizing a dvariety of synthesis and
     parameter objects and for routing the outputs of each child object to the
     right destination (e.g. 'Part' and 'Master')
 Hybrid Objects::
@@ -133,15 +133,15 @@ There simply isn't an effective means of capturing all parameters without
 taking a large amount of time.
 
 The master has two kinds of parameter objects:
- - Realtime variables which are only ever mutable through the RT thread
- - Non realtime variables which are only ever mutable through
+ - Realtime parameters which are only ever mutable through
+   * OSC dispatch within Master
+ - Non realtime parameters which are only ever mutable through
    * OSC dispatch within Master
    * MiddleWare (using struct NonRtObjStore)
 Now, in order to permit the serialization of parameter objects, the backend is
-partially 'frozen'. 'Partially' means that only the non realtime variables are
-ever being saved. Since the freezing message is the last one the MiddleWare
+'frozen': Since the freezing message is the last one the MiddleWare
 sends, this essentially prevents the backend from processing further messages
-from the user interface and when this occurs the parameters which are to be
+from the user interface. When this occurs the parameters which are to be
 serialized can be guaranteed to be constant and thus safe to access across
 threads.
 
diff --git a/rtosc b/rtosc
index 81e27a65..4ef98353 160000
--- a/rtosc
+++ b/rtosc
@@ -1 +1 @@
-Subproject commit 81e27a6585da16a1b6a8f529b312e8fcabe98866
+Subproject commit 4ef983536a57636cdd51a514f6ab5ace2879a49b
-- 
2.47.0

