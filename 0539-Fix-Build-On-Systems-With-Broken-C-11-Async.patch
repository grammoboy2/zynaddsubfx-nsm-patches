From 57eaa718257a8d285777aeaa1aee72ee175a3a4e Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Mon, 28 Sep 2015 21:07:04 -0400
Subject: [PATCH 0539/1936] Fix Build On Systems With Broken C++11 Async

---
 src/CMakeLists.txt      | 13 +++++++++++++
 src/Misc/MiddleWare.cpp | 16 ++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 362cc5a6..46af62bf 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -5,6 +5,7 @@ message(STATUS "Checking Library Path" $ENV{CMAKE_LIBRARY_PATH} ${CMAKE_LIBRARY_
 #Dependency check
 include(CheckFunctionExists)
 include(CheckIncludeFile)
+include(CheckCXXSourceCompiles)
 find_package(PkgConfig REQUIRED)
 find_package(zlib REQUIRED)
 find_package(X11)
@@ -34,6 +35,15 @@ pkg_search_module(LIBLO liblo>=0.26 REQUIRED)
 mark_as_advanced(LIBLO_LIBRARIES)
 
 CHECK_FUNCTION_EXISTS(sched_setscheduler HAVE_SCHEDULER)
+set(CMAKE_REQUIRED_FLAGS "-std=c++11")
+CHECK_CXX_SOURCE_COMPILES(
+    "#include <future>
+    #if ATOMIC_INT_LOCK_FREE<2
+    #error unreliable atomics
+    #endif
+    int main(){return 0;}" HAVE_ASYNC)
+set(CMAKE_REQUIRED_FLAGS "")
+
 
 execute_process(COMMAND echo fistpl 0
                 COMMAND as -
@@ -77,6 +87,8 @@ if(NOT "Darwin" STREQUAL ${CMAKE_SYSTEM_NAME})
     add_definitions(-DHAVE_SCHEDULER=${HAVE_SCHEDULER})
 endif()
 
+add_definitions(-DHAVE_FUTURE=${HAVE_FUTURE})
+
 
 # Give a good guess on the best Input/Output default backends
 if (JackEnable)
@@ -450,4 +462,5 @@ package_status(LIBLO_FOUND      "liblo    " "enabled" ${Red})
 package_status(FLTK_FOUND       "fltk     " "found"   ${Yellow})
 package_status(NTK_FOUND        "ntk      " "found"   ${Yellow})
 package_status(X11_FOUND        "x11      " "found"   ${Yellow})
+package_status(HAVE_ASYNC       "c++ async" "usable"  ${Yellow})
 message(STATUS "Link libraries: ${ZLIB_LIBRARY} ${FFTW_LIBRARY} ${MXML_LIBRARIES} ${AUDIO_LIBRARIES} ${OS_LIBRARIES}")
diff --git a/src/Misc/MiddleWare.cpp b/src/Misc/MiddleWare.cpp
index d073148c..f2fbf7c2 100644
--- a/src/Misc/MiddleWare.cpp
+++ b/src/Misc/MiddleWare.cpp
@@ -572,6 +572,8 @@ public:
             return;
         assert(actual_load[npart] <= pending_load[npart]);
 
+        //load part in async fashion when possible
+#if HAVE_ASYNC
         auto alloc = std::async(std::launch::async,
                 [master,filename,this,npart](){
                 Part *p = new Part(*master->memory, synth,
@@ -597,6 +599,20 @@ public:
         }
 
         Part *p = alloc.get();
+#else
+        Part *p = new Part(*master->memory, synth, master->time,
+                config->cfg.GzipCompression,
+                config->cfg.Interpolation,
+                &master->microtonal, master->fft);
+        if(p->loadXMLinstrument(filename))
+            fprintf(stderr, "Warning: failed to load part<%s>!\n", filename);
+
+        auto isLateLoad = [this,npart]{
+            return actual_load[npart] != pending_load[npart];
+        };
+
+        p->applyparameters(isLateLoad);
+#endif
 
         obj_store.extractPart(p, npart);
         kits.extractPart(p, npart);
-- 
2.47.0

