From f8fceeefb5b19c00328b0974b64fbd68f632bcf5 Mon Sep 17 00:00:00 2001
From: Johannes Lorenz <johannes89@mailueberfall.de>
Date: Thu, 25 Sep 2014 16:02:02 +0200
Subject: [PATCH 0241/1936] Changed rParam to rParamZyn. Working.

---
 src/Misc/Master.cpp              |  2 +-
 src/Misc/Microtonal.cpp          | 16 ++++----
 src/Misc/Part.cpp                | 26 ++++++-------
 src/Misc/Util.h                  |  3 ++
 src/Params/ADnoteParameters.cpp  | 64 ++++++++++++++++----------------
 src/Params/Controller.cpp        | 25 +++++++------
 src/Params/EnvelopeParams.cpp    | 21 ++++++-----
 src/Params/FilterParams.cpp      | 34 ++++++++---------
 src/Params/LFOParams.cpp         | 13 ++++---
 src/Params/PADnoteParameters.cpp |  2 +-
 src/Params/SUBnoteParameters.cpp | 20 +++++-----
 src/Synth/OscilGen.cpp           |  2 +-
 src/Synth/Resonance.cpp          |  6 +--
 13 files changed, 120 insertions(+), 114 deletions(-)

diff --git a/src/Misc/Master.cpp b/src/Misc/Master.cpp
index 5da4b5d6..0cb8a179 100644
--- a/src/Misc/Master.cpp
+++ b/src/Misc/Master.cpp
@@ -53,7 +53,7 @@ static Ports localports = {
     rRecursp(sysefx, 4, "System Effect"),//NUM_SYS_EFX
     rRecursp(insefx, 8, "Insertion Effect"),//NUM_INS_EFX
     rRecur(microtonal, "Micrtonal Mapping Functionality"),
-    rParam(Pkeyshift,  "Global Key Shift"),
+    rParamZyn(Pkeyshift,  "Global Key Shift"),
     rParams(Pinsparts, NUM_INS_EFX, "Part to insert part onto"),
     {"echo", "=documentation\0:Hidden port to echo messages\0", 0, [](const char *m, RtData&) {
        bToU->raw_write(m-1);}},
diff --git a/src/Misc/Microtonal.cpp b/src/Misc/Microtonal.cpp
index 569cfdd1..b3817b22 100644
--- a/src/Misc/Microtonal.cpp
+++ b/src/Misc/Microtonal.cpp
@@ -48,21 +48,21 @@ using namespace rtosc;
  */
 rtosc::Ports Microtonal::ports = {
     rToggle(Pinvertupdown, "key mapping inverse"),
-    rParam(Pinvertupdowncenter, "center of the inversion"),
+    rParamZyn(Pinvertupdowncenter, "center of the inversion"),
     rToggle(Penabled, "Enable for microtonal mode"),
-    rParam(PAnote, "The note for 'A'"),
+    rParamZyn(PAnote, "The note for 'A'"),
     rParamF(PAfreq, "Frequency of the 'A' note"),
-    rParam(Pscaleshift, "UNDOCUMENTED"),
-    rParam(Pfirstkey, "First key to retune"),
-    rParam(Plastkey,  "Last key to retune"),
-    rParam(Pmiddlenote, "Scale degree 0 note"),
+    rParamZyn(Pscaleshift, "UNDOCUMENTED"),
+    rParamZyn(Pfirstkey, "First key to retune"),
+    rParamZyn(Plastkey,  "Last key to retune"),
+    rParamZyn(Pmiddlenote, "Scale degree 0 note"),
 
     //TODO check to see if this should be exposed
-    rParam(Pmapsize, "UNDOCUMENTED"),
+    rParamZyn(Pmapsize, "UNDOCUMENTED"),
     rToggle(Pmappingenabled, "Mapping Enable"),
 
     rParams(Pmapping, "UNDOCUMENTED"),
-    rParam(Pglobalfinedetune, "Fine detune for all notes"),
+    rParamZyn(Pglobalfinedetune, "Fine detune for all notes"),
 
     rString(Pname, MICROTONAL_MAX_NAME_LEN, "Microtonal Name"),
     rString(Pcomment, MICROTONAL_MAX_NAME_LEN, "Microtonal Name"),
diff --git a/src/Misc/Part.cpp b/src/Misc/Part.cpp
index f516cb11..644261e9 100644
--- a/src/Misc/Part.cpp
+++ b/src/Misc/Part.cpp
@@ -52,24 +52,24 @@ static Ports partPorts = {
     rToggle(Penabled, "Part enable"),
 #undef rChangeCb
 #define rChangeCb obj->setPvolume(obj->Pvolume);
-    rParam(Pvolume, "Part Volume"),
+    rParamZyn(Pvolume, "Part Volume"),
 #undef rChangeCb
 #define rChangeCb
-    rParam(Pminkey, "Min Used Key"),
-    rParam(Pmaxkey, "Max Used Key"),
-    rParam(Pkeyshift, "Part keyshift"),
-    rParam(Prcvchn,  "Active MIDI channel"),
-    rParam(Ppanning, "Set Panning"),
-    rParam(Pvelsns,   "Velocity sensing"),
-    rParam(Pveloffs,  "Velocity offset"),
+    rParamZyn(Pminkey, "Min Used Key"),
+    rParamZyn(Pmaxkey, "Max Used Key"),
+    rParamZyn(Pkeyshift, "Part keyshift"),
+    rParamZyn(Prcvchn,  "Active MIDI channel"),
+    rParamZyn(Ppanning, "Set Panning"),
+    rParamZyn(Pvelsns,   "Velocity sensing"),
+    rParamZyn(Pveloffs,  "Velocity offset"),
     rToggle(Pnoteon,  "If the channel accepts note on events"),
     //TODO FIXME Change to 0=OFF 1=MULTI 2=SINGLE
     rToggle(Pkitmode, "Kit mode enable"),
     rToggle(Pdrummode, "Drum mode enable"),
     rToggle(Ppolymode,  "Polyphoney mode"),
     rToggle(Plegatomode, "Legato enable"),
-    rParam(Pkeylimit,   "Key limit per part"),
-    rParam(info.Ptype, "Class of Instrument"),
+    rParamZyn(Pkeylimit,   "Key limit per part"),
+    rParamZyn(info.Ptype, "Class of Instrument"),
     rString(info.Pauthor, MAX_INFO_TEXT_SIZE, "Instrument Author"),
     rString(info.Pcomments, MAX_INFO_TEXT_SIZE, "Instrument Comments"),
     rString(Pname, PART_MAX_NAME_LEN, "Kit User Specified Label"),
@@ -131,12 +131,12 @@ static Ports kitPorts = {
     rRecurp(subpars, "Adnote parameters"),
     rToggle(Penabled, "Kit item enable"),
     rToggle(Pmuted,   "Kit item mute"),
-    rParam(Pminkey,   "Kit item min key"),
-    rParam(Pmaxkey,   "Kit item max key"),
+    rParamZyn(Pminkey,   "Kit item min key"),
+    rParamZyn(Pmaxkey,   "Kit item max key"),
     rToggle(Padenabled, "ADsynth enable"),
     rToggle(Psubenabled, "SUBsynth enable"),
     rToggle(Ppadenabled, "PADsynth enable"),
-    rParam(Psendtoparteffect, "Effect Levels"),
+    rParamZyn(Psendtoparteffect, "Effect Levels"),
     rString(Pname, PART_MAX_NAME_LEN, "Kit User Specified Label"),
     //{"padpars:b", "::", 0
     //    [](
diff --git a/src/Misc/Util.h b/src/Misc/Util.h
index 1662c78f..c0f08961 100644
--- a/src/Misc/Util.h
+++ b/src/Misc/Util.h
@@ -148,6 +148,9 @@ float cinterpolate(const float *data, size_t len, float pos);
 ///trims a path in recursions
 const char *message_snip(const char *m);
 
+#define rParamZyn(name, ...) \
+  {STRINGIFY(name) "::i",  rProp(parameter) rMap(min, 0) rMap(max, 127) DOC(__VA_ARGS__), NULL, rParamCb(name)}
+
 ///floating point parameter - with lookup code
 #define PARAMF(type, var, name, scale, _min, _max, desc) \
 {#name"::f", ":parameter\0:documentation\0=" desc "\0", 0, \
diff --git a/src/Params/ADnoteParameters.cpp b/src/Params/ADnoteParameters.cpp
index 41274c1f..ad977c97 100644
--- a/src/Params/ADnoteParameters.cpp
+++ b/src/Params/ADnoteParameters.cpp
@@ -55,35 +55,35 @@ static Ports voicePorts = {
     rRecurp(VoiceFilter,    "Optional Voice Filter"),
 
     rToggle(Enabled, "Voice Enable"),
-    rParam(Unison_size, "Number of subvoices"),
-    rParam(Unison_frequency_spread, "Subvoice detune"),
-    rParam(Unison_stereo_spread, "Subvoice L/R Separation"),
-    rParam(Unison_vibratto, "Subvoice vibratto"),
-    rParam(Unison_vibratto_speed, "Subvoice vibratto speed"),
+    rParamZyn(Unison_size, "Number of subvoices"),
+    rParamZyn(Unison_frequency_spread, "Subvoice detune"),
+    rParamZyn(Unison_stereo_spread, "Subvoice L/R Separation"),
+    rParamZyn(Unison_vibratto, "Subvoice vibratto"),
+    rParamZyn(Unison_vibratto_speed, "Subvoice vibratto speed"),
     rOption(Unison_invert_phase, rOptions(none, random, 50%, 33%, 25%), "Subvoice Phases"),
     rOption(Type, rOptions(Sound,Noise), "Type of Sound"),
-    rParam(PDelay, "Voice Startup Delay"),
+    rParamZyn(PDelay, "Voice Startup Delay"),
     rToggle(Presonance, "Resonance Enable"),
-    rParam(Pextoscil, "External Oscilator Selection"),
-    rParam(PextFMoscil, "External FM Oscilator Selection"),
-    rParam(Poscilphase, "Oscillator Phase"),
-    rParam(PFMoscilphase, "FM Oscillator Phase"),
+    rParamZyn(Pextoscil, "External Oscilator Selection"),
+    rParamZyn(PextFMoscil, "External FM Oscilator Selection"),
+    rParamZyn(Poscilphase, "Oscillator Phase"),
+    rParamZyn(PFMoscilphase, "FM Oscillator Phase"),
     rToggle(Pfilterbypass, "Filter Bypass"),
 
     //Freq Stuff
     rToggle(Pfixedfreq,           "If frequency is fixed"),
-    rParam(PfixedfreqET,          "Equal Tempermant Parameter"),
+    rParamZyn(PfixedfreqET,          "Equal Tempermant Parameter"),
     rParamI(PDetune,              "Fine Detune"),
     rParamI(PCoarseDetune,        "Coarse Detune"),
-    rParam(PDetuneType,           "Magnitude of Detune"),
+    rParamZyn(PDetuneType,           "Magnitude of Detune"),
     rToggle(PFreqEnvelopeEnabled, "Frequency Envelope Enable"),
     rToggle(PFreqLfoEnabled,      "Frequency LFO Enable"),
 
     //Amplitude Stuff
-    rParam(PPanning,                  "Panning"),
-    rParam(PVolume,                   "Volume"),
+    rParamZyn(PPanning,                  "Panning"),
+    rParamZyn(PVolume,                   "Volume"),
     rToggle(PVolumeminus,             "Signal Inverter"), //do we really need this??
-    rParam(PAmpVelocityScaleFunction, "Velocity Sensing"),
+    rParamZyn(PAmpVelocityScaleFunction, "Velocity Sensing"),
     rToggle(PAmpEnvelopeEnabled,      "Amplitude Envelope Enable"),
     rToggle(PAmpLfoEnabled,           "Amplitude LFO Enable"),
 
@@ -94,14 +94,14 @@ static Ports voicePorts = {
 
 
     //Modulator Stuff
-    rParam(PFMEnabled,              "Modulator Enable/Type"),
+    rParamZyn(PFMEnabled,              "Modulator Enable/Type"),
     rParamI(PFMVoice,                "Modulator Oscillator Selection"),
-    rParam(PFMVolume,                "Modulator Magnitude"),
-    rParam(PFMVolumeDamp,            "Modulator HF dampening"),
-    rParam(PFMVelocityScaleFunction, "Modulator Velocity Function"),
+    rParamZyn(PFMVolume,                "Modulator Magnitude"),
+    rParamZyn(PFMVolumeDamp,            "Modulator HF dampening"),
+    rParamZyn(PFMVelocityScaleFunction, "Modulator Velocity Function"),
     rParamI(PFMDetune,               "Modulator Fine Detune"),
     rParamI(PFMCoarseDetune,         "Modulator Coarse Detune"),
-    rParam(PFMDetuneType,            "Modulator Detune Magnitude"),
+    rParamZyn(PFMDetuneType,            "Modulator Detune Magnitude"),
     rToggle(PFMFreqEnvelopeEnabled,  "Modulator Frequency Envelope"),
     rToggle(PFMAmpEnvelopeEnabled,   "Modulator Amplitude Envelope"),
 
@@ -202,26 +202,26 @@ static Ports globalPorts = {
     //Frequency
     rParamI(PDetune,       "Fine Detune"),
     rParamI(PCoarseDetune, "Coarse Detune"),
-    rParam(PDetuneType,   "Detune Scaling Type"),
-    rParam(PBandwidth,    "Relative Fine Detune Gain"),
+    rParamZyn(PDetuneType,   "Detune Scaling Type"),
+    rParamZyn(PBandwidth,    "Relative Fine Detune Gain"),
 
     //Amplitude
-    rParam(PPanning, "Panning of ADsynth"),
-    rParam(PVolume, "volume control"),
-    rParam(PAmpVelocityScaleFunction, "Volume Velocity Control"),
+    rParamZyn(PPanning, "Panning of ADsynth"),
+    rParamZyn(PVolume, "volume control"),
+    rParamZyn(PAmpVelocityScaleFunction, "Volume Velocity Control"),
 
-    rParam(PPunchStrength, "Punch Strength"),
-    rParam(PPunchTime, "UNKNOWN"),
-    rParam(PPunchStretch, "How Punch changes with note frequency"),
-    rParam(PPunchVelocitySensing, "Punch Velocity control"),
+    rParamZyn(PPunchStrength, "Punch Strength"),
+    rParamZyn(PPunchTime, "UNKNOWN"),
+    rParamZyn(PPunchStretch, "How Punch changes with note frequency"),
+    rParamZyn(PPunchVelocitySensing, "Punch Velocity control"),
 
     //Filter
-    rParam(PFilterVelocityScale, "Filter Velocity Magnitude"),
-    rParam(PFilterVelocityScaleFunction, "Filter Velocity Function Shape"),
+    rParamZyn(PFilterVelocityScale, "Filter Velocity Magnitude"),
+    rParamZyn(PFilterVelocityScaleFunction, "Filter Velocity Function Shape"),
 
 
     //Resonance
-    rParam(Hrandgrouping, "How randomness is applied to multiple voices using the same oscil"),
+    rParamZyn(Hrandgrouping, "How randomness is applied to multiple voices using the same oscil"),
 
     //weird stuff for PCoarseDetune
     {"detunevalue:", NULL, NULL, [](const char *, RtData &d)
diff --git a/src/Params/Controller.cpp b/src/Params/Controller.cpp
index 6cb17965..4ee62a9f 100644
--- a/src/Params/Controller.cpp
+++ b/src/Params/Controller.cpp
@@ -21,6 +21,7 @@
 */
 
 #include "Controller.h"
+#include "../Misc/Util.h"
 #include <cmath>
 #include <cstdio>
 
@@ -30,12 +31,12 @@ using namespace rtosc;
 
 #define rObject Controller
 rtosc::Ports Controller::ports = {
-    rParam(panning.depth, "Depth of Panning MIDI Control"),
-    rParam(filtercutoff.depth, "Depth of Filter Cutoff MIDI Control"),
-    rParam(filterq.depth, "Depth of Filter Q MIDI Control"),
-    rParam(bandwidth.depth, "Depth of Bandwidth MIDI Control"),
+    rParamZyn(panning.depth, "Depth of Panning MIDI Control"),
+    rParamZyn(filtercutoff.depth, "Depth of Filter Cutoff MIDI Control"),
+    rParamZyn(filterq.depth, "Depth of Filter Q MIDI Control"),
+    rParamZyn(bandwidth.depth, "Depth of Bandwidth MIDI Control"),
     rToggle(bandwidth.exponential, "Bandwidth Exponential Mode"),
-    rParam(modwheel.depth, "Depth of Modwheel MIDI Control"),
+    rParamZyn(modwheel.depth, "Depth of Modwheel MIDI Control"),
     rToggle(modwheel.exponential, "Modwheel Exponential Mode"),
     rParamI(pitchwheel.bendrange, "Range of MIDI Pitch Wheel"),
     rToggle(expression.receive, "Expression MIDI Receive"),
@@ -44,15 +45,15 @@ rtosc::Ports Controller::ports = {
     rToggle(sustain.receive,    "Sustain MIDI Receive"),
     rToggle(portamento.receive, "Portamento MIDI Receive"),
     rToggle(portamento.portamento, "UNDOCUMENTED"),
-    rParam(portamento.time, "Portamento Length"),
+    rParamZyn(portamento.time, "Portamento Length"),
     rToggle(portamento.proportional, "If all portamentos are proportional to the distance they span"),
-    rParam(portamento.propRate, "Portamento proportional rate"),
-    rParam(portamento.propDepth, "Portamento proportional depth"),
-    rParam(portamento.pitchthresh, "Threshold for portamento"),
+    rParamZyn(portamento.propRate, "Portamento proportional rate"),
+    rParamZyn(portamento.propDepth, "Portamento proportional depth"),
+    rParamZyn(portamento.pitchthresh, "Threshold for portamento"),
     rToggle(portamento.pitchthreshtype, "Type of threshold"),
-    rParam(portamento.updowntimestretch, "UNDOCUMENTED"),
-    rParam(resonancecenter.depth, "Resonance Center MIDI Depth"),
-    rParam(resonancebandwidth.depth, "Resonance Bandwidth MIDI Depth"),
+    rParamZyn(portamento.updowntimestretch, "UNDOCUMENTED"),
+    rParamZyn(resonancecenter.depth, "Resonance Center MIDI Depth"),
+    rParamZyn(resonancebandwidth.depth, "Resonance Bandwidth MIDI Depth"),
     rToggle(NRPN.receive, "NRPN MIDI Enable"),
     rAction(defaults),
 };
diff --git a/src/Params/EnvelopeParams.cpp b/src/Params/EnvelopeParams.cpp
index 203d2ad9..24f39351 100644
--- a/src/Params/EnvelopeParams.cpp
+++ b/src/Params/EnvelopeParams.cpp
@@ -26,26 +26,27 @@
 #include <rtosc/port-sugar.h>
 
 #include "EnvelopeParams.h"
+#include "../Misc/Util.h"
 
 #define rObject EnvelopeParams
 using namespace rtosc;
 
 static rtosc::Ports localPorts = {
     rToggle(Pfreemode, "Complex Envelope Definitions"),
-    rParam(Penvpoints, rProp(internal), "Number of points in complex definition"),
-    rParam(Penvsustain, rProp(internal), "Location of the sustain point"),
+    rParamZyn(Penvpoints, rProp(internal), "Number of points in complex definition"),
+    rParamZyn(Penvsustain, rProp(internal), "Location of the sustain point"),
     rParams(Penvdt,  MAX_ENVELOPE_POINTS, "Envelope Delay Times"),
     rParams(Penvval, MAX_ENVELOPE_POINTS, "Envelope Values"),
-    rParam(Penvstretch, "Stretch with respect to frequency"),
+    rParamZyn(Penvstretch, "Stretch with respect to frequency"),
     rToggle(Pforcedrelease, "Force Envelope to fully evaluate"),
     rToggle(Plinearenvelope, "Linear or Logarithmic Envelopes"),
-    rParam(PA_dt,  "Attack Time"),
-    rParam(PA_val, "Attack Value"),
-    rParam(PD_dt,  "Decay Time"),
-    rParam(PD_val, "Decay Value"),
-    rParam(PS_val, "Sustain Value"),
-    rParam(PR_dt,  "Release Time"),
-    rParam(PR_val, "Release Value"),
+    rParamZyn(PA_dt,  "Attack Time"),
+    rParamZyn(PA_val, "Attack Value"),
+    rParamZyn(PD_dt,  "Decay Time"),
+    rParamZyn(PD_val, "Decay Value"),
+    rParamZyn(PS_val, "Sustain Value"),
+    rParamZyn(PR_dt,  "Release Time"),
+    rParamZyn(PR_val, "Release Value"),
 
     {"addPoint:i", rProp(internal) rDoc("Add point to envelope"), NULL, [](const char *msg, RtData &d)
         {
diff --git a/src/Params/FilterParams.cpp b/src/Params/FilterParams.cpp
index 3c9b7137..9534f773 100644
--- a/src/Params/FilterParams.cpp
+++ b/src/Params/FilterParams.cpp
@@ -37,9 +37,9 @@ constexpr int sizeof_pvowels = sizeof(FilterParams::Pvowels);
 
 #define rObject FilterParams::Pvowels_t::formants_t
 static rtosc::Ports subsubports = {
-    rParam(freq, "Formant frequency"),
-    rParam(amp,  "Strength of formant"),
-    rParam(q,    "Quality Factor"),
+    rParamZyn(freq, "Formant frequency"),
+    rParamZyn(amp,  "Strength of formant"),
+    rParamZyn(q,    "Quality Factor"),
 };
 #undef rObject
 
@@ -61,22 +61,22 @@ static rtosc::Ports subports = {
 #undef  rChangeCb
 #define rChangeCb obj->changed = true;
 rtosc::Ports FilterParams::ports = {
-    rParam(Pcategory,   "Class of filter"),
-    rParam(Ptype,       "Filter Type"),
-    rParam(Pfreq,        "Center Freq"),
-    rParam(Pq,           "Quality Factor (resonance/bandwidth)"),
-    rParam(Pstages,      "Filter Stages + 1"),
-    rParam(Pfreqtrack,   "Frequency Tracking amount"),
-    rParam(Pgain,        "Output Gain"),
-    rParam(Pnumformants, "Number of formants to be used"),
-    rParam(Pformantslowness, "Rate that formants change"),
-    rParam(Pvowelclearness, "Cost for mixing vowels"),
-    rParam(Pcenterfreq,     "Center Freq (formant)"),
-    rParam(Poctavesfreq,    "Number of octaves for formant"),
+    rParamZyn(Pcategory,   "Class of filter"),
+    rParamZyn(Ptype,       "Filter Type"),
+    rParamZyn(Pfreq,        "Center Freq"),
+    rParamZyn(Pq,           "Quality Factor (resonance/bandwidth)"),
+    rParamZyn(Pstages,      "Filter Stages + 1"),
+    rParamZyn(Pfreqtrack,   "Frequency Tracking amount"),
+    rParamZyn(Pgain,        "Output Gain"),
+    rParamZyn(Pnumformants, "Number of formants to be used"),
+    rParamZyn(Pformantslowness, "Rate that formants change"),
+    rParamZyn(Pvowelclearness, "Cost for mixing vowels"),
+    rParamZyn(Pcenterfreq,     "Center Freq (formant)"),
+    rParamZyn(Poctavesfreq,    "Number of octaves for formant"),
 
     //TODO check if FF_MAX_SEQUENCE is acutally expanded or not
-    rParam(Psequencesize, rMap(max, FF_MAX_SEQUENCE), "Length of vowel sequence"),
-    rParam(Psequencestretch, "How modulators stretch the sequence"),
+    rParamZyn(Psequencesize, rMap(max, FF_MAX_SEQUENCE), "Length of vowel sequence"),
+    rParamZyn(Psequencestretch, "How modulators stretch the sequence"),
     rToggle(Psequencereversed, "If the modulator input is inverted"),
 
     //{"Psequence#" FF_MAX_SEQUENCE "/nvowel", "", NULL, [](){}},
diff --git a/src/Params/LFOParams.cpp b/src/Params/LFOParams.cpp
index 0d8847e5..bb05fab9 100644
--- a/src/Params/LFOParams.cpp
+++ b/src/Params/LFOParams.cpp
@@ -23,6 +23,7 @@
 #include <math.h>
 #include <stdio.h>
 #include "../globals.h"
+#include "../Misc/Util.h"
 #include "LFOParams.h"
 
 #include <rtosc/port-sugar.h>
@@ -33,14 +34,14 @@ using namespace rtosc;
 #define rObject LFOParams
 static rtosc::Ports _ports = {
     rParamF(Pfreq, "frequency of LFO"),
-    rParam(Pintensity, "Intensity of LFO"),
-    rParam(Pstartphase, rSpecial(random), "Starting Phase"),
+    rParamZyn(Pintensity, "Intensity of LFO"),
+    rParamZyn(Pstartphase, rSpecial(random), "Starting Phase"),
     rOption(PLFOtype,"Shape of LFO"),
-    rParam(Prandomness, rSpecial(disable), "Amplitude Randomness"),
-    rParam(Pfreqrand, rSpecial(disable), "Frequency Randomness"),
-    rParam(Pdelay, rSpecial(disable), "Delay before LFO start"),
+    rParamZyn(Prandomness, rSpecial(disable), "Amplitude Randomness"),
+    rParamZyn(Pfreqrand, rSpecial(disable), "Frequency Randomness"),
+    rParamZyn(Pdelay, rSpecial(disable), "Delay before LFO start"),
     rToggle(Pcontinous, "Enable for global operation"),
-    rParam(Pstretch, rCentered, "Note frequency stretch"),
+    rParamZyn(Pstretch, rCentered, "Note frequency stretch"),
 };
 
 rtosc::Ports &LFOParams::ports = _ports;
diff --git a/src/Params/PADnoteParameters.cpp b/src/Params/PADnoteParameters.cpp
index 302e9f20..a26dd559 100644
--- a/src/Params/PADnoteParameters.cpp
+++ b/src/Params/PADnoteParameters.cpp
@@ -29,7 +29,7 @@
 using namespace rtosc;
 
 
-#define PC(x) rParam(P##x, "undocumented padnote parameter")
+#define PC(x) rParamZyn(P##x, "undocumented padnote parameter")
 
 template<int i>
 void simpleset(const char *m, rtosc::RtData &d)
diff --git a/src/Params/SUBnoteParameters.cpp b/src/Params/SUBnoteParameters.cpp
index bc6afe4e..3529448b 100644
--- a/src/Params/SUBnoteParameters.cpp
+++ b/src/Params/SUBnoteParameters.cpp
@@ -34,9 +34,9 @@
 using namespace rtosc;
 static rtosc::Ports localPorts = {
     rToggle(Pstereo, "Stereo Enable"),
-    rParam(PVolume,  "Volume"),
-    rParam(PPanning, "Left Right Panning"),
-    rParam(PAmpVelocityScaleFunction, "Amplitude Velocity Sensing function"),
+    rParamZyn(PVolume,  "Volume"),
+    rParamZyn(PPanning, "Left Right Panning"),
+    rParamZyn(PAmpVelocityScaleFunction, "Amplitude Velocity Sensing function"),
     rParamI(PDetune, "Detune in detune type units"),
     rParamI(PCoarseDetune, "Coarse Detune"),
     //Real values needed
@@ -44,18 +44,18 @@ static rtosc::Ports localPorts = {
     rToggle(PFreqEnvelopeEnabled, "Enable for Frequency Envelope"),
     rToggle(PBandWidthEnvelopeEnabled, "Enable for Bandwidth Envelope"),
     rToggle(PGlobalFilterEnabled, "Enable for Global Filter"),
-    rParam(PGlobalFilterVelocityScale, "Filter Velocity Magnitude"),
-    rParam(PGlobalFilterVelocityScaleFunction, "Filter Velocity Function Shape"),
+    rParamZyn(PGlobalFilterVelocityScale, "Filter Velocity Magnitude"),
+    rParamZyn(PGlobalFilterVelocityScaleFunction, "Filter Velocity Function Shape"),
     //rRecur(FreqEnvelope, EnvelopeParams),
     //rToggle(),//continue
     rToggle(Pfixedfreq, "Base frequency fixed frequency enable"),
-    rParam(PfixedfreqET, "Equal temeperate control for fixed frequency operation"),
-    rParam(Pnumstages, rMap(min, 1), rMap(max, 5), "Number of filter stages"),
-    rParam(Pbandwidth, "Bandwidth of filters"),
-    rParam(Phmagtype, "How the magnitudes are computed (0=linear,1=-60dB,2=-60dB)"),
+    rParamZyn(PfixedfreqET, "Equal temeperate control for fixed frequency operation"),
+    rParamZyn(Pnumstages, rMap(min, 1), rMap(max, 5), "Number of filter stages"),
+    rParamZyn(Pbandwidth, "Bandwidth of filters"),
+    rParamZyn(Phmagtype, "How the magnitudes are computed (0=linear,1=-60dB,2=-60dB)"),
     rArray(Phmag, MAX_SUB_HARMONICS, "Harmonic magnitudes"),
     rArray(Phrelbw, MAX_SUB_HARMONICS, "Relative bandwidth"),
-    rParam(Pbwscale, "Bandwidth scaling with frequency"),
+    rParamZyn(Pbwscale, "Bandwidth scaling with frequency"),
     rRecurp(AmpEnvelope,          "Amplitude envelope"),
     rRecurp(FreqEnvelope,         "Frequency Envelope"),
     rRecurp(BandWidthEnvelope,    "Bandwidth Envelope"),
diff --git a/src/Synth/OscilGen.cpp b/src/Synth/OscilGen.cpp
index 562a7377..fcb1ee8d 100644
--- a/src/Synth/OscilGen.cpp
+++ b/src/Synth/OscilGen.cpp
@@ -36,7 +36,7 @@ int main_thread = 0;
 #include <rtosc/ports.h>
 #include <rtosc/port-sugar.h>
 
-#define PC(x) rParam(P##x, "undocumented oscilgen parameter")
+#define PC(x) rParamZyn(P##x, "undocumented oscilgen parameter")
 
 #define rObject OscilGen
 static rtosc::Ports localPorts = {
diff --git a/src/Synth/Resonance.cpp b/src/Synth/Resonance.cpp
index 34cb7eef..af09413c 100644
--- a/src/Synth/Resonance.cpp
+++ b/src/Synth/Resonance.cpp
@@ -34,9 +34,9 @@ rtosc::Ports Resonance::ports = {
     rToggle(Penabled, "resonance enable"),
     rToggle(Pprotectthefundamental, "Disable resonance filter on first harmonic"),
     rParams(Prespoints, N_RES_POINTS, "Resonance data points"),
-    rParam(PmaxdB, "how many dB the signal may be amplified"),
-    rParam(Pcenterfreq, "Center frequency"),
-    rParam(Poctavesfreq, "The number of octaves..."),
+    rParamZyn(PmaxdB, "how many dB the signal may be amplified"),
+    rParamZyn(Pcenterfreq, "Center frequency"),
+    rParamZyn(Poctavesfreq, "The number of octaves..."),
     rActioni(randomize, rMap(min,0), rMap(max, 2), "Randomize frequency response"),
     rActioni(interpolatepeaks, rMap(min,0), rMap(max, 2), "Generate response from peak values"),
     rAction(smooth, "Smooth out frequency response"),
-- 
2.47.0

