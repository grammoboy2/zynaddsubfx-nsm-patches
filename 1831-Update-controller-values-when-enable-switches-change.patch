From d526e4bb167b4d0675b47f18d0aa9bf5844ae021 Mon Sep 17 00:00:00 2001
From: Ricard Wanderlof <polluxsynth@butoba.net>
Date: Tue, 8 Mar 2022 19:27:32 +0100
Subject: [PATCH 1831/1936] Update controller values when enable switches
 changed

Similar to updating controller values when depths are changed,
update those that (only) have enable switches when the corresponding
switch is changed. Otherwise, when an enable switch is changed,
the underlying parameter value will remain at its current
value until a new MIDI CC value is received. Especially
in the case of disabling external control, this is counter
intuitive as it means that the underlying parameter does
not change back to its default value until a new MIDI CC
(whose value is now irrelevant) is received.
---
 src/Params/Controller.cpp | 34 +++++++++++++++++++++++++++++++++-
 src/Params/Controller.h   |  4 ++++
 2 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/src/Params/Controller.cpp b/src/Params/Controller.cpp
index 94fffabb..71da9354 100644
--- a/src/Params/Controller.cpp
+++ b/src/Params/Controller.cpp
@@ -65,15 +65,23 @@ const rtosc::Ports Controller::ports = {
     rParamI(pitchwheel.bendrange_down, rDefault(0),
         "Lower Range of MIDI Pitch Wheel"),
 #undef rChangeCb
-#define rChangeCb rChangeCbBase
+#define rChangeCb obj->setexpression(); rChangeCbBase
     rToggle(expression.receive, rShort("exp.rcv"), rDefault(true),
         "Expression MIDI Receive"),
+#undef rChangeCb
+#define rChangeCb obj->setfmamp(); rChangeCbBase
     rToggle(fmamp.receive,      rShort("fma.rcv"), rDefault(true),
         "FM amplitude MIDI Receive"),
+#undef rChangeCb
+#define rChangeCb obj->setvolume(); rChangeCbBase
     rToggle(volume.receive,     rShort("vol.rcv"), rDefault(true),
         "Volume MIDI Receive"),
+#undef rChangeCb
+#define rChangeCb obj->setsustain(); rChangeCbBase
     rToggle(sustain.receive,    rShort("sus.rcv"), rDefault(true),
         "Sustain MIDI Receive"),
+#undef rChangeCb
+#define rChangeCb rChangeCbBase
     rToggle(portamento.receive, rShort("prt.rcv"), rDefault(true),
         "Portamento MIDI Receive"),
     rToggle(portamento.portamento, rDefault(false),
@@ -195,6 +203,12 @@ void Controller::setpitchwheel()
 void Controller::setexpression(int value)
 {
     expression.data = value;
+    setexpression();
+}
+
+void Controller::setexpression(void)
+{
+    int value = expression.data;
     if(expression.receive != 0)
     {
         assert( value <= 127 ); /* to protect what's left of JML's hearing */
@@ -291,6 +305,12 @@ void Controller::setmodwheel(void)
 void Controller::setfmamp(int value)
 {
     fmamp.data = value;
+    setfmamp();
+}
+
+void Controller::setfmamp(void)
+{
+    int value = fmamp.data;
     fmamp.relamp = value / 127.0f;
     if(fmamp.receive != 0)
         fmamp.relamp = value / 127.0f;
@@ -301,6 +321,12 @@ void Controller::setfmamp(int value)
 void Controller::setvolume(int value)
 {
     volume.data = value;
+    setvolume();
+}
+
+void Controller::setvolume(void)
+{
+    int value = volume.data;
     if(volume.receive != 0)
     {
         /* volume.volume = powf(0.1f, (127 - value) / 127.0f * 2.0f); */
@@ -318,6 +344,12 @@ void Controller::setvolume(int value)
 void Controller::setsustain(int value)
 {
     sustain.data = value;
+    setsustain();
+}
+
+void Controller::setsustain(void)
+{
+    int value = sustain.data;
     if(sustain.receive != 0)
         sustain.sustain = ((value < 64) ? 0 : 1);
     else
diff --git a/src/Params/Controller.h b/src/Params/Controller.h
index 71e9f789..34d2367b 100644
--- a/src/Params/Controller.h
+++ b/src/Params/Controller.h
@@ -36,6 +36,7 @@ class Controller
         void setpitchwheel(int value);
         void setpitchwheel(void);
         void setexpression(int value);
+        void setexpression(void);
         void setpanning(int value);
         void setpanning(void);
         void setfiltercutoff(int value);
@@ -47,8 +48,11 @@ class Controller
         void setmodwheel(int value);
         void setmodwheel(void);
         void setfmamp(int value);
+        void setfmamp(void);
         void setvolume(int value);
+        void setvolume(void);
         void setsustain(int value);
+        void setsustain(void);
         /**Enable or disable portamento
          * @param value 0-127 MIDI value (greater than 64 enables)*/
         void setportamento(int value);
-- 
2.47.0

