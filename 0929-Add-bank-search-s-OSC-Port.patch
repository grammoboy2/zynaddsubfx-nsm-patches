From e3353660913f6a512b30d5c547756080dcedba80 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Tue, 14 Jun 2016 12:18:23 -0400
Subject: [PATCH 0929/1936] Add /bank/search:s OSC Port

Adds BankDb for searching over all instruments.
It's now possible to search over all instruments in banks for:
- comments
- authors
- pad/add/sub
- titles
- patch names

After some hashtag delimited tags have been added this should make
browsing much easier. Such a system could be used to add in concepts
like favorites relatively easily.

Right now this method rescans all patches on every startup, so there's
a lot of overhead which can be removed via some sort of caching.
---
 src/Misc/Bank.cpp       |  19 +++-
 src/Misc/Bank.h         |   5 +-
 src/Misc/BankDb.cpp     | 191 ++++++++++++++++++++++++++++++++++++++++
 src/Misc/BankDb.h       |  48 ++++++++++
 src/Misc/CMakeLists.txt |   1 +
 src/Misc/MiddleWare.cpp |  24 +++++
 6 files changed, 285 insertions(+), 3 deletions(-)
 create mode 100644 src/Misc/BankDb.cpp
 create mode 100644 src/Misc/BankDb.h

diff --git a/src/Misc/Bank.cpp b/src/Misc/Bank.cpp
index aa46605f..96030859 100644
--- a/src/Misc/Bank.cpp
+++ b/src/Misc/Bank.cpp
@@ -29,6 +29,7 @@
 #include "Config.h"
 #include "Util.h"
 #include "Part.h"
+#include "BankDb.h"
 
 #define INSTRUMENT_EXTENSION ".xiz"
 
@@ -39,7 +40,7 @@ using namespace std;
 
 Bank::Bank(Config *config)
     :bankpos(0), defaultinsname(" "), config(config),
-     bank_msb(0), bank_lsb(0)
+    db(new BankDb), bank_msb(0), bank_lsb(0)
 {
     clearbank();
     bankfiletitle = dirname;
@@ -57,6 +58,7 @@ Bank::Bank(Config *config)
 Bank::~Bank()
 {
     clearbank();
+    delete db;
 }
 
 /*
@@ -179,7 +181,8 @@ int Bank::savetoslot(unsigned int ninstrument, Part *part)
     err = part->saveXML(filename.c_str());
     if(err)
         return err;
-    addtobank(ninstrument, legalizeFilename(tmpfilename) + ".xiz", (char *) part->Pname);
+    addtobank(ninstrument, legalizeFilename(tmpfilename) + ".xiz",
+              (char *) part->Pname);
     return 0;
 }
 
@@ -350,6 +353,7 @@ bool Bank::bankstruct::operator<(const bankstruct &b) const
 
 void Bank::rescanforbanks()
 {
+    db->clear();
     //remove old banks
     banks.clear();
 
@@ -362,6 +366,7 @@ void Bank::rescanforbanks()
 
     //remove duplicate bank names
     for(int j = 0; j < (int) banks.size() - 1; ++j) {
+        db->addBankDir(banks[j].dir);
         int dupl = 0;
         for(int i = j + 1; i < (int) banks.size(); ++i) {
             if(banks[i].name == banks[j].name) {
@@ -376,6 +381,7 @@ void Bank::rescanforbanks()
         if(dupl)
             j += dupl;
     }
+    db->scanBanks();
 }
 
 void Bank::setMsb(uint8_t msb)
@@ -453,6 +459,15 @@ void Bank::clearbank()
     dirname.clear();
 }
 
+std::vector<std::string> Bank::search(std::string s) const
+{
+    std::vector<std::string> out;
+    auto vec = db->search(s);
+    for(auto e:vec)
+        out.push_back(e.bank+e.file);
+    return out;
+}
+
 int Bank::addtobank(int pos, string filename, string name)
 {
     if((pos >= 0) && (pos < BANK_SIZE)) {
diff --git a/src/Misc/Bank.h b/src/Misc/Bank.h
index 9caa9abb..aa7684da 100644
--- a/src/Misc/Bank.h
+++ b/src/Misc/Bank.h
@@ -68,7 +68,7 @@ class Bank
 
         std::vector<bankstruct> banks;
         int bankpos;
-        
+
         struct ins_t {
             ins_t(void);
             std::string name;
@@ -76,6 +76,8 @@ class Bank
             std::string filename;
         } ins[BANK_SIZE];
 
+        std::vector<std::string> search(std::string) const;
+
     private:
 
         //it adds a filename to the bank
@@ -100,6 +102,7 @@ class Bank
         void normalizedirsuffix(std::string &dirname) const;
 
         Config* const config;
+        class BankDb *db;
 
     public:
         uint8_t bank_msb;
diff --git a/src/Misc/BankDb.cpp b/src/Misc/BankDb.cpp
new file mode 100644
index 00000000..f77d1510
--- /dev/null
+++ b/src/Misc/BankDb.cpp
@@ -0,0 +1,191 @@
+#include "BankDb.h"
+#include "XMLwrapper.h"
+#include "../globals.h"
+#include <cstring>
+#include <dirent.h>
+
+#define INSTRUMENT_EXTENSION ".xiz"
+
+using std::string;
+typedef BankDb::svec svec;
+typedef BankDb::bvec bvec;
+
+BankEntry::BankEntry(void)
+    :id(0), add(false), pad(false), sub(false)
+{}
+bool BankEntry::match(string s) const
+{
+    if(s == "#pad")
+        return pad;
+    else if(s == "#sub")
+        return sub;
+    else if(s == "#add")
+        return add;
+    auto end = string::npos;
+    return file.find(s) != end || name.find(s) != end ||
+        comments.find(s) != end || author.find(s) != end;
+}
+
+static svec split(string s)
+{
+    svec vec;
+    string ss;
+    for(char c:s) {
+        if(isspace(c) && !ss.empty()) {
+            vec.push_back(ss);
+            ss.clear();
+        } else if(!isspace(c)) {
+            ss.push_back(c);
+        }
+    }
+    if(!ss.empty())
+        vec.push_back(ss);
+
+    return vec;
+}
+
+static string line(string s)
+{
+    string ss;
+    for(char c:s) {
+        if(c != '\n')
+            ss.push_back(c);
+        else
+            return ss;
+    }
+    return ss;
+}
+
+bvec BankDb::search(std::string ss) const
+{
+    bvec vec;
+    const svec sterm = split(ss);
+    for(auto field:fields) {
+        bool match = true;
+        for(auto s:sterm)
+            match &= field.match(s);
+        if(match)
+            vec.push_back(field);
+    }
+
+    return vec;
+}
+
+void BankDb::addBankDir(std::string bnk)
+{
+    bool repeat = false;
+    for(auto b:banks)
+        repeat |= b == bnk;
+    
+    if(!repeat)
+        banks.push_back(bnk);
+}
+
+void BankDb::clear(void)
+{
+    banks.clear();
+    fields.clear();
+}
+
+void BankDb::scanBanks(void)
+{
+    fields.clear();
+    for(auto bank:banks)
+    {
+        DIR *dir = opendir(bank.c_str());
+
+        if(!dir)
+            continue;
+
+        struct dirent *fn;
+
+        while((fn = readdir(dir))) {
+            const char *filename = fn->d_name;
+
+            //check for extension
+            if(!strstr(filename, INSTRUMENT_EXTENSION))
+                continue;
+
+            auto xiz = processXiz(filename, bank);
+            fields.push_back(xiz);
+        }
+
+        closedir(dir);
+    }
+}
+
+BankEntry BankDb::processXiz(std::string filename, std::string bank) const
+{
+    //verify if the name is like this NNNN-name (where N is a digit)
+    int no = 0;
+    unsigned int startname = 0;
+
+    for(unsigned int i = 0; i < 4; ++i) {
+        if(filename.length() <= i)
+            break;
+
+        if(isdigit(filename[i])) {
+            no = no * 10 + (filename[i] - '0');
+            startname++;
+        }
+    }
+
+    if(startname + 1 < filename.length())
+        startname++;  //to take out the "-"
+
+    std::string name = filename;
+
+    //remove the file extension
+    for(int i = name.size() - 1; i >= 2; i--) {
+        if(name[i] == '.') {
+            name = name.substr(0, i);
+            break;
+        }
+    }
+
+
+    BankEntry entry;
+    entry.file = filename;
+    entry.bank = bank;
+    entry.id   = no;
+
+    if(no != 0) //the instrument position in the bank is found
+        entry.name = name.substr(startname);
+    else
+        entry.name = name;
+
+    //Try to obtain other metadata (expensive)
+    XMLwrapper xml;
+    string fname = bank+filename;
+    int ret = xml.loadXMLfile(fname);
+    if(xml.enterbranch("INSTRUMENT")) {
+        if(xml.enterbranch("INFO")) {
+            char author[1024];
+            char comments[1024];
+            xml.getparstr("author", author, 1024);
+            xml.getparstr("comments", comments, 1024);
+            entry.author   = author;
+            entry.comments = comments;
+            xml.exitbranch();
+        }
+        if(xml.enterbranch("INSTRUMENT_KIT")) {
+            for(int i = 0; i < NUM_KIT_ITEMS; ++i) {
+                if(xml.enterbranch("INSTRUMENT_KIT_ITEM", i) == 0) {
+                    entry.add |= xml.getparbool("add_enabled", false);
+                    entry.sub |= xml.getparbool("sub_enabled", false);
+                    entry.pad |= xml.getparbool("pad_enabled", false);
+                    xml.exitbranch();
+                }
+            }
+            xml.exitbranch();
+        }
+        xml.exitbranch();
+    }
+  
+    //printf("Bank Entry:\n");
+    //printf("\tname   - %s\n", entry.name.c_str());
+    //printf("\tauthor - %s\n", line(entry.author).c_str());
+    //printf("\tadd/pad/sub - %d/%d/%d\n", entry.add, entry.pad, entry.sub);
+
+    return entry;
+}
diff --git a/src/Misc/BankDb.h b/src/Misc/BankDb.h
new file mode 100644
index 00000000..bea3392f
--- /dev/null
+++ b/src/Misc/BankDb.h
@@ -0,0 +1,48 @@
+#include <string>
+#include <vector>
+
+struct BankEntry
+{
+    BankEntry(void);
+    std::string file;
+    std::string bank;
+    std::string name;
+    std::string comments;
+    std::string author;
+    int         id;
+    bool        add;
+    bool        pad;
+    bool        sub;
+    typedef std::vector<std::string> svec;
+    svec tags(void) const;
+    bool match(std::string) const;
+};
+
+class BankDb
+{
+    public:
+        typedef std::vector<std::string> svec;
+        typedef std::vector<BankEntry>   bvec;
+        
+        //search for banks
+        //uses a space separated list of keywords and
+        //finds something that matches ALL keywords
+        bvec search(std::string) const;
+
+        //fully qualified paths only
+        void addBankDir(std::string);
+        
+        //clear all known entries and banks
+        void clear(void);
+
+        //List of all tags
+        svec tags(void) const;
+
+        //scan banks
+        void scanBanks(void);
+
+    private:
+        BankEntry processXiz(std::string, std::string) const;
+        bvec fields;
+        svec banks;
+};
diff --git a/src/Misc/CMakeLists.txt b/src/Misc/CMakeLists.txt
index 18a6c07e..9a150500 100644
--- a/src/Misc/CMakeLists.txt
+++ b/src/Misc/CMakeLists.txt
@@ -2,6 +2,7 @@ include_directories(${MXML_INCLUDE_DIR})
 
 set(zynaddsubfx_misc_SRCS
 	Misc/Bank.cpp
+    Misc/BankDb.cpp
 	Misc/Config.cpp
 	Misc/Master.cpp
 	Misc/Microtonal.cpp
diff --git a/src/Misc/MiddleWare.cpp b/src/Misc/MiddleWare.cpp
index ce1e9fdb..6571e936 100644
--- a/src/Misc/MiddleWare.cpp
+++ b/src/Misc/MiddleWare.cpp
@@ -783,6 +783,17 @@ class MwDataObj:public rtosc::RtData
             }
             va_end(va);
         }
+        virtual void replyArray(const char *path, const char *args, rtosc_arg_t *argd) override
+        {
+            //printf("reply building '%s'\n", path);
+            if(!strcmp(path, "/forward")) { //forward the information to the backend
+                args++;
+                rtosc_amessage(buffer,4*4096,path,args,argd);
+            } else {
+                rtosc_amessage(buffer,4*4096,path,args,argd);
+                reply(buffer);
+            }
+        }
         virtual void reply(const char *msg){
             mwi->sendToCurrentRemote(msg);
         };
@@ -937,6 +948,19 @@ rtosc::Ports bankPorts = {
         if(err)
             d.reply("/alert", "s", "Error: Could not make a new bank (directory)..");
         rEnd},
+    {"search:s", 0, 0,
+        rBegin;
+        auto res = impl.search(rtosc_argument(msg, 0).s);
+#define MAX_SEARCH 128
+        char res_type[MAX_SEARCH+1] = {0};
+        rtosc_arg_t res_dat[MAX_SEARCH] = {0};
+        for(int i=0; i<res.size() && i<MAX_SEARCH; ++i) {
+            res_type[i]  = 's';
+            res_dat[i].s = res[i].c_str();
+        }
+        d.replyArray(d.loc, res_type, res_dat);
+#undef MAX_SEARCH
+        rEnd},
 };
 
 /******************************************************************************
-- 
2.47.0

