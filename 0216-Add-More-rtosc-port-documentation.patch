From c5b165c9f7879ada5aa1d99be3a1f20bfeb119b8 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Mon, 21 Jul 2014 13:53:32 -0400
Subject: [PATCH 0216/1936] Add More rtosc port documentation

---
 src/Effects/EffectMgr.cpp        | 14 +++++++++-----
 src/Params/EnvelopeParams.cpp    |  4 ++--
 src/Params/FilterParams.cpp      |  2 +-
 src/Params/SUBnoteParameters.cpp |  8 ++++----
 src/Synth/Resonance.cpp          |  6 ++++--
 5 files changed, 20 insertions(+), 14 deletions(-)

diff --git a/src/Effects/EffectMgr.cpp b/src/Effects/EffectMgr.cpp
index bbe4329b..350b1f4e 100644
--- a/src/Effects/EffectMgr.cpp
+++ b/src/Effects/EffectMgr.cpp
@@ -39,7 +39,8 @@
 
 rtosc::Ports EffectMgr::ports = {
     RECURP(EffectMgr, FilterParams, Filter, filterpars, "Filter Parameter for Dynamic Filter"),
-    {"parameter#64::c", rProp(alias), NULL, [](const char *msg, rtosc::RtData &d)
+    {"parameter#64::c", rProp(alias) rDoc("Parameter Accessor"), NULL,
+        [](const char *msg, rtosc::RtData &d)
         {
             EffectMgr *eff = (EffectMgr*)d.obj;
             const char *mm = msg;
@@ -50,7 +51,8 @@ rtosc::Ports EffectMgr::ports = {
             else
                 eff->seteffectpar_nolock(atoi(mm), rtosc_argument(msg, 0).i);
         }},
-    {"preset::c", rProp(alias), NULL, [](const char *msg, rtosc::RtData &d)
+    {"preset::c", rProp(alias) rDoc("Effect Preset Selector"), NULL,
+        [](const char *msg, rtosc::RtData &d)
         {
             EffectMgr *eff = (EffectMgr*)d.obj;
             if(!rtosc_narguments(msg))
@@ -58,7 +60,8 @@ rtosc::Ports EffectMgr::ports = {
             else
                 eff->changepreset_nolock(rtosc_argument(msg, 0).i);
         }},
-    {"eq-coeffs:", rProp(internal), NULL, [](const char *, rtosc::RtData &d)
+    {"eq-coeffs:", rProp(internal) rDoc("Get equalizer Coefficients"), NULL,
+        [](const char *, rtosc::RtData &d)
         {
             EffectMgr *eff = (EffectMgr*)d.obj;
             if(eff->nefx != 7)
@@ -71,12 +74,13 @@ rtosc::Ports EffectMgr::ports = {
             eq->getFilter(a,b);
             d.reply(d.loc, "bb", sizeof(a), a, sizeof(b), b);
         }},
-    {"efftype:", rProp(internal), NULL, [](const char *, rtosc::RtData &d)
+    {"efftype:", rProp(internal) rDoc("Get Effect Type"), NULL, [](const char *, rtosc::RtData &d)
         {
             EffectMgr *eff  = (EffectMgr*)d.obj;
             d.reply(d.loc, "c", eff->nefx);
         }},
-    {"efftype:b", rProp(internal), NULL, [](const char *msg, rtosc::RtData &d)
+    {"efftype:b", rProp(internal) rDoc("Pointer swap EffectMgr"), NULL,
+        [](const char *msg, rtosc::RtData &d)
         {
             EffectMgr *eff  = (EffectMgr*)d.obj;
             EffectMgr *eff_ = *(EffectMgr**)rtosc_argument(msg,0).b.data;
diff --git a/src/Params/EnvelopeParams.cpp b/src/Params/EnvelopeParams.cpp
index 50f0ab53..203d2ad9 100644
--- a/src/Params/EnvelopeParams.cpp
+++ b/src/Params/EnvelopeParams.cpp
@@ -47,7 +47,7 @@ static rtosc::Ports localPorts = {
     rParam(PR_dt,  "Release Time"),
     rParam(PR_val, "Release Value"),
 
-    {"addPoint:i", rProp(internal), NULL, [](const char *msg, RtData &d)
+    {"addPoint:i", rProp(internal) rDoc("Add point to envelope"), NULL, [](const char *msg, RtData &d)
         {
             EnvelopeParams *env = (rObject*) d.obj;
             const int curpoint = rtosc_argument(msg, 0).i;
@@ -67,7 +67,7 @@ static rtosc::Ports localPorts = {
             env->Penvpoints++;
             if (curpoint<=env->Penvsustain) env->Penvsustain++;
         }},
-    {"delPoint:i", rProp(internal), NULL, [](const char *msg, RtData &d)
+    {"delPoint:i", rProp(internal) rDoc("Delete Envelope Point"), NULL, [](const char *msg, RtData &d)
         {
             EnvelopeParams *env = (rObject*) d.obj;
             const int curpoint=rtosc_argument(msg, 0).i;
diff --git a/src/Params/FilterParams.cpp b/src/Params/FilterParams.cpp
index 67948b85..23fea64e 100644
--- a/src/Params/FilterParams.cpp
+++ b/src/Params/FilterParams.cpp
@@ -82,7 +82,7 @@ rtosc::Ports FilterParams::ports = {
     //{"Psequence#" FF_MAX_SEQUENCE "/nvowel", "", NULL, [](){}},
     
     //UI reader
-    {"Pvowels", NULL, NULL,
+    {"Pvowels:", rDoc("Get Formant Vowels"), NULL,
         [](const char *, RtData &d) {
             FilterParams *obj = (FilterParams *) d.obj;
             d.reply(d.loc, "b", sizeof_pvowels, obj->Pvowels);
diff --git a/src/Params/SUBnoteParameters.cpp b/src/Params/SUBnoteParameters.cpp
index 833bea3c..bc6afe4e 100644
--- a/src/Params/SUBnoteParameters.cpp
+++ b/src/Params/SUBnoteParameters.cpp
@@ -63,7 +63,7 @@ static rtosc::Ports localPorts = {
     rRecurp(GlobalFilter,         "Post Filter"),
     rOption(Pstart, rOptions("zero", "random", "ones"), "How harmonics are initialized"),
 
-    {"clear:", NULL, NULL, [](const char *, RtData &d)
+    {"clear:", rDoc("Reset all harmonics to equal bandwidth/zero amplitude"), NULL, [](const char *, RtData &d)
         {
             SUBnoteParameters *obj = (SUBnoteParameters *)d.obj;
             for(int i=0; i<MAX_SUB_HARMONICS; ++i) {
@@ -72,13 +72,13 @@ static rtosc::Ports localPorts = {
             }
             obj->Phmag[0] = 127;
         }},
-    {"detunevalue:", NULL, NULL, [](const char *, RtData &d)
+    {"detunevalue:", rDoc("Get note detune value"), NULL, [](const char *, RtData &d)
         {
             SUBnoteParameters *obj = (SUBnoteParameters *)d.obj;
             d.reply(d.loc, "f", getdetune(obj->PDetuneType, 0, obj->PDetune));
         }},
     //weird stuff for PCoarseDetune
-    {"octave::c:i", NULL, NULL, [](const char *msg, RtData &d)
+    {"octave::c:i", rDoc("Note octave shift"), NULL, [](const char *msg, RtData &d)
         {
             SUBnoteParameters *obj = (SUBnoteParameters *)d.obj;
             if(!rtosc_narguments(msg)) {
@@ -91,7 +91,7 @@ static rtosc::Ports localPorts = {
                 obj->PCoarseDetune = k*1024 + obj->PCoarseDetune%1024;
             }
         }},
-    {"coarsedetune::c:i", NULL, NULL, [](const char *msg, RtData &d)
+    {"coarsedetune::c:i", rDoc("Note coarse detune"), NULL, [](const char *msg, RtData &d)
         {
             SUBnoteParameters *obj = (SUBnoteParameters *)d.obj;
             if(!rtosc_narguments(msg)) {
diff --git a/src/Synth/Resonance.cpp b/src/Synth/Resonance.cpp
index 7af3342b..d1c06edc 100644
--- a/src/Synth/Resonance.cpp
+++ b/src/Synth/Resonance.cpp
@@ -42,9 +42,11 @@ rtosc::Ports Resonance::ports = {
     rAction(smooth, "Smooth out frequency response"),
     rAction(zero,   "Reset frequency response"),
     //UI Value listeners
-    {"centerfreq:", "", NULL, [](const char *, RtData &d)
+    {"centerfreq:", rDoc("Get center frequency"),  NULL,
+        [](const char *, RtData &d)
         {d.reply(d.loc, "f", ((rObject*)d.obj)->getcenterfreq());}},
-    {"octavesfreq:", "", NULL, [](const char *, RtData &d)
+    {"octavesfreq:", rDoc("Get center freq of graph"), NULL,
+            [](const char *, RtData &d)
         {d.reply(d.loc, "f", ((rObject*)d.obj)->getoctavesfreq());}},
                                                                 
 };
-- 
2.47.0

