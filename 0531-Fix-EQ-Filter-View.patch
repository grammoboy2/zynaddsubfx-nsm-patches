From db48d6e1decfc6dc60c83a8b95642534ac4da9fa Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Thu, 6 Aug 2015 18:30:17 -0400
Subject: [PATCH 0531/1936] Fix EQ Filter View

Collect biquad parameters rather than the convolution of them.
This avoids numeric issues which can't be fixed by upgrading floats
to doubles.
Partial fix to bug #85
---
 src/Effects/EQ.cpp        | 31 ++++++++-----------------------
 src/Effects/EQ.h          |  4 ++--
 src/Effects/EffectMgr.cpp |  4 ++--
 src/UI/EffUI.fl           |  2 +-
 src/UI/Fl_EQGraph.H       |  4 ++--
 src/UI/Fl_EQGraph.cpp     | 22 +++++++++++++++-------
 6 files changed, 30 insertions(+), 37 deletions(-)

diff --git a/src/Effects/EQ.cpp b/src/Effects/EQ.cpp
index db4e9f5c..59af618f 100644
--- a/src/Effects/EQ.cpp
+++ b/src/Effects/EQ.cpp
@@ -205,41 +205,26 @@ float EQ::getfreqresponse(float freq)
     return rap2dB(resp * outvolume);
 }
 
-//full taps & three filter taps
-static void convolve(float *a, const float *filter)
-{
-    float tmp[MAX_EQ_BANDS*2+1];
-
-    for(int i=0; i<MAX_EQ_BANDS*2+1; ++i)
-        tmp[i] = a[i];
-
-    //Base Case
-    a[0] = tmp[0]*filter[0];
-    a[1] = tmp[0]*filter[1] + tmp[1]*filter[0];
-
-    for(int i=2; i<MAX_EQ_BANDS+1; ++i) {
-        a[i] = filter[0]*tmp[i]   +
-               filter[1]*tmp[i-1] +
-               filter[2]*tmp[i-2];
-    }
-}
-
 //Not exactly the most efficient manner to derive the total taps, but it should
 //be fast enough in practice
 void EQ::getFilter(float *a, float *b) const
 {
     a[0] = 1;
     b[0] = 1;
+    off_t off=0;
     for(int i = 0; i < MAX_EQ_BANDS; ++i) {
         auto &F = filter[i];
         if(F.Ptype == 0)
             continue;
-        float Fb[3] = {F.l->coeff.c[0], F.l->coeff.c[1], F.l->coeff.c[2]};
-        float Fa[3] = {1.0f, -F.l->coeff.d[1], -F.l->coeff.d[2]};
+        const double Fb[3] = {F.l->coeff.c[0], F.l->coeff.c[1], F.l->coeff.c[2]};
+        const double Fa[3] = {1.0f, -F.l->coeff.d[1], -F.l->coeff.d[2]};
 
         for(int j=0; j<F.Pstages+1; ++j) {
-            convolve(b, Fb);
-            convolve(a, Fa);
+            for(int k=0; k<3; ++k) {
+                a[off] = Fa[k];
+                b[off] = Fb[k];
+                off++;
+            }
         }
     }
 }
diff --git a/src/Effects/EQ.h b/src/Effects/EQ.h
index 21af4e29..877fb1ec 100644
--- a/src/Effects/EQ.h
+++ b/src/Effects/EQ.h
@@ -38,8 +38,8 @@ class EQ:public Effect
         void cleanup(void);
         float getfreqresponse(float freq);
 
-        void getFilter(float *a/*[MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1]*/,
-                       float *b/*[MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1]*/) const;
+        void getFilter(float *a/*[MAX_EQ_BANDS*MAX_FILTER_STAGES*3]*/,
+                       float *b/*[MAX_EQ_BANDS*MAX_FILTER_STAGES*3]*/) const;
     private:
         //Parameters
         unsigned char Pvolume;
diff --git a/src/Effects/EffectMgr.cpp b/src/Effects/EffectMgr.cpp
index 5397ae9a..c78d5b5a 100644
--- a/src/Effects/EffectMgr.cpp
+++ b/src/Effects/EffectMgr.cpp
@@ -75,8 +75,8 @@ static const rtosc::Ports local_ports = {
             if(eff->nefx != 7)
                 return;
             EQ *eq = (EQ*)eff->efx;
-            float a[MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1];
-            float b[MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1];
+            float a[MAX_EQ_BANDS*MAX_FILTER_STAGES*3];
+            float b[MAX_EQ_BANDS*MAX_FILTER_STAGES*3];
             memset(a, 0, sizeof(a));
             memset(b, 0, sizeof(b));
             eq->getFilter(a,b);
diff --git a/src/UI/EffUI.fl b/src/UI/EffUI.fl
index f444e997..ae9b49d1 100644
--- a/src/UI/EffUI.fl
+++ b/src/UI/EffUI.fl
@@ -943,7 +943,7 @@ stagescounter->oscMove("parameter"+to_s(npb+4));}
         Fl_Counter stagescounter {
           label {St.}
           callback {eqgraph->update();}
-          tooltip {Additional filter stages} xywh {340 60 30 15} type Simple labelfont 1 labelsize 10 minimum 1 maximum 127 step 1 textfont 1 textsize 11
+          tooltip {Additional filter stages} xywh {340 60 30 15} type Simple labelfont 1 labelsize 10 minimum 0 maximum 127 step 1 textfont 1 textsize 11
           code0 {o->init("parameter14");}
           class Fl_Osc_Counter
         }
diff --git a/src/UI/Fl_EQGraph.H b/src/UI/Fl_EQGraph.H
index d1396367..8ac46c7f 100644
--- a/src/UI/Fl_EQGraph.H
+++ b/src/UI/Fl_EQGraph.H
@@ -24,6 +24,6 @@ class Fl_EQGraph:public Fl_Box, public Fl_Osc_Widget
         float getfreqpos(float freq) const;
 
         float samplerate;
-        float num[MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1];
-        float dem[MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1];
+        float num[MAX_EQ_BANDS*MAX_FILTER_STAGES*3];
+        float dem[MAX_EQ_BANDS*MAX_FILTER_STAGES*3];
 };
diff --git a/src/UI/Fl_EQGraph.cpp b/src/UI/Fl_EQGraph.cpp
index c228122f..d6ebb28c 100644
--- a/src/UI/Fl_EQGraph.cpp
+++ b/src/UI/Fl_EQGraph.cpp
@@ -32,7 +32,7 @@ void Fl_EQGraph::OSC_raw(const char *msg)
         samplerate = rtosc_argument(msg, 0).f;
     } else {
         memcpy(dem, rtosc_argument(msg, 0).b.data, sizeof(dem));
-        memcpy(num, rtosc_argument(msg, 1).b.data, sizeof(dem));
+        memcpy(num, rtosc_argument(msg, 1).b.data, sizeof(num));
         redraw();
     }
 }
@@ -141,16 +141,24 @@ void Fl_EQGraph::draw(void)
 double Fl_EQGraph::getresponse(int maxy,float freq) const
 {
     const float angle = 2*PI*freq/samplerate;
-    std::complex<float> num_res = 0;
-    std::complex<float> dem_res = 0;
+    float mag = 1;
+    //std::complex<float> num_res = 0;
+    //std::complex<float> dem_res = 0;
          
 
-    for(int i = 0; i < MAX_EQ_BANDS*MAX_FILTER_STAGES*2+1; ++i) {
-        num_res += FFTpolar<float>(num[i], i*angle);
-        dem_res += FFTpolar<float>(dem[i], i*angle);
+    for(int i = 0; i < MAX_EQ_BANDS*MAX_FILTER_STAGES; ++i) {
+        if(num[3*i] == 0)
+            break;
+        std::complex<float> num_res= 0;
+        std::complex<float> dem_res= 0;
+        for(int j=0; j<3; ++j) {
+            num_res += FFTpolar<float>(num[3*i+j], j*angle);
+            dem_res += FFTpolar<float>(dem[3*i+j], j*angle);
+        }
+        mag *= abs(num_res/dem_res);
     }
 
-    float dbresp=20*log(abs(num_res/dem_res))/log(10);
+    float dbresp=20*log(mag)/log(10);
 
     //rescale
     return (int) ((dbresp/MAX_DB+1.0)*maxy/2.0);
-- 
2.47.0

