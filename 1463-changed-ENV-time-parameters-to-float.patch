From 873a1b9ba455b7d37194a90b8f744272704e2512 Mon Sep 17 00:00:00 2001
From: Friedolino <mkirchn@freenet.de>
Date: Sat, 13 Apr 2019 19:23:53 +0200
Subject: [PATCH 1463/1936] changed ENV time parameters to float

---
 src/Params/EnvelopeParams.cpp | 288 +++++++++++++++++++++-------------
 src/Params/EnvelopeParams.h   |  28 ++--
 src/Synth/Envelope.cpp        |   9 +-
 src/Synth/Envelope.h          |   2 +-
 src/Tests/guitar-adnote.xmz   |  96 ++++++------
 5 files changed, 246 insertions(+), 177 deletions(-)

diff --git a/src/Params/EnvelopeParams.cpp b/src/Params/EnvelopeParams.cpp
index 587d75df..7e419f4d 100644
--- a/src/Params/EnvelopeParams.cpp
+++ b/src/Params/EnvelopeParams.cpp
@@ -31,6 +31,47 @@ namespace zyn {
     EnvelopeParams *env = (rObject*) d.obj
 #define rEnd }
 
+#define dT127(var) limit( (int)roundf(log2f(var*100.0f + 1.0f) * 127.0f/12.0f), 0, 127 )
+#define dTREAL(var) (powf(2.0f, var / 127.0f * 12.0f) - 1.0f) / 100.0f
+
+#define rParamDT(name, ...) \
+  {"P" STRINGIFY(name) "::i",  rProp(parameter) DOC(__VA_ARGS__), NULL, rParamDTCb(name)}
+
+#define rParamDTCb(name) rBOIL_BEGIN \
+        if(!strcmp("", args)) {\
+            data.reply(loc, "i", dT127(obj->name)); \
+        } else { \
+            unsigned char var = rtosc_argument(msg, 0).i; \
+            rLIMIT(var, atoi) \
+            rCAPPLY(obj->name, "f", obj->name = dTREAL(var)) \
+            data.broadcast(loc, "i", dT127(obj->name));\
+            rChangeCb \
+        } rBOIL_END
+
+#define rParamsDT(name, length, ...) \
+rArrayDT(name, length, __VA_ARGS__), \
+{"P" STRINGIFY(name) ":", rProp(alias) rDoc("get all data from aliased array"), NULL, rParamsDTCb(name, length)}
+
+#define rParamsDTCb(name, length) rBOIL_BEGIN \
+    char varS[length]; \
+    for (int i = 0; i < length; i++) {varS[i] = dT127(obj->name[i]);} \
+    data.reply(loc, "b", length, varS); rBOIL_END
+
+#define rArrayDT(name, length, ...) \
+{"P" STRINGIFY(name) "#" STRINGIFY(length) "::i", rProp(parameter) DOC(__VA_ARGS__), NULL, rArrayDTICb(name)}
+
+#define rArrayDTICb(name) rBOILS_BEGIN \
+        if(!strcmp("", args)) {\
+            data.reply(loc, "i", dT127(obj->name[idx])); \
+        } else { \
+            char varI = rtosc_argument(msg, 0).i; \
+            float var = dTREAL(varI); \
+            rLIMIT(var, atoi) \
+            rAPPLY(name[idx], f) \
+            data.broadcast(loc, "i", dT127(obj->name[idx]));\
+            rChangeCb \
+        } rBOILS_END
+
 static const rtosc::Ports localPorts = {
     rSelf(EnvelopeParams),
     rPaste,
@@ -59,7 +100,7 @@ static const rtosc::Ports localPorts = {
                               sub_freq, sub_bandwidth),
             rDefault(2),
             "Location of the sustain point"),
-    rParams(Penvdt,  MAX_ENVELOPE_POINTS, "Envelope Delay Times"),
+    rParamsDT(envdt,  MAX_ENVELOPE_POINTS, "Envelope Delay Times"),
     rParams(Penvval, MAX_ENVELOPE_POINTS, "Envelope Values"),
     rParamZyn(Penvstretch,  rShort("stretch"), rDefaultDepends(loc),
             rPresetAtMulti(0, ad_global_freq, ad_global_filter,
@@ -70,27 +111,29 @@ static const rtosc::Ports localPorts = {
             rPresetAtMulti(true, ad_global_amp, ad_global_filter, ad_voice_amp,
                                  ad_voice_fm_amp),
             rDefault(false),
-            "Force Envelope to fully evaluate"),
-    rToggle(Plinearenvelope, rShort("lin/log"), rDefault(false),
+            "Force Envelope to fully evaluate"),    rToggle(Plinearenvelope, rShort("lin/log"), rDefault(false),
             "Linear or Logarithmic Envelopes"),
-    rParamZyn(PA_dt,  rShort("a.dt"), rDefaultDepends(loc),
-              rPreset(ad_global_freq, 50),   rPreset(ad_global_filter, 40),
-              rPreset(ad_voice_freq, 40),    rPreset(ad_voice_filter, 70),
-              rPreset(ad_voice_fm_freq, 90), rPreset(ad_voice_fm_amp, 80),
-              rPreset(sub_freq, 50),         rPreset(sub_bandwidth, 70),
-              rDefault(0),
+    rParamDT(A_dt ,  rShort("a.dt"), rLinear(0,127), "Attack Time"),
+    rParamF(A_dt,  rShort("a.dt"), rLog(0.0f,41.0f), rDefaultDepends(loc),
+              rPreset(ad_global_freq, 0.254),   rPreset(ad_global_filter, 0.127),
+              rPreset(ad_voice_freq, 0.127),    rPreset(ad_voice_filter, 0.97),
+              rPreset(ad_voice_fm_freq, 3.62), rPreset(ad_voice_fm_amp, 1.876),
+              rPreset(sub_freq, 0.254),         rPreset(sub_bandwidth, 0.97),
+              rDefault(0.00),
               "Attack Time"),
+
     rParamZyn(PA_val, rShort("a.val"), rDefaultDepends(loc),
               rPreset(ad_voice_freq, 30),    rPreset(ad_voice_filter, 90),
               rPreset(ad_voice_fm_freq, 20),
               rPreset(sub_freq, 30),         rPreset(sub_bandwidth, 100),
               rDefault(64),
               "Attack Value"),
-    rParamZyn(PD_dt,  rShort("d.dt"),  rDefaultDepends(loc),
-              rPreset(ad_global_amp, 40),    rPreset(ad_global_filter, 70),
-              rPreset(ad_voice_amp, 100),    rPreset(ad_voice_filter, 70),
-              rPreset(ad_voice_fm_amp, 90),
-              rDefault(10),
+    rParamDT(D_dt, rShort("d.dt"), rLinear(0,127), "Decay Time"),
+    rParamF(D_dt,  rShort("d.dt"), rLog(0.0f,41.0f),  rDefaultDepends(loc),
+              rPreset(ad_global_amp, 0.127),    rPreset(ad_global_filter, 0.97),
+              rPreset(ad_voice_amp, 7),    rPreset(ad_voice_filter, 0.97),
+              rPreset(ad_voice_fm_amp, 3.62),
+              rDefault(0.00925031),
               "Decay Time"),
     rParamZyn(PD_val, rShort("d.val"), rDefaultDepends(loc),
               rDefault(64), rPreset(ad_voice_filter, 40),
@@ -99,11 +142,12 @@ static const rtosc::Ports localPorts = {
               rDefault(64),
               rPresetAtMulti(127, ad_global_amp, ad_voice_amp, ad_voice_fm_amp),
               "Sustain Value"),
-    rParamZyn(PR_dt,  rShort("r.dt"),  rDefaultDepends(loc),
-              rPreset(ad_global_amp, 25),
-              rPreset(ad_voice_amp, 100),    rPreset(ad_voice_filter, 10),
-              rPreset(ad_voice_fm_freq, 80), rPreset(ad_voice_fm_amp, 100),
-              rDefault(60),
+    rParamDT(R_dt, rShort("r.dt"), rLinear(0,127), "Release Time"),
+    rParamF(R_dt,  rShort("r.dt"), rLog(0.01f,41.0f),  rDefaultDepends(loc),
+              rPreset(ad_global_amp, 0.025),
+              rPreset(ad_voice_amp, 7),    rPreset(ad_voice_filter, 0.01),
+              rPreset(ad_voice_fm_freq, 1.876), rPreset(ad_voice_fm_amp, 7),
+              rDefault(0.498893),
               "Release Time"),
     rParamZyn(PR_val, rShort("r.val"), rDefaultDepends(loc),
               rPresetAtMulti(40, ad_voice_filter, ad_voice_fm_freq),
@@ -114,8 +158,27 @@ static const rtosc::Ports localPorts = {
         d.reply(d.loc, "i", env->Envmode);
         rEnd},
 
-    {"envdt", rDoc("Envelope Delay Times"), NULL,
+    {"envdt", rDoc("Envelope Delay Times (log)"), NULL,
         rBegin;
+        const int N = MAX_ENVELOPE_POINTS;
+        const int M = rtosc_narguments(msg);
+        if(M == 0) {
+            rtosc_arg_t args[N];
+            char arg_types[N+1] = {0};
+            for(int i=0; i<N; ++i) {
+                args[i].f    = env->getdt(i)*1000; //answer miliseconds to old gui
+                arg_types[i] = 'f';
+            }
+            d.replyArray(d.loc, arg_types, args);
+        } else {
+            for(int i=0; i<N && i<M; ++i) {
+                env->envdt[i] = (rtosc_argument(msg, i).f)/1000; //store as seconds in member variable
+            }
+        }
+        rEnd},
+    {"dt", rDoc("Envelope Delay Times (lin)"), NULL,
+        rBegin;
+        
         const int N = MAX_ENVELOPE_POINTS;
         const int M = rtosc_narguments(msg);
         if(M == 0) {
@@ -128,10 +191,10 @@ static const rtosc::Ports localPorts = {
             d.replyArray(d.loc, arg_types, args);
         } else {
             for(int i=0; i<N && i<M; ++i)
-                env->Penvdt[i] = env->inv_dt(rtosc_argument(msg, i).f);
+                env->envdt[i] = (rtosc_argument(msg, i).f);
         }
         rEnd},
-    {"envval", rDoc("Envelope Delay Times"), NULL,
+    {"envval", rDoc("Envelope Values"), NULL,
         rBegin;
         const int N = MAX_ENVELOPE_POINTS;
         const int M = rtosc_narguments(msg);
@@ -158,12 +221,12 @@ static const rtosc::Ports localPorts = {
             return;
 
         for (int i=env->Penvpoints; i>=curpoint+1; i--) {
-            env->Penvdt[i]=env->Penvdt[i-1];
+            env->envdt[i]=env->envdt[i-1];
             env->Penvval[i]=env->Penvval[i-1];
         }
 
         if (curpoint==0)
-            env->Penvdt[1]=64;
+            env->envdt[1]=dTREAL(64);
 
         env->Penvpoints++;
         if (curpoint<=env->Penvsustain)
@@ -176,7 +239,7 @@ static const rtosc::Ports localPorts = {
             return;
 
         for (int i=curpoint+1;i<env->Penvpoints;i++){
-            env->Penvdt[i-1]=env->Penvdt[i];
+            env->envdt[i-1]=env->envdt[i];
             env->Penvval[i-1]=env->Penvval[i];
         };
 
@@ -191,24 +254,25 @@ static const rtosc::Ports localPorts = {
 
 const rtosc::Ports &EnvelopeParams::ports = localPorts;
 
+
 EnvelopeParams::EnvelopeParams(unsigned char Penvstretch_,
                                unsigned char Pforcedrelease_,
                                const AbsTime *time_):
         time(time_), last_update_timestamp(0)
 {
-    PA_dt  = 10;
-    PD_dt  = 10;
-    PR_dt  = 10;
+    A_dt  = 0.01;
+    D_dt  = 0.01;
+    R_dt  = 0.01;
     PA_val = 64;
     PD_val = 64;
     PS_val = 64;
     PR_val = 64;
 
     for(int i = 0; i < MAX_ENVELOPE_POINTS; ++i) {
-        Penvdt[i]  = 32;
+        envdt[i]  = dTREAL(32);
         Penvval[i] = 64;
     }
-    Penvdt[0]       = 0; //no used
+    envdt[0]        = 0.0f; //no used
     Penvsustain     = 1;
     Penvpoints      = 1;
     Envmode         = 1;
@@ -231,16 +295,16 @@ void EnvelopeParams::paste(const EnvelopeParams &ep)
     COPY(Penvpoints);
     COPY(Penvsustain);
     for(int i=0; i<MAX_ENVELOPE_POINTS; ++i) {
-        this->Penvdt[i]  = ep.Penvdt[i];
+        this->envdt[i]  = ep.envdt[i];
         this->Penvval[i] = ep.Penvval[i];
     }
     COPY(Penvstretch);
     COPY(Pforcedrelease);
     COPY(Plinearenvelope);
 
-    COPY(PA_dt);
-    COPY(PD_dt);
-    COPY(PR_dt);
+    COPY(A_dt);
+    COPY(D_dt);
+    COPY(R_dt);
     COPY(PA_val);
     COPY(PD_val);
     COPY(PS_val);
@@ -256,111 +320,99 @@ void EnvelopeParams::init(zyn::consumer_location_t _loc)
 {
     switch(loc = _loc)
     {
-        case ad_global_amp:    ADSRinit_dB(0, 40, 127, 25); break;
-        case ad_global_freq:   ASRinit(64, 50, 64, 60); break;
+        case ad_global_amp:    ADSRinit_dB(0, 0.01, 127, 0.025); break;
+        case ad_global_freq:   ASRinit(64, 0.025, 64, 0.5); break;
         case ad_global_filter:
-        case sub_filter:       ADSRinit_filter(64, 40, 64, 70, 60, 64); break;
-        case ad_voice_amp:     ADSRinit_dB(0, 100, 127, 100); break;
-        case ad_voice_freq:    ASRinit(30, 40, 64, 60); break;
-        case ad_voice_filter:  ADSRinit_filter(90, 70, 40, 70, 10, 40); break;
-        case ad_voice_fm_freq: ASRinit(20, 90, 40, 80); break;
+        case sub_filter:       ADSRinit_filter(64, 0.01, 64, 0.025, 0.05, 64); break;
+        case ad_voice_amp:     ADSRinit_dB(0, 7.0, 127, 7.0); break;
+        case ad_voice_freq:    ASRinit(30, 0.01, 64, 0.5); break;
+        case ad_voice_filter:  ADSRinit_filter(90, 0.025, 40, 0.025, 0.009, 40); break;
+        case ad_voice_fm_freq: ASRinit(20, 3.62, 40, 1.876); break;
         case ad_voice_fm_amp:  ADSRinit(80, 90, 127, 100); break;
-        case sub_freq:         ASRinit(30, 50, 64, 60); break;
-        case sub_bandwidth:    ASRinit_bw(100, 70, 64, 60); break;
+        case sub_freq:         ASRinit(0.01, 0.025, 64, 0.5); break;
+        case sub_bandwidth:    ASRinit_bw(100, 0.97, 64, 0.5); break;
         default: throw std::logic_error("Invalid envelope consumer location");
     };
 }
 
 float EnvelopeParams::getdt(char i) const
 {
-    return EnvelopeParams::dt(Penvdt[(int)i]);
-}
-
-float EnvelopeParams::dt(char val)
-{
-    return (powf(2.0f, val / 127.0f * 12.0f) - 1.0f) * 10.0f; //miliseconds
-}
-
-char EnvelopeParams::inv_dt(float val)
-{
-    int ival = roundf(logf(val/10.0f + 1.0f)/logf(2.0f) * 127.0f/12.0f);
-    return limit(ival, 0, 127);
+    return envdt[(int)i]; //seconds
 }
 
-
 /*
  * ADSR/ASR... initialisations
  */
-void EnvelopeParams::ADSRinit(char A_dt, char D_dt, char S_val, char R_dt)
+void EnvelopeParams::ADSRinit(float a_dt, float d_dt, char s_val, float r_dt)
 {
     setpresettype("Penvamplitude");
     Envmode   = 1;
-    PA_dt     = A_dt;
-    PD_dt     = D_dt;
-    PS_val    = S_val;
-    PR_dt     = R_dt;
+    A_dt      = a_dt;
+    D_dt      = d_dt;
+    PS_val    = s_val;
+    R_dt      = r_dt;
     Pfreemode = 0;
     converttofree();
 
     store2defaults();
 }
 
-void EnvelopeParams::ADSRinit_dB(char A_dt, char D_dt, char S_val, char R_dt)
+void EnvelopeParams::ADSRinit_dB(float a_dt, float d_dt, char s_val, float r_dt)
 {
     setpresettype("Penvamplitude");
     Envmode   = 2;
-    PA_dt     = A_dt;
-    PD_dt     = D_dt;
-    PS_val    = S_val;
-    PR_dt     = R_dt;
+    A_dt      = a_dt;
+    D_dt      = d_dt;
+    PS_val    = s_val;
+    R_dt      = r_dt;
     Pfreemode = 0;
     converttofree();
 
     store2defaults();
 }
 
-void EnvelopeParams::ASRinit(char A_val, char A_dt, char R_val, char R_dt)
+void EnvelopeParams::ASRinit(char a_val, float a_dt, char r_val, float r_dt)
 {
     setpresettype("Penvfrequency");
     Envmode   = 3;
-    PA_val    = A_val;
-    PA_dt     = A_dt;
-    PR_val    = R_val;
-    PR_dt     = R_dt;
+    PA_val    = a_val;
+    A_dt      = a_dt;
+    PR_val    = r_val;
+    R_dt      = r_dt;
     Pfreemode = 0;
     converttofree();
 
     store2defaults();
 }
 
-void EnvelopeParams::ADSRinit_filter(char A_val,
-                                     char A_dt,
-                                     char D_val,
-                                     char D_dt,
-                                     char R_dt,
-                                     char R_val)
+void EnvelopeParams::ADSRinit_filter(char a_val,
+                                     float a_dt,
+                                     char d_val,
+                                     float d_dt,
+                                     float r_dt,
+                                     char r_val)
 {
     setpresettype("Penvfilter");
     Envmode   = 4;
-    PA_val    = A_val;
-    PA_dt     = A_dt;
-    PD_val    = D_val;
-    PD_dt     = D_dt;
-    PR_dt     = R_dt;
-    PR_val    = R_val;
+    PA_val    = a_val;
+    A_dt      = a_dt;
+    PD_val    = d_val;
+    D_dt      = d_dt;
+    R_dt      = r_dt;
+    PR_val    = r_val;
     Pfreemode = 0;
     converttofree();
     store2defaults();
 }
 
-void EnvelopeParams::ASRinit_bw(char A_val, char A_dt, char R_val, char R_dt)
+void EnvelopeParams::ASRinit_bw(char a_val, float a_dt, char r_val, float r_dt)
 {
     setpresettype("Penvbandwidth");
     Envmode   = 5;
-    PA_val    = A_val;
-    PA_dt     = A_dt;
-    PR_val    = R_val;
-    PR_dt     = R_dt;
+    PA_val    = a_val;
+    A_dt      = a_dt;
+    PR_val    = r_val;
+    R_dt      = r_dt;
     Pfreemode = 0;
     converttofree();
     store2defaults();
@@ -377,11 +429,11 @@ void EnvelopeParams::converttofree()
             Penvpoints  = 4;
             Penvsustain = 2;
             Penvval[0]  = 0;
-            Penvdt[1]   = PA_dt;
+            envdt[1]   = A_dt;
             Penvval[1]  = 127;
-            Penvdt[2]   = PD_dt;
+            envdt[2]   = D_dt;
             Penvval[2]  = PS_val;
-            Penvdt[3]   = PR_dt;
+            envdt[3]   = R_dt;
             Penvval[3]  = 0;
             break;
         case 3:
@@ -389,20 +441,20 @@ void EnvelopeParams::converttofree()
             Penvpoints  = 3;
             Penvsustain = 1;
             Penvval[0]  = PA_val;
-            Penvdt[1]   = PA_dt;
+            envdt[1]   = A_dt;
             Penvval[1]  = 64;
-            Penvdt[2]   = PR_dt;
+            envdt[2]   = R_dt;
             Penvval[2]  = PR_val;
             break;
         case 4:
             Penvpoints  = 4;
             Penvsustain = 2;
             Penvval[0]  = PA_val;
-            Penvdt[1]   = PA_dt;
+            envdt[1]   = A_dt;
             Penvval[1]  = PD_val;
-            Penvdt[2]   = PD_dt;
+            envdt[2]   = D_dt;
             Penvval[2]  = 64;
-            Penvdt[3]   = PR_dt;
+            envdt[3]   = R_dt;
             Penvval[3]  = PR_val;
             break;
     }
@@ -419,9 +471,9 @@ void EnvelopeParams::add2XML(XMLwrapper& xml)
     xml.addpar("env_stretch", Penvstretch);
     xml.addparbool("forced_release", Pforcedrelease);
     xml.addparbool("linear_envelope", Plinearenvelope);
-    xml.addpar("A_dt", PA_dt);
-    xml.addpar("D_dt", PD_dt);
-    xml.addpar("R_dt", PR_dt);
+    xml.addparreal("A_dt", A_dt);
+    xml.addparreal("D_dt", D_dt);
+    xml.addparreal("R_dt", R_dt);
     xml.addpar("A_val", PA_val);
     xml.addpar("D_val", PD_val);
     xml.addpar("S_val", PS_val);
@@ -431,7 +483,7 @@ void EnvelopeParams::add2XML(XMLwrapper& xml)
         for(int i = 0; i < Penvpoints; ++i) {
             xml.beginbranch("POINT", i);
             if(i != 0)
-                xml.addpar("dt", Penvdt[i]);
+                xml.addpar("dt", envdt[i]);
             xml.addpar("val", Penvval[i]);
             xml.endbranch();
         }
@@ -485,9 +537,16 @@ void EnvelopeParams::getfromXML(XMLwrapper& xml)
 
     version_fixer_t version_fix(xml.fileversion(), Envmode);
 
-    PA_dt  = xml.getpar127("A_dt", PA_dt);
-    PD_dt  = xml.getpar127("D_dt", PD_dt);
-    PR_dt  = xml.getpar127("R_dt", PR_dt);
+    if(!xml.hasparreal("A_dt")) {
+        A_dt = dTREAL(xml.getpar127("A_dt", 0));
+        D_dt = dTREAL(xml.getpar127("D_dt", 0));
+        R_dt = dTREAL(xml.getpar127("R_dt", 0));
+    } else {
+        A_dt  = xml.getparreal("A_dt", A_dt);
+        D_dt  = xml.getparreal("D_dt", D_dt);
+        R_dt  = xml.getparreal("R_dt", R_dt);
+    }
+
     PA_val = version_fix(xml.getpar127("A_val", PA_val));
     PD_val = version_fix(xml.getpar127("D_val", PD_val));
     PS_val = version_fix(xml.getpar127("S_val", PS_val));
@@ -496,8 +555,15 @@ void EnvelopeParams::getfromXML(XMLwrapper& xml)
     for(int i = 0; i < Penvpoints; ++i) {
         if(xml.enterbranch("POINT", i) == 0)
             continue;
-        if(i != 0)
-            Penvdt[i] = xml.getpar127("dt", Penvdt[i]);
+        if(i != 0) {
+            if(!xml.hasparreal("A_dt")) {
+                int dt = xml.getpar127("dt", dT127(envdt[i]));
+                envdt[i] = dTREAL(dt);
+            }
+            else {
+                envdt[i] = xml.getparreal("dt", envdt[i]);
+            }
+        }
         Penvval[i] = version_fix(xml.getpar127("val", Penvval[i]));
         xml.exitbranch();
     }
@@ -512,9 +578,9 @@ void EnvelopeParams::defaults()
     Penvstretch     = Denvstretch;
     Pforcedrelease  = Dforcedrelease;
     Plinearenvelope = Dlinearenvelope;
-    PA_dt     = DA_dt;
-    PD_dt     = DD_dt;
-    PR_dt     = DR_dt;
+    A_dt     = DA_dt;
+    D_dt     = DD_dt;
+    R_dt     = DR_dt;
     PA_val    = DA_val;
     PD_val    = DD_val;
     PS_val    = DS_val;
@@ -528,9 +594,9 @@ void EnvelopeParams::store2defaults()
     Denvstretch     = Penvstretch;
     Dforcedrelease  = Pforcedrelease;
     Dlinearenvelope = Plinearenvelope;
-    DA_dt  = PA_dt;
-    DD_dt  = PD_dt;
-    DR_dt  = PR_dt;
+    DA_dt  = A_dt;
+    DD_dt  = D_dt;
+    DR_dt  = R_dt;
     DA_val = PA_val;
     DD_val = PD_val;
     DS_val = PS_val;
diff --git a/src/Params/EnvelopeParams.h b/src/Params/EnvelopeParams.h
index eeb8350a..7033b043 100644
--- a/src/Params/EnvelopeParams.h
+++ b/src/Params/EnvelopeParams.h
@@ -37,8 +37,7 @@ class EnvelopeParams:public Presets
         void getfromXML(XMLwrapper& xml);
 
         float getdt(char i) const;
-        static float dt(char val);
-        static char inv_dt(float val);
+
 
         int loc; //!< consumer location
 
@@ -46,14 +45,14 @@ class EnvelopeParams:public Presets
         unsigned char Pfreemode; //1 for free mode, 0 otherwise
         unsigned char Penvpoints;
         unsigned char Penvsustain; //127 for disabled
-        unsigned char Penvdt[MAX_ENVELOPE_POINTS];
+        float         envdt[MAX_ENVELOPE_POINTS];
         unsigned char Penvval[MAX_ENVELOPE_POINTS];
         unsigned char Penvstretch; //64=normal stretch (piano-like), 0=no stretch
         unsigned char Pforcedrelease; //0 - OFF, 1 - ON
         unsigned char Plinearenvelope; //if the amplitude envelope is linear
 
-        unsigned char PA_dt, PD_dt, PR_dt,
-                      PA_val, PD_val, PS_val, PR_val;
+        float A_dt, D_dt, R_dt;
+        unsigned char PA_val, PD_val, PS_val, PR_val;
 
 
 
@@ -72,16 +71,17 @@ class EnvelopeParams:public Presets
         static float env_dB2rap(float db);
 
     private:
-        void ADSRinit(char A_dt, char D_dt, char S_val, char R_dt);
-        void ADSRinit_dB(char A_dt, char D_dt, char S_val, char R_dt);
-        void ASRinit(char A_val, char A_dt, char R_val, char R_dt);
+
+        void ADSRinit(float A_dt, float D_dt, char S_val, float R_dt);
+        void ADSRinit_dB(float A_dt, float D_dt, char S_val, float R_dt);
+        void ASRinit(char A_val, float A_dt, char R_val, float R_dt);
         void ADSRinit_filter(char A_val,
-                             char A_dt,
+                             float A_dt,
                              char D_val,
-                             char D_dt,
-                             char R_dt,
+                             float D_dt,
+                             float R_dt,
                              char R_val);
-        void ASRinit_bw(char A_val, char A_dt, char R_val, char R_dt);
+        void ASRinit_bw(char A_val, float A_dt, char R_val, float R_dt);
 
         void store2defaults();
 
@@ -89,8 +89,8 @@ class EnvelopeParams:public Presets
         unsigned char Denvstretch;
         unsigned char Dforcedrelease;
         unsigned char Dlinearenvelope;
-        unsigned char DA_dt, DD_dt, DR_dt,
-                      DA_val, DD_val, DS_val, DR_val;
+        float DA_dt, DD_dt, DR_dt;
+        unsigned char DA_val, DD_val, DS_val, DR_val;
 };
 
 }
diff --git a/src/Synth/Envelope.cpp b/src/Synth/Envelope.cpp
index 74b678e4..4743a623 100644
--- a/src/Synth/Envelope.cpp
+++ b/src/Synth/Envelope.cpp
@@ -41,7 +41,7 @@ Envelope::Envelope(EnvelopeParams &pars, float basefreq, float bufferdt,
         mode = 1;                              //change to linear
 
     for(int i = 0; i < MAX_ENVELOPE_POINTS; ++i) {
-        const float tmp = pars.getdt(i) / 1000.0f * envstretch;
+        const float tmp = pars.getdt(i) * envstretch;
         if(tmp > bufferdt)
             envdt[i] = bufferdt / tmp;
         else
@@ -160,9 +160,10 @@ float Envelope::envout(bool doWatch)
             out = envval[tmp];
         else
             out = envoutval + (envval[tmp] - envoutval) * t;
+
         t += envdt[tmp] * envstretch;
 
-        if(t >= 1.0f) {
+        if(t >= 1.0f) { // move to the next segment
             currentpoint = envsustain + 2;
             forcedrelease = 0;
             t    = 0.0f;
@@ -184,6 +185,7 @@ float Envelope::envout(bool doWatch)
               + (envval[currentpoint] - envval[currentpoint - 1]) * t;
 
     t += inct;
+
     if(t >= 1.0f) {
         if(currentpoint >= envpoints - 1)
             envfinish = true;
@@ -210,12 +212,13 @@ float Envelope::envout_dB()
     if(linearenvelope)
         return envout(true);
 
-    if((currentpoint == 1) && (!keyreleased || !forcedrelease)) { //first point is always lineary interpolated
+    if((currentpoint == 1) && (!keyreleased || !forcedrelease)) { //first point is always lineary interpolated <- seems to have odd effects
         float v1 = EnvelopeParams::env_dB2rap(envval[0]);
         float v2 = EnvelopeParams::env_dB2rap(envval[1]);
         out = v1 + (v2 - v1) * t;
 
         t += inct;
+
         if(t >= 1.0f) {
             t    = 0.0f;
             inct = envdt[2];
diff --git a/src/Synth/Envelope.h b/src/Synth/Envelope.h
index 78cdd15d..9512aec4 100644
--- a/src/Synth/Envelope.h
+++ b/src/Synth/Envelope.h
@@ -41,7 +41,7 @@ class Envelope
     private:
         int   envpoints;
         int   envsustain;    //"-1" means disabled
-        float envdt[MAX_ENVELOPE_POINTS]; //millisecons
+        float envdt[MAX_ENVELOPE_POINTS]; //seconds
         float envval[MAX_ENVELOPE_POINTS]; // [0.0f .. 1.0f]
         float envstretch;
         int   linearenvelope;
diff --git a/src/Tests/guitar-adnote.xmz b/src/Tests/guitar-adnote.xmz
index 7386ed2a..5abe1898 100644
--- a/src/Tests/guitar-adnote.xmz
+++ b/src/Tests/guitar-adnote.xmz
@@ -82,9 +82,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="69" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="0" />
-<par name="D_dt" value="93" />
-<par name="R_dt" value="47" />
+<par_real name="A_dt" value="0" exact_value="0x00000000" />
+<par_real name="D_dt" value="4.40846" exact_value="0x408D1224" />
+<par_real name="R_dt" value="0.207199" exact_value="0x3E542BF1" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="0" />
@@ -114,9 +114,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="7" />
-<par name="D_dt" value="10" />
-<par name="R_dt" value="48" />
+<par_real name="A_dt" value="0.00581636" exact_value="0x3BBE9724" />
+<par_real name="D_dt" value="0.00925031" exact_value="0x3C178EA0" />
+<par_real name="R_dt" value="0.2219" exact_value="0x3E6339D6" />
 <par name="A_val" value="65" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -153,9 +153,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="40" />
-<par name="D_dt" value="70" />
-<par name="R_dt" value="60" />
+<par_real name="A_dt" value="0.127326" exact_value="0x3E02619E" />
+<par_real name="D_dt" value="0.969635" exact_value="0x3F783A06" />
+<par_real name="R_dt" value="0.498893" exact_value="0x3EFF6EF3" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -248,9 +248,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="64" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="22" />
-<par name="D_dt" value="83" />
-<par name="R_dt" value="100" />
+<par_real name="A_dt" value="0.0322438" exact_value="0x3D041217" />
+<par_real name="D_dt" value="2.28527" exact_value="0x401241DB" />
+<par_real name="R_dt" value="6.9784" exact_value="0x40DF4F0C" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="127" />
@@ -285,9 +285,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="8" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="57" />
-<par name="D_dt" value="10" />
-<par name="R_dt" value="81" />
+<par_real name="A_dt" value="0.408115" exact_value="0x3ED0F466" />
+<par_real name="D_dt" value="0.00925031" exact_value="0x3C178EA0" />
+<par_real name="R_dt" value="2.00347" exact_value="0x400038ED" />
 <par name="A_val" value="39" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -326,9 +326,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="80" />
-<par name="D_dt" value="88" />
-<par name="R_dt" value="10" />
+<par_real name="A_dt" value="1.87583" exact_value="0x3FF01B2D" />
+<par_real name="D_dt" value="3.17458" exact_value="0x404B2C5C" />
+<par_real name="R_dt" value="0.00925031" exact_value="0x3C178EA0" />
 <par name="A_val" value="65" />
 <par name="D_val" value="21" />
 <par name="S_val" value="64" />
@@ -360,9 +360,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="46" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="66" />
-<par name="D_dt" value="76" />
-<par name="R_dt" value="86" />
+<par_real name="A_dt" value="0.743858" exact_value="0x3F3E6D76" />
+<par_real name="D_dt" value="1.4412" exact_value="0x3FB87940" />
+<par_real name="R_dt" value="2.78361" exact_value="0x40322696" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="111" />
@@ -381,9 +381,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="102" />
-<par name="D_dt" value="10" />
-<par name="R_dt" value="68" />
+<par_real name="A_dt" value="7.95646" exact_value="0x40FE9B4D" />
+<par_real name="D_dt" value="0.00925031" exact_value="0x3C178EA0" />
+<par_real name="R_dt" value="0.849364" exact_value="0x3F596FE4" />
 <par name="A_val" value="33" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -676,9 +676,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="64" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="4" />
-<par name="D_dt" value="20" />
-<par name="R_dt" value="100" />
+<par_real name="A_dt" value="0.00299497" exact_value="0x3B44472E" />
+<par_real name="D_dt" value="0.0270575" exact_value="0x3CDDA798" />
+<par_real name="R_dt" value="6.9784" exact_value="0x40DF4F0C" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="1" />
@@ -1002,9 +1002,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="64" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="0" />
-<par name="D_dt" value="40" />
-<par name="R_dt" value="25" />
+<par_real name="A_dt" value="0" exact_value="0x00000000" />
+<par_real name="D_dt" value="0.127326" exact_value="0x3E02619E" />
+<par_real name="R_dt" value="0.0414155" exact_value="0x3D29A358" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="127" />
@@ -1033,9 +1033,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="64" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="18" />
-<par name="D_dt" value="10" />
-<par name="R_dt" value="60" />
+<par_real name="A_dt" value="0.0225078" exact_value="0x3CB8625B" />
+<par_real name="D_dt" value="0.00925031" exact_value="0x3C178EA0" />
+<par_real name="R_dt" value="0.498893" exact_value="0x3EFF6EF3" />
 <par name="A_val" value="86" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -1049,9 +1049,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="64" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="70" />
-<par name="D_dt" value="10" />
-<par name="R_dt" value="60" />
+<par_real name="A_dt" value="0.969635" exact_value="0x3F783A06" />
+<par_real name="D_dt" value="0.00925031" exact_value="0x3C178EA0" />
+<par_real name="R_dt" value="0.498893" exact_value="0x3EFF6EF3" />
 <par name="A_val" value="100" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -1078,9 +1078,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="40" />
-<par name="D_dt" value="70" />
-<par name="R_dt" value="60" />
+<par_real name="A_dt" value="0.127326" exact_value="0x3E02619E" />
+<par_real name="D_dt" value="0.969635" exact_value="0x3F783A06" />
+<par_real name="R_dt" value="0.498893" exact_value="0x3EFF6EF3" />
 <par name="A_val" value="98" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -3353,9 +3353,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="64" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="0" />
-<par name="D_dt" value="40" />
-<par name="R_dt" value="25" />
+<par_real name="A_dt" value="0" exact_value="0x00000000" />
+<par_real name="D_dt" value="0.127326" exact_value="0x3E02619E" />
+<par_real name="R_dt" value="0.0414155" exact_value="0x3D29A358" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="127" />
@@ -3388,9 +3388,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="no" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="50" />
-<par name="D_dt" value="10" />
-<par name="R_dt" value="60" />
+<par_real name="A_dt" value="0.254356" exact_value="0x3E823AED" />
+<par_real name="D_dt" value="0.00925031" exact_value="0x3C178EA0" />
+<par_real name="R_dt" value="0.498893" exact_value="0x3EFF6EF3" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
@@ -3427,9 +3427,9 @@ version-revision="5" ZynAddSubFX-author="Nasca Octavian Paul">
 <par name="env_stretch" value="0" />
 <par_bool name="forced_release" value="yes" />
 <par_bool name="linear_envelope" value="no" />
-<par name="A_dt" value="40" />
-<par name="D_dt" value="70" />
-<par name="R_dt" value="60" />
+<par_real name="A_dt" value="0.127326" exact_value="0x3E02619E" />
+<par_real name="D_dt" value="0.969635" exact_value="0x3F783A06" />
+<par_real name="R_dt" value="0.498893" exact_value="0x3EFF6EF3" />
 <par name="A_val" value="64" />
 <par name="D_val" value="64" />
 <par name="S_val" value="64" />
-- 
2.47.0

