From 68f546f26f38c72f07531b8dbec134fb7d9fd319 Mon Sep 17 00:00:00 2001
From: Johannes Lorenz <johannes89@ist-einmalig.de>
Date: Sat, 28 Mar 2015 16:31:04 +0100
Subject: [PATCH 0401/1936] Fixed all typos with 'Poliphony' and 'Relase'.

---
 src/Misc/Part.cpp       | 98 ++++++++++++++++++++---------------------
 src/Misc/Part.h         | 12 ++---
 src/Synth/ADnote.cpp    | 20 ++++-----
 src/Synth/ADnote.h      |  2 +-
 src/Synth/Envelope.cpp  | 14 +++---
 src/Synth/Envelope.h    |  4 +-
 src/Synth/PADnote.cpp   |  8 ++--
 src/Synth/PADnote.h     |  2 +-
 src/Synth/SUBnote.cpp   | 12 ++---
 src/Synth/SUBnote.h     |  2 +-
 src/Synth/SynthNote.h   |  2 +-
 src/Tests/AdNoteTest.h  |  2 +-
 src/Tests/PadNoteTest.h |  2 +-
 src/Tests/SubNoteTest.h |  2 +-
 src/UI/ADnoteUI.fl      | 16 +++----
 src/UI/EnvelopeUI.fl    |  6 +--
 src/UI/MasterUI.fl      | 10 ++---
 src/UI/PartUI.fl        |  2 +-
 src/UI/VirKeyboard.fl   | 32 +++++++-------
 src/globals.h           |  4 +-
 20 files changed, 126 insertions(+), 126 deletions(-)

diff --git a/src/Misc/Part.cpp b/src/Misc/Part.cpp
index f26a1ea2..aa2199a3 100644
--- a/src/Misc/Part.cpp
+++ b/src/Misc/Part.cpp
@@ -200,7 +200,7 @@ Part::Part(Allocator &alloc, Microtonal *microtonal_, FFTwrapper *fft_)
     oldfreq      = -1.0f;
 
 
-    for(int i = 0; i < POLIPHONY; ++i) {
+    for(int i = 0; i < POLYPHONY; ++i) {
         partnote[i].status = KEY_OFF;
         partnote[i].note   = -1;
         partnote[i].itemsplaying = 0;
@@ -307,7 +307,7 @@ void Part::defaultsinstrument()
  */
 void Part::cleanup(bool final_)
 {
-    for(int k = 0; k < POLIPHONY; ++k)
+    for(int k = 0; k < POLYPHONY; ++k)
         KillNotePos(k);
     for(int i = 0; i < synth->buffersize; ++i) {
         partoutl[i] = final_ ? 0.0f : denormalkillbuf[i];
@@ -352,7 +352,7 @@ void Part::NoteOn(unsigned char note,
                   int masterkeyshift)
 {
     // Legato and MonoMem used vars:
-    int  posb = POLIPHONY - 1; // Just a dummy initial value.
+    int  posb = POLYPHONY - 1; // Just a dummy initial value.
     bool legatomodevalid = false; //true when legato mode is determined applicable.
     bool doinglegato     = false; // true when we determined we do a legato note.
     bool ismonofirstnote = false; /*(In Mono/Legato) true when we determined
@@ -368,7 +368,7 @@ void Part::NoteOn(unsigned char note,
         monomem[note].velocity  = velocity; // Store this note's velocity.
         monomem[note].mkeyshift = masterkeyshift; /* Store masterkeyshift too*/
         if((partnote[lastpos].status != KEY_PLAYING)
-           && (partnote[lastpos].status != KEY_RELASED_AND_SUSTAINED))
+           && (partnote[lastpos].status != KEY_RELEASED_AND_SUSTAINED))
             ismonofirstnote = true;  // No other keys are held or sustained.
     } else if(!monomemEmpty())
         monomemClear();
@@ -376,7 +376,7 @@ void Part::NoteOn(unsigned char note,
     lastnote = note;
 
     int pos = -1;
-    for(int i = 0; i < POLIPHONY; ++i)
+    for(int i = 0; i < POLYPHONY; ++i)
         if(partnote[i].status == KEY_OFF) {
             pos = i;
             break;
@@ -401,14 +401,14 @@ void Part::NoteOn(unsigned char note,
             }
             else {
                 // Legato mode is valid, but this is only a first note.
-                for(int i = 0; i < POLIPHONY; ++i)
+                for(int i = 0; i < POLYPHONY; ++i)
                     if((partnote[i].status == KEY_PLAYING)
-                       || (partnote[i].status == KEY_RELASED_AND_SUSTAINED))
-                        RelaseNotePos(i);
+                       || (partnote[i].status == KEY_RELEASED_AND_SUSTAINED))
+                        ReleaseNotePos(i);
 
                 // Set posb
-                posb = (pos + 1) % POLIPHONY; //We really want it (if the following fails)
-                for(int i = 0; i < POLIPHONY; ++i)
+                posb = (pos + 1) % POLYPHONY; //We really want it (if the following fails)
+                for(int i = 0; i < POLYPHONY; ++i)
                     if((partnote[i].status == KEY_OFF) && (pos != i)) {
                         posb = i;
                         break;
@@ -419,17 +419,17 @@ void Part::NoteOn(unsigned char note,
     }
     else     // Legato mode is either off or non-applicable.
     if(!Ppolymode) {   //if the mode is 'mono' turn off all other notes
-        for(int i = 0; i < POLIPHONY; ++i)
+        for(int i = 0; i < POLYPHONY; ++i)
             if(partnote[i].status == KEY_PLAYING)
-                RelaseNotePos(i);
-        RelaseSustainedKeys();
+                ReleaseNotePos(i);
+        ReleaseSustainedKeys();
     }
     lastlegatomodevalid = legatomodevalid;
 
     if(pos == -1)
         fprintf(stderr,
                 "%s",
-                "NOTES TOO MANY (> POLIPHONY) - (Part.cpp::NoteOn(..))\n");
+                "NOTES TOO MANY (> POLYPHONY) - (Part.cpp::NoteOn(..))\n");
     else {
         //start the note
         partnote[pos].status = KEY_PLAYING;
@@ -639,29 +639,29 @@ void Part::NoteOn(unsigned char note,
             }
     }
 
-    //this only relase the keys if there is maximum number of keys allowed
+    //this only release the keys if there is maximum number of keys allowed
     setkeylimit(Pkeylimit);
 }
 
 /*
  * Note Off Messages
  */
-void Part::NoteOff(unsigned char note) //relase the key
+void Part::NoteOff(unsigned char note) //release the key
 {
     // This note is released, so we remove it from the list.
     if(!monomemEmpty())
         monomemPop(note);
 
-    for(int i = POLIPHONY - 1; i >= 0; i--) //first note in, is first out if there are same note multiple times
+    for(int i = POLYPHONY - 1; i >= 0; i--) //first note in, is first out if there are same note multiple times
         if((partnote[i].status == KEY_PLAYING) && (partnote[i].note == note)) {
             if(!ctl.sustain.sustain) { //the sustain pedal is not pushed
                 if(!Ppolymode && !monomemEmpty())
                     MonoMemRenote();//Play most recent still active note
                 else
-                    RelaseNotePos(i);
+                    ReleaseNotePos(i);
             }
             else    //the sustain pedal is pushed
-                partnote[i].status = KEY_RELASED_AND_SUSTAINED;
+                partnote[i].status = KEY_RELEASED_AND_SUSTAINED;
         }
 }
 
@@ -679,7 +679,7 @@ void Part::PolyphonicAftertouch(unsigned char note,
         monomem[note].velocity = velocity;       // Store this note's velocity.
 
 
-    for(int i = 0; i < POLIPHONY; ++i)
+    for(int i = 0; i < POLYPHONY; ++i)
         if((partnote[i].note == note) && (partnote[i].status == KEY_PLAYING)) {
             /* update velocity */
             // compute the velocity offset
@@ -755,14 +755,14 @@ void Part::SetController(unsigned int type, int par)
         case C_sustain:
             ctl.setsustain(par);
             if(ctl.sustain.sustain == 0)
-                RelaseSustainedKeys();
+                ReleaseSustainedKeys();
             break;
         case C_allsoundsoff:
             AllNotesOff(); //Panic
             break;
         case C_resetallcontrollers:
             ctl.resetall();
-            RelaseSustainedKeys();
+            ReleaseSustainedKeys();
             if(ctl.volume.receive != 0)
                 volume = ctl.volume.volume;
             else
@@ -782,7 +782,7 @@ void Part::SetController(unsigned int type, int par)
             //more update to add here if I add controllers
             break;
         case C_allnotesoff:
-            RelaseAllKeys();
+            ReleaseAllKeys();
             break;
         case C_resonance_center:
             ctl.setresonancecenter(par);
@@ -802,31 +802,31 @@ void Part::SetController(unsigned int type, int par)
     }
 }
 /*
- * Relase the sustained keys
+ * Release the sustained keys
  */
 
-void Part::RelaseSustainedKeys()
+void Part::ReleaseSustainedKeys()
 {
     // Let's call MonoMemRenote() on some conditions:
     if(Ppolymode == 0 && !monomemEmpty())
         if(monomemBack() != lastnote) // Sustain controller manipulation would cause repeated same note respawn without this check.
             MonoMemRenote();  // To play most recent still held note.
 
-    for(int i = 0; i < POLIPHONY; ++i)
-        if(partnote[i].status == KEY_RELASED_AND_SUSTAINED)
-            RelaseNotePos(i);
+    for(int i = 0; i < POLYPHONY; ++i)
+        if(partnote[i].status == KEY_RELEASED_AND_SUSTAINED)
+            ReleaseNotePos(i);
 }
 
 /*
- * Relase all keys
+ * Release all keys
  */
 
-void Part::RelaseAllKeys()
+void Part::ReleaseAllKeys()
 {
-    for(int i = 0; i < POLIPHONY; ++i)
-        if((partnote[i].status != KEY_RELASED)
+    for(int i = 0; i < POLYPHONY; ++i)
+        if((partnote[i].status != KEY_RELEASED)
            && (partnote[i].status != KEY_OFF)) //thanks to Frank Neumann
-            RelaseNotePos(i);
+            ReleaseNotePos(i);
 }
 
 // Call NoteOn(...) with the most recent still held key as new note
@@ -836,7 +836,7 @@ void Part::MonoMemRenote()
     unsigned char mmrtempnote = monomemBack(); // Last list element.
     monomemPop(mmrtempnote); // We remove it, will be added again in NoteOn(...).
     if(Pnoteon == 0)
-        RelaseNotePos(lastpos);
+        ReleaseNotePos(lastpos);
     else
         NoteOn(mmrtempnote, monomem[mmrtempnote].velocity,
                monomem[mmrtempnote].mkeyshift);
@@ -845,19 +845,19 @@ void Part::MonoMemRenote()
 /*
  * Release note at position
  */
-void Part::RelaseNotePos(int pos)
+void Part::ReleaseNotePos(int pos)
 {
     for(int j = 0; j < NUM_KIT_ITEMS; ++j) {
         if(partnote[pos].kititem[j].adnote)
-            partnote[pos].kititem[j].adnote->relasekey();
+            partnote[pos].kititem[j].adnote->releasekey();
 
         if(partnote[pos].kititem[j].subnote)
-            partnote[pos].kititem[j].subnote->relasekey();
+            partnote[pos].kititem[j].subnote->releasekey();
 
         if(partnote[pos].kititem[j].padnote)
-            partnote[pos].kititem[j].padnote->relasekey();
+            partnote[pos].kititem[j].padnote->releasekey();
     }
-    partnote[pos].status = KEY_RELASED;
+    partnote[pos].status = KEY_RELEASED;
 }
 
 
@@ -891,26 +891,26 @@ void Part::setkeylimit(unsigned char Pkeylimit)
     this->Pkeylimit = Pkeylimit;
     int keylimit = Pkeylimit;
     if(keylimit == 0)
-        keylimit = POLIPHONY - 5;
+        keylimit = POLYPHONY - 5;
 
     //release old keys if the number of notes>keylimit
     if(Ppolymode != 0) {
         int notecount = 0;
-        for(int i = 0; i < POLIPHONY; ++i)
-            if((partnote[i].status == KEY_PLAYING) || (partnote[i].status == KEY_RELASED_AND_SUSTAINED))
+        for(int i = 0; i < POLYPHONY; ++i)
+            if((partnote[i].status == KEY_PLAYING) || (partnote[i].status == KEY_RELEASED_AND_SUSTAINED))
                 notecount++;
 
         int oldestnotepos = -1;
         if(notecount > keylimit)   //find out the oldest note
-            for(int i = 0; i < POLIPHONY; ++i) {
+            for(int i = 0; i < POLYPHONY; ++i) {
                 int maxtime = 0;
-                if(((partnote[i].status == KEY_PLAYING) || (partnote[i].status == KEY_RELASED_AND_SUSTAINED)) && (partnote[i].time > maxtime)) {
+                if(((partnote[i].status == KEY_PLAYING) || (partnote[i].status == KEY_RELEASED_AND_SUSTAINED)) && (partnote[i].time > maxtime)) {
                     maxtime = partnote[i].time;
                     oldestnotepos = i;
                 }
             }
         if(oldestnotepos != -1)
-            RelaseNotePos(oldestnotepos);
+            ReleaseNotePos(oldestnotepos);
     }
 }
 
@@ -973,7 +973,7 @@ void Part::ComputePartSmps()
             partfxinputr[nefx][i] = 0.0f;
         }
 
-    for(unsigned k = 0; k < POLIPHONY; ++k) {
+    for(unsigned k = 0; k < POLYPHONY; ++k) {
         if(partnote[k].status == KEY_OFF)
             continue;
         partnote[k].time++;
@@ -1009,7 +1009,7 @@ void Part::ComputePartSmps()
             partoutl[i] *= tmp;
             partoutr[i] *= tmp;
         }
-        for(int k = 0; k < POLIPHONY; ++k)
+        for(int k = 0; k < POLYPHONY; ++k)
             KillNotePos(k);
         killallnotes = false;
         for(int nefx = 0; nefx < NUM_PART_EFX; ++nefx)
@@ -1057,7 +1057,7 @@ void Part::setkititemstatus(unsigned kititem, bool Penabled_)
         kkit.Pname[0] = '\0';
 
         //Reset notes s.t. stale buffers will not get read
-        for(int k = 0; k < POLIPHONY; ++k)
+        for(int k = 0; k < POLYPHONY; ++k)
             KillNotePos(k);
     }
     else {
@@ -1216,7 +1216,7 @@ void Part::kill_rt(void)
 {
     for(int i=0; i<NUM_PART_EFX; ++i)
         partefx[i]->kill();
-    for(int k = 0; k < POLIPHONY; ++k)
+    for(int k = 0; k < POLYPHONY; ++k)
         KillNotePos(k);
 }
 
diff --git a/src/Misc/Part.h b/src/Misc/Part.h
index e94fb6a4..d49885f0 100644
--- a/src/Misc/Part.h
+++ b/src/Misc/Part.h
@@ -54,8 +54,8 @@ class Part
                                   int masterkeyshift) REALTIME;
         void AllNotesOff() REALTIME; //panic
         void SetController(unsigned int type, int par) REALTIME;
-        void RelaseSustainedKeys() REALTIME; //this is called when the sustain pedal is relased
-        void RelaseAllKeys() REALTIME; //this is called on AllNotesOff controller
+        void ReleaseSustainedKeys() REALTIME; //this is called when the sustain pedal is released
+        void ReleaseAllKeys() REALTIME; //this is called on AllNotesOff controller
 
         /* The synthesizer part output */
         void ComputePartSmps() REALTIME; //Part output
@@ -119,7 +119,7 @@ class Part
 
         bool Ppolymode; //Part mode - 0=monophonic , 1=polyphonic
         bool Plegatomode; // 0=normal, 1=legato
-        unsigned char Pkeylimit; //how many keys are alowed to be played same time (0=off), the older will be relased
+        unsigned char Pkeylimit; //how many keys are alowed to be played same time (0=off), the older will be released
 
         char *Pname; //name of the instrument
         struct { //instrument additional information
@@ -136,7 +136,7 @@ class Part
         *partfxinputr[NUM_PART_EFX + 1];          //partfxinput l/r [NUM_PART_EFX] is for "no effect" buffer
 
         enum NoteStatus {
-            KEY_OFF, KEY_PLAYING, KEY_RELASED_AND_SUSTAINED, KEY_RELASED
+            KEY_OFF, KEY_PLAYING, KEY_RELEASED_AND_SUSTAINED, KEY_RELEASED
         };
 
         float volume, oldvolumel, oldvolumer; //this is applied by Master
@@ -155,7 +155,7 @@ class Part
     private:
         void RunNote(unsigned k);
         void KillNotePos(int pos);
-        void RelaseNotePos(int pos);
+        void ReleaseNotePos(int pos);
         void MonoMemRenote(); // MonoMem stuff.
 
         int killallnotes; //is set to 1 if I want to kill all notes
@@ -191,7 +191,7 @@ class Part
            store the velocity and masterkeyshift values of a given note (the list only store note values).
            For example 'monomem[note].velocity' would be the velocity value of the note 'note'.*/
 
-        PartNotes partnote[POLIPHONY];
+        PartNotes partnote[POLYPHONY];
 
         float oldfreq;    //this is used for portamento
         Microtonal *microtonal;
diff --git a/src/Synth/ADnote.cpp b/src/Synth/ADnote.cpp
index 092de251..43200d4b 100644
--- a/src/Synth/ADnote.cpp
+++ b/src/Synth/ADnote.cpp
@@ -1694,15 +1694,15 @@ int ADnote::noteout(float *outl, float *outr)
 
 
 /*
- * Relase the key (NoteOff)
+ * Release the key (NoteOff)
  */
-void ADnote::relasekey()
+void ADnote::releasekey()
 {
     for(int nvoice = 0; nvoice < NUM_VOICES; ++nvoice)
         NoteVoicePar[nvoice].releasekey();
-    NoteGlobalPar.FreqEnvelope->relasekey();
-    NoteGlobalPar.FilterEnvelope->relasekey();
-    NoteGlobalPar.AmpEnvelope->relasekey();
+    NoteGlobalPar.FreqEnvelope->releasekey();
+    NoteGlobalPar.FilterEnvelope->releasekey();
+    NoteGlobalPar.AmpEnvelope->releasekey();
 }
 
 /*
@@ -1721,15 +1721,15 @@ void ADnote::Voice::releasekey()
     if(!Enabled)
         return;
     if(AmpEnvelope)
-        AmpEnvelope->relasekey();
+        AmpEnvelope->releasekey();
     if(FreqEnvelope)
-        FreqEnvelope->relasekey();
+        FreqEnvelope->releasekey();
     if(FilterEnvelope)
-        FilterEnvelope->relasekey();
+        FilterEnvelope->releasekey();
     if(FMFreqEnvelope)
-        FMFreqEnvelope->relasekey();
+        FMFreqEnvelope->releasekey();
     if(FMAmpEnvelope)
-        FMAmpEnvelope->relasekey();
+        FMAmpEnvelope->releasekey();
 }
 
 void ADnote::Voice::kill(Allocator &memory)
diff --git a/src/Synth/ADnote.h b/src/Synth/ADnote.h
index 1f225ffd..72036c24 100644
--- a/src/Synth/ADnote.h
+++ b/src/Synth/ADnote.h
@@ -51,7 +51,7 @@ class ADnote:public SynthNote
         void legatonote(LegatoParams pars);
 
         int noteout(float *outl, float *outr);
-        void relasekey();
+        void releasekey();
         int finished() const;
     private:
 
diff --git a/src/Synth/Envelope.cpp b/src/Synth/Envelope.cpp
index 813e5ff4..f006477c 100644
--- a/src/Synth/Envelope.cpp
+++ b/src/Synth/Envelope.cpp
@@ -30,7 +30,7 @@ Envelope::Envelope(EnvelopeParams &pars, float basefreq)
     if(envpoints > MAX_ENVELOPE_POINTS)
         envpoints = MAX_ENVELOPE_POINTS;
     envsustain     = (pars.Penvsustain == 0) ? -1 : pars.Penvsustain;
-    forcedrelase   = pars.Pforcedrelease;
+    forcedrelease   = pars.Pforcedrelease;
     envstretch     = powf(440.0f / basefreq, pars.Penvstretch / 64.0f);
     linearenvelope = pars.Plinearenvelope;
 
@@ -92,14 +92,14 @@ Envelope::~Envelope()
 
 
 /*
- * Relase the key (note envelope)
+ * Release the key (note envelope)
  */
-void Envelope::relasekey()
+void Envelope::releasekey()
 {
     if(keyreleased)
         return;
     keyreleased = true;
-    if(forcedrelase != 0)
+    if(forcedrelease != 0)
         t = 0.0f;
 }
 
@@ -119,7 +119,7 @@ float Envelope::envout()
         return envoutval;
     }
 
-    if(keyreleased && (forcedrelase != 0)) { //do the forced release
+    if(keyreleased && (forcedrelease != 0)) { //do the forced release
         int tmp = (envsustain < 0) ? (envpoints - 1) : (envsustain + 1); //if there is no sustain point, use the last point for release
 
         if(envdt[tmp] < 0.00000001f)
@@ -130,7 +130,7 @@ float Envelope::envout()
 
         if(t >= 1.0f) {
             currentpoint = envsustain + 2;
-            forcedrelase = 0;
+            forcedrelease = 0;
             t    = 0.0f;
             inct = envdt[currentpoint];
             if((currentpoint >= envpoints) || (envsustain < 0))
@@ -175,7 +175,7 @@ float Envelope::envout_dB()
     if(linearenvelope != 0)
         return envout();
 
-    if((currentpoint == 1) && (!keyreleased || (forcedrelase == 0))) { //first point is always lineary interpolated
+    if((currentpoint == 1) && (!keyreleased || (forcedrelease == 0))) { //first point is always lineary interpolated
         float v1 = env_dB2rap(envval[0]);
         float v2 = env_dB2rap(envval[1]);
         out = v1 + (v2 - v1) * t;
diff --git a/src/Synth/Envelope.h b/src/Synth/Envelope.h
index 9d5041f8..68d20094 100644
--- a/src/Synth/Envelope.h
+++ b/src/Synth/Envelope.h
@@ -34,7 +34,7 @@ class Envelope
         Envelope(class EnvelopeParams &pars, float basefreq);
         /**Destructor*/
         ~Envelope();
-        void relasekey();
+        void releasekey();
         float envout();
         float envout_dB();
         /**Determines the status of the Envelope
@@ -51,7 +51,7 @@ class Envelope
         int   linearenvelope;
 
         int   currentpoint;    //current envelope point (starts from 1)
-        int   forcedrelase;
+        int   forcedrelease;
         bool  keyreleased;    //if the key was released
         bool  envfinish;
         float t; // the time from the last point
diff --git a/src/Synth/PADnote.cpp b/src/Synth/PADnote.cpp
index fa53f646..a6782863 100644
--- a/src/Synth/PADnote.cpp
+++ b/src/Synth/PADnote.cpp
@@ -413,9 +413,9 @@ int PADnote::finished() const
     return finished_;
 }
 
-void PADnote::relasekey()
+void PADnote::releasekey()
 {
-    NoteGlobalPar.FreqEnvelope->relasekey();
-    NoteGlobalPar.FilterEnvelope->relasekey();
-    NoteGlobalPar.AmpEnvelope->relasekey();
+    NoteGlobalPar.FreqEnvelope->releasekey();
+    NoteGlobalPar.FilterEnvelope->releasekey();
+    NoteGlobalPar.AmpEnvelope->releasekey();
 }
diff --git a/src/Synth/PADnote.h b/src/Synth/PADnote.h
index d67e780e..de63acea 100644
--- a/src/Synth/PADnote.h
+++ b/src/Synth/PADnote.h
@@ -37,7 +37,7 @@ class PADnote:public SynthNote
 
         int noteout(float *outl, float *outr);
         int finished() const;
-        void relasekey();
+        void releasekey();
     private:
         void setup(float freq, float velocity, int portamento_,
                    int midinote, bool legato = false);
diff --git a/src/Synth/SUBnote.cpp b/src/Synth/SUBnote.cpp
index 2bcdc822..34047820 100644
--- a/src/Synth/SUBnote.cpp
+++ b/src/Synth/SUBnote.cpp
@@ -578,17 +578,17 @@ int SUBnote::noteout(float *outl, float *outr)
 }
 
 /*
- * Relase Key (Note Off)
+ * Release Key (Note Off)
  */
-void SUBnote::relasekey()
+void SUBnote::releasekey()
 {
-    AmpEnvelope->relasekey();
+    AmpEnvelope->releasekey();
     if(FreqEnvelope)
-        FreqEnvelope->relasekey();
+        FreqEnvelope->releasekey();
     if(BandWidthEnvelope)
-        BandWidthEnvelope->relasekey();
+        BandWidthEnvelope->releasekey();
     if(GlobalFilterEnvelope)
-        GlobalFilterEnvelope->relasekey();
+        GlobalFilterEnvelope->releasekey();
 }
 
 /*
diff --git a/src/Synth/SUBnote.h b/src/Synth/SUBnote.h
index 093ed9a6..17e648da 100644
--- a/src/Synth/SUBnote.h
+++ b/src/Synth/SUBnote.h
@@ -36,7 +36,7 @@ class SUBnote:public SynthNote
         void legatonote(LegatoParams pars);
 
         int noteout(float *outl, float *outr); //note output,return 0 if the note is finished
-        void relasekey();
+        void releasekey();
         int finished() const;
     private:
 
diff --git a/src/Synth/SynthNote.h b/src/Synth/SynthNote.h
index bcf5dbd0..93f23f89 100644
--- a/src/Synth/SynthNote.h
+++ b/src/Synth/SynthNote.h
@@ -57,7 +57,7 @@ class SynthNote
 
         //TODO fix this spelling error [noisey commit]
         /**Release the key for the note and start release portion of envelopes.*/
-        virtual void relasekey() = 0;
+        virtual void releasekey() = 0;
 
         /**Return if note is finished.
          * @return finished=1 unfinished=0*/
diff --git a/src/Tests/AdNoteTest.h b/src/Tests/AdNoteTest.h
index b31eabc6..8dc16640 100644
--- a/src/Tests/AdNoteTest.h
+++ b/src/Tests/AdNoteTest.h
@@ -146,7 +146,7 @@ class AdNoteTest:public CxxTest::TestSuite
 
             TS_ASSERT_DELTA(outL[255], 0.254609f, 0.0001f);
 
-            note->relasekey();
+            note->releasekey();
 
 
             note->noteout(outL, outR);
diff --git a/src/Tests/PadNoteTest.h b/src/Tests/PadNoteTest.h
index c3f1fc3a..b80c7f47 100644
--- a/src/Tests/PadNoteTest.h
+++ b/src/Tests/PadNoteTest.h
@@ -161,7 +161,7 @@ class PadNoteTest:public CxxTest::TestSuite
             TS_ASSERT_DELTA(outL[255], 0.0660f, 0.0005f);
 
 
-            note->relasekey();
+            note->releasekey();
 
 
             note->noteout(outL, outR);
diff --git a/src/Tests/SubNoteTest.h b/src/Tests/SubNoteTest.h
index 622fea75..b87c0a81 100644
--- a/src/Tests/SubNoteTest.h
+++ b/src/Tests/SubNoteTest.h
@@ -128,7 +128,7 @@ class SubNoteTest:public CxxTest::TestSuite
 
             TS_ASSERT_DELTA(outL[255], 0.0000f, 0.0001f);
 
-            note->relasekey();
+            note->releasekey();
 
 
             note->noteout(outL, outR);
diff --git a/src/UI/ADnoteUI.fl b/src/UI/ADnoteUI.fl
index 5a1e63c0..fd8cfae9 100644
--- a/src/UI/ADnoteUI.fl
+++ b/src/UI/ADnoteUI.fl
@@ -235,7 +235,7 @@ class ADvoiceUI {open : {public Fl_Group}
                 callback {if (o->value()==0) voiceFMfreqenvgroup->deactivate();
 else voiceFMfreqenvgroup->activate();
 o->redraw();}
-                tooltip {Forced Relase} xywh {545 305 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
+                tooltip {Forced Release} xywh {545 305 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
                 code0 {o->init("PFMFreqEnvelopeEnabled");}
                 class Fl_Osc_Check
               }
@@ -301,7 +301,7 @@ o->redraw();}
                 callback {if (o->value()==0) voiceFMampenvgroup->deactivate();
 else voiceFMampenvgroup->activate();
 o->redraw();}
-                tooltip {Forced Relase} xywh {545 150 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
+                tooltip {Forced Release} xywh {545 150 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
                 code0 {o->init("PFMAmpEnvelopeEnabled");}
                 class Fl_Osc_Check
               }
@@ -433,7 +433,7 @@ o->redraw();}
               callback {if (o->value()==0) voicefreqenvgroup->deactivate();
 else voicefreqenvgroup->activate();
 o->redraw();}
-              tooltip {Forced Relase} xywh {15 310 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
+              tooltip {Forced Release} xywh {15 310 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
               code0 {o->init("PFreqEnvelopeEnabled");}
               class Fl_Osc_Check
             }
@@ -448,7 +448,7 @@ o->redraw();}
               callback {if (o->value()==0) voicefreqlfogroup->deactivate();
 else voicefreqlfogroup->activate();
 o->redraw();}
-              tooltip {Forced Relase} xywh {225 311 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
+              tooltip {Forced Release} xywh {225 311 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
               code0 {o->init("PFreqLfoEnabled");}
               class Fl_Osc_Check
             }
@@ -644,7 +644,7 @@ voiceonbutton->redraw();} open
             callback {if (o->value()==0) voiceampenvgroup->deactivate();
 else voiceampenvgroup->activate();
 o->redraw();}
-            tooltip {Forced Relase} xywh {15 110 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
+            tooltip {Forced Release} xywh {15 110 50 10} down_box DOWN_BOX labelfont 1 labelsize 11
             code0 {o->init("PAmpEnvelopeEnabled");}
             class Fl_Osc_Check
           }
@@ -659,7 +659,7 @@ o->redraw();}
             callback {if (o->value()==0) voiceamplfogroup->deactivate();
 else voiceamplfogroup->activate();
 o->redraw();}
-            tooltip {Forced Relase} xywh {15 185 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
+            tooltip {Forced Release} xywh {15 185 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
             code0 {o->init("PAmpLfoEnabled");}
             class Fl_Osc_Check
           }
@@ -692,7 +692,7 @@ o->redraw();}
             callback {if (o->value()==0) voicefilterenvgroup->deactivate();
 else voicefilterenvgroup->activate();
 o->redraw();}
-            tooltip {Forced Relase} xywh {255 119 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
+            tooltip {Forced Release} xywh {255 119 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
             code0 {o->init("PFilterEnvelopeEnabled");}
             class Fl_Osc_Check
           }
@@ -707,7 +707,7 @@ o->redraw();}
             callback {if (o->value()==0) voicefilterlfogroup->deactivate();
 else voicefilterlfogroup->activate();
 o->redraw();}
-            tooltip {Forced Relase} xywh {255 196 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
+            tooltip {Forced Release} xywh {255 196 55 10} down_box DOWN_BOX labelfont 1 labelsize 11
             code0 {o->init("PFilterLfoEnabled");}
             class Fl_Osc_Check
           }
diff --git a/src/UI/EnvelopeUI.fl b/src/UI/EnvelopeUI.fl
index 9d8b9da7..ff4fdd4c 100644
--- a/src/UI/EnvelopeUI.fl
+++ b/src/UI/EnvelopeUI.fl
@@ -134,7 +134,7 @@ freeedit->redraw();}
       }
       Fl_Check_Button forcedreleasecheck {
         label frcR
-        tooltip {Forced Relase} xywh {410 165 40 15} down_box DOWN_BOX labelsize 10
+        tooltip {Forced Release} xywh {410 165 40 15} down_box DOWN_BOX labelsize 10
         code0 {o->init("Pforcedrelease");}
         code1 {//TODO if (Pfreemode==0) o->hide();}
         class Fl_Osc_Check
@@ -218,7 +218,7 @@ envfree->redraw();}
         }
         Fl_Check_Button e1forcedrelease {
           label frcR
-          tooltip {Forced Relase} xywh {180 35 20 15} down_box DOWN_BOX labelsize 10 align 6
+          tooltip {Forced Release} xywh {180 35 20 15} down_box DOWN_BOX labelsize 10 align 6
           code0 {o->init("Pforcedrelease");}
           class Fl_Osc_Check
         }
@@ -380,7 +380,7 @@ envfree->redraw();}
         }
         Fl_Check_Button e3forcedrelease {
           label frcR
-          tooltip {Forced Relase} xywh {250 30 15 20} down_box DOWN_BOX labelsize 10 align 6
+          tooltip {Forced Release} xywh {250 30 15 20} down_box DOWN_BOX labelsize 10 align 6
           code0 {o->init("Pforcedrelease");}
           class Fl_Osc_Check
         }
diff --git a/src/UI/MasterUI.fl b/src/UI/MasterUI.fl
index c7663384..68ee2236 100644
--- a/src/UI/MasterUI.fl
+++ b/src/UI/MasterUI.fl
@@ -462,7 +462,7 @@ if (fl_choice("The file *might* exist. \\nOverwrite it?","No","Yes",NULL)) {
         }
         Fl_Button {} {
           label {Panic!}
-          callback {virkeyboard->relaseallkeys();
+          callback {virkeyboard->releaseallkeys();
           o->oscWrite("Panic");}
           xywh {285 34 105 53} color 90 labelfont 1
           class Fl_Osc_Button
@@ -1034,7 +1034,7 @@ bankui->show();}
         }
         Fl_Choice partrcv {
           label {Midi Channel Receive}
-          callback {virkeys->relaseallkeys(0);
+          callback {virkeys->releaseallkeys(0);
 virkeys->midich=(int) o->value();} open
           tooltip {receive from Midi channel} xywh {140 157 65 18} down_box BORDER_BOX labelsize 10 align 130 textfont 1
           code0 {char nrstr[10]; for(int i=0;i<NUM_MIDI_CHANNELS;i++){sprintf(nrstr,"Ch%d",i+1);if (i!=9) o->add(nrstr); else o->add("Dr10");};}
@@ -1375,7 +1375,7 @@ pthread_mutex_unlock(&master->mutex);*/}
       }
       Fl_Button {} {
         label {Stop ALL sounds!}
-        callback {virkeyboard->relaseallkeys();
+        callback {virkeyboard->releaseallkeys();
         o->oscWrite("Panic");}
         xywh {5 149 115 31} color 90 labelfont 1 labelsize 10
         class Fl_Osc_Button
@@ -1394,7 +1394,7 @@ simpleglobalfinedetuneslider->do_callback();}
       }
       Fl_Counter simplenpartcounter {
         label Part
-        callback {virkeys->relaseallkeys(0);
+        callback {virkeys->releaseallkeys(0);
 npartcounter->value(o->value());
 npart=(int) o->value()-1;
 
@@ -1406,7 +1406,7 @@ simplerefresh();}
       }
       Fl_Counter {} {
         label {Keyb.Oct.}
-        callback {virkeys->relaseallkeys(0);
+        callback {virkeys->releaseallkeys(0);
 virkeys->midioct=(int) o->value();
 virkeys->take_focus();}
         tooltip {Midi Octave} xywh {5 190 55 20} type Simple labelsize 11 align 8 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 11
diff --git a/src/UI/PartUI.fl b/src/UI/PartUI.fl
index 7ff188d5..1ed388cc 100644
--- a/src/UI/PartUI.fl
+++ b/src/UI/PartUI.fl
@@ -476,7 +476,7 @@ osc->write("/setkeylimit", "i", val);} open
         label Sustain
         callback {//TODO
             /*if (ctl.sustain.receive==0) {
-                RelaseSustainedKeys();
+                ReleaseSustainedKeys();
                 ctl.setsustain(0);
             };*/}
         tooltip {Sustain pedal enable} xywh {205 80 60 20} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
diff --git a/src/UI/VirKeyboard.fl b/src/UI/VirKeyboard.fl
index 2d6c399f..04416b10 100644
--- a/src/UI/VirKeyboard.fl
+++ b/src/UI/VirKeyboard.fl
@@ -221,10 +221,10 @@ if ((event==FL_PUSH)||(event==FL_DRAG)||(event==FL_RELEASE)){
 
    if ((event==FL_PUSH)&&(Fl::event_shift()!=0)) {
        if (pressed[kpos]==0) presskey(kpos,0,1);
-          else relasekey(kpos,1);
+          else releasekey(kpos,1);
    };
    if ((event==FL_RELEASE)&&(Fl::event_shift()==0))
-        relaseallkeys(1);
+        releaseallkeys(1);
    take_focus();
 };
 
@@ -255,7 +255,7 @@ if ((event==FL_KEYDOWN)||(event==FL_KEYUP)){
    if (kpos==-1) return(0);
    if ((event==FL_KEYUP) && (Fl::event_key(key)==0) && (Fl::get_key(key)!=0)) return(0);
    if (event==FL_KEYDOWN) presskey(kpos,0,2);
-      else relasekey(kpos,2);
+      else releasekey(kpos,2);
 };
 
 return(1);} {}
@@ -265,13 +265,13 @@ return(1);} {}
 //when the user uses the shift key
 if (nk>=N_OCT*12) return;
 if ((nk<0)&&(exclusive==0)) {
-  relaseallkeys(type);
+  releaseallkeys(type);
   return;
 };
 if (nk<0) return;
 if (pressed[nk]!=0) return;//the key is already pressed
 
-if (exclusive!=0) relaseallkeys(type);
+if (exclusive!=0) releaseallkeys(type);
 pressed[nk]=type;
 
 damage(1);
@@ -282,7 +282,7 @@ if (rndvelocity!=0){
 
 osc->write(loc+"noteOn", "iii", midich,nk+midioct*12,(int)vel);} {}
   }
-  Function {relasekey(int nk,int type)} {} {
+  Function {releasekey(int nk,int type)} {} {
     code {if ((nk<0)||(nk>=N_OCT*12)) return;
 if (pressed[nk]==0) return;//the key is not pressed
 if ((type!=0)&&(pressed[nk]!=type)) return;
@@ -294,8 +294,8 @@ damage(1);
 
 osc->write(loc+"noteOff", "ii", midich,nk+12*midioct);} {}
   }
-  Function {relaseallkeys(int type)} {} {
-    code {for (int i=0;i<N_OCT*12;i++) relasekey(i,type);} {}
+  Function {releaseallkeys(int type)} {} {
+    code {for (int i=0;i<N_OCT*12;i++) releasekey(i,type);} {}
   }
   decl {int pressed[N_OCT*12+1];} {private local
   }
@@ -319,7 +319,7 @@ class VirKeyboard {open
   } {
     Fl_Window virkeyboardwindow {
       label {Virtual Keyboard - ZynAddSubFX}
-      callback {relaseallkeys();
+      callback {releaseallkeys();
 virkeyboardwindow->hide();} open
       xywh {103 620 650 130} type Double visible
     } {
@@ -331,7 +331,7 @@ virkeyboardwindow->hide();} open
       }
       Fl_Counter {} {
         label {"qwer.." Oct}
-        callback {relaseallkeys();
+        callback {releaseallkeys();
 virkeys->keyoct1=(int) o->value();
 virkeys->take_focus();}
         tooltip {keys "q2w3er5t6y..." octave} xywh {380 95 45 15} type Simple labelsize 10 align 4 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 10
@@ -339,7 +339,7 @@ virkeys->take_focus();}
       }
       Fl_Counter {} {
         label {"zxcv.." Oct}
-        callback {relaseallkeys();
+        callback {releaseallkeys();
 virkeys->keyoct2=(int) o->value();
 virkeys->take_focus();}
         tooltip {keys "zsxdcvgbh..." octave} xywh {380 110 45 15} type Simple labelsize 10 align 4 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 10
@@ -354,7 +354,7 @@ virkeys->take_focus();}
       }
       Fl_Counter {} {
         label {Oct.}
-        callback {relaseallkeys();
+        callback {releaseallkeys();
 virkeys->midioct=(int) o->value();
 virkeys->take_focus();}
         tooltip {Midi Octave} xywh {255 100 55 20} type Simple labelsize 11 align 4 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 11
@@ -362,7 +362,7 @@ virkeys->take_focus();}
       }
       Fl_Button {} {
         label Close
-        callback {relaseallkeys();
+        callback {releaseallkeys();
 virkeyboardwindow->hide();}
         xywh {545 105 55 20} box THIN_UP_BOX
       }
@@ -469,7 +469,7 @@ pitchwheelroller->do_callback();}
       }
       Fl_Choice partrcv {
         label {MIDI Ch.}
-        callback {relaseallkeys();
+        callback {releaseallkeys();
 virkeys->midich=(int) o->value();
 virkeys->take_focus();} open
         tooltip {Send to Midi Channel} xywh {20 105 65 20} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
@@ -493,9 +493,9 @@ make_window();} {}
   } {
     code {virkeyboardwindow->show();} {}
   }
-  Function {relaseallkeys()} {open
+  Function {releaseallkeys()} {open
   } {
-    code {virkeys->relaseallkeys(0);} {}
+    code {virkeys->releaseallkeys(0);} {}
   }
   decl {int midictl;} {private local
   }
diff --git a/src/globals.h b/src/globals.h
index 1d686574..494bdaea 100644
--- a/src/globals.h
+++ b/src/globals.h
@@ -110,9 +110,9 @@ typedef std::complex<fftw_real> fft_t;
 #define NUM_VOICES 8
 
 /*
- * The poliphony (notes)
+ * The polyphony (notes)
  */
-#define POLIPHONY 60
+#define POLYPHONY 60
 
 /*
  * Number of system effects
-- 
2.47.0

