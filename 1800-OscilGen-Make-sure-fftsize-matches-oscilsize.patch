From c784cdb4c99c58d411983a53cb053b303adb0458 Mon Sep 17 00:00:00 2001
From: Johannes Lorenz <j.git@lorenz-ho.me>
Date: Sun, 2 Jan 2022 13:52:22 +0100
Subject: [PATCH 1800/1936] OscilGen: Make sure fftsize matches oscilsize

This was required to make sure that the OscilGen matches the FFTwrapper.
This also covers an issue in UnisonTest which is fixed in this commit.
---
 src/DSP/FFTwrapper.cpp   | 22 +++++++++++-----------
 src/DSP/FFTwrapper.h     |  4 +++-
 src/Synth/OscilGen.cpp   |  7 ++++++-
 src/Tests/KitTest.cpp    |  7 ++++++-
 src/Tests/UnisonTest.cpp | 40 ++++++++++++++++++++--------------------
 5 files changed, 46 insertions(+), 34 deletions(-)

diff --git a/src/DSP/FFTwrapper.cpp b/src/DSP/FFTwrapper.cpp
index f187ae2e..970c50f9 100644
--- a/src/DSP/FFTwrapper.cpp
+++ b/src/DSP/FFTwrapper.cpp
@@ -30,15 +30,15 @@ FFTwrapper::FFTwrapper(int fftsize_)
     }
 
 
-    fftsize  = fftsize_;
-    time     = new fftwf_real[fftsize];
-    fft      = new fftwf_complex[fftsize + 1];
+    m_fftsize = fftsize_;
+    time      = new fftwf_real[m_fftsize];
+    fft       = new fftwf_complex[m_fftsize + 1];
     pthread_mutex_lock(mutex);
-    planfftw = fftwf_plan_dft_r2c_1d(fftsize,
+    planfftw = fftwf_plan_dft_r2c_1d(m_fftsize,
                                     time,
                                     fft,
                                     FFTW_ESTIMATE);
-    planfftw_inv = fftwf_plan_dft_c2r_1d(fftsize,
+    planfftw_inv = fftwf_plan_dft_c2r_1d(m_fftsize,
                                         fft,
                                         time,
                                         FFTW_ESTIMATE);
@@ -59,29 +59,29 @@ FFTwrapper::~FFTwrapper()
 void FFTwrapper::smps2freqs(const float *smps, fft_t *freqs)
 {
     //Load data
-    memcpy((void *)time, (const void *)smps, fftsize * sizeof(float));
+    memcpy((void *)time, (const void *)smps, m_fftsize * sizeof(float));
 
     //DFT
     fftwf_execute(planfftw);
 
     //Grab data
-    memcpy((void *)freqs, (const void *)fft, fftsize * sizeof(float));
+    memcpy((void *)freqs, (const void *)fft, m_fftsize * sizeof(float));
 }
 
 void FFTwrapper::freqs2smps(const fft_t *freqs, float *smps)
 {
     //Load data
-    memcpy((void *)fft, (const void *)freqs, fftsize * sizeof(float));
+    memcpy((void *)fft, (const void *)freqs, m_fftsize * sizeof(float));
 
     //clear unused freq channel
-    fft[fftsize / 2][0] = 0.0f;
-    fft[fftsize / 2][1] = 0.0f;
+    fft[m_fftsize / 2][0] = 0.0f;
+    fft[m_fftsize / 2][1] = 0.0f;
 
     //IDFT
     fftwf_execute(planfftw_inv);
 
     //Grab data
-    memcpy((void*)smps, (const void*)time, fftsize * sizeof(float));
+    memcpy((void*)smps, (const void*)time, m_fftsize * sizeof(float));
 }
 
 void FFT_cleanup()
diff --git a/src/DSP/FFTwrapper.h b/src/DSP/FFTwrapper.h
index 00777d82..747c20e9 100644
--- a/src/DSP/FFTwrapper.h
+++ b/src/DSP/FFTwrapper.h
@@ -33,8 +33,10 @@ class FFTwrapper
          * @param freqs Structure FFTFREQS which stores the frequencies*/
         void smps2freqs(const float *smps, fft_t *freqs);
         void freqs2smps(const fft_t *freqs, float *smps);
+
+        int fftsize() const { return m_fftsize; }
     private:
-        int fftsize;
+        int m_fftsize;
         fftwf_real     *time;
         fftwf_complex *fft;
         fftwf_plan    planfftw, planfftw_inv;
diff --git a/src/Synth/OscilGen.cpp b/src/Synth/OscilGen.cpp
index f061f999..404245fb 100644
--- a/src/Synth/OscilGen.cpp
+++ b/src/Synth/OscilGen.cpp
@@ -343,7 +343,12 @@ void rmsNormalize(fft_t *freqs, int oscilsize)
 OscilGen::OscilGen(const SYNTH_T &synth_, FFTwrapper *fft_, Resonance *res_)
     :Presets(), synth(synth_)
 {
-    //assert(fft_);
+    if(fft_) {
+        // FFTwrapper should operate exactly on all "oscilsize" bytes
+        assert(fft_->fftsize() == synth_.oscilsize);
+    } else {
+        // this is possible if *this is a temporary paste object
+    }
 
     setpresettype("Poscilgen");
     fft = fft_;
diff --git a/src/Tests/KitTest.cpp b/src/Tests/KitTest.cpp
index 9b9c302c..68a3ae22 100644
--- a/src/Tests/KitTest.cpp
+++ b/src/Tests/KitTest.cpp
@@ -50,9 +50,14 @@ class KitTest
         Part *part;
         AbsTime *time;
         float *outL, *outR;
+
+        static int getSynthTDefaultOscilSize() {
+            SYNTH_T s;
+            return s.oscilsize;
+        }
     public:
         KitTest()
-            :fft(512), microtonal(dummy)
+            :fft(getSynthTDefaultOscilSize()), microtonal(dummy)
         {}
         void setUp() {
             synth = new SYNTH_T;
diff --git a/src/Tests/UnisonTest.cpp b/src/Tests/UnisonTest.cpp
index b671efdb..d621cbf6 100644
--- a/src/Tests/UnisonTest.cpp
+++ b/src/Tests/UnisonTest.cpp
@@ -57,7 +57,7 @@ class UnisonTest
             memset(outL,0,sizeof(outL));
             memset(outR,0,sizeof(outR));
 
-            fft = new FFTwrapper(BUF);
+            fft = new FFTwrapper(synth->oscilsize);
             //prepare the default settings
             params = new ADnoteParameters(*synth, fft, time);
 
@@ -99,16 +99,16 @@ class UnisonTest
             SynthParams pars{memory, *controller, *synth, *time, 120, 0, test_freq_log2, false, prng()};
             note = new ADnote(params, pars);
             note->noteout(outL, outR);
-            TS_ASSERT_DELTA(outL[80], values[0], 1.9e-5);
+            TS_ASSERT_DELTA(values[0], outL[80], 1.9e-5);
             printf("{%f,", outL[80]);
             note->noteout(outL, outR);
-            TS_ASSERT_DELTA(outR[90], values[1], 1.9e-5);
+            TS_ASSERT_DELTA(values[1], outR[90], 1.9e-5);
             printf("%f,", outR[90]);
             note->noteout(outL, outR);
-            TS_ASSERT_DELTA(outL[20], values[2], 1.9e-5);
+            TS_ASSERT_DELTA(values[2], outL[20], 1.9e-5);
             printf("%f,", outL[20]);
             note->noteout(outL, outR);
-            TS_ASSERT_DELTA(outR[200], values[3], 1.9e-5);
+            TS_ASSERT_DELTA(values[3], outR[200], 1.9e-5);
             printf("%f},\n", outR[200]);
         }
 
@@ -116,21 +116,21 @@ class UnisonTest
             sprng(0xbeef);
 
             float data[][4] = {
-                {-0.034547,0.034349,-0.000000,0.138284},
-                {0.016801,-0.084991,0.000000,0.009240},
-                {0.020383,-0.002424,-0.012952,-0.014037},
-                {-0.041653,0.002287,0.000000,-0.098181},
-                {-0.009189,-0.049860,0.000268,-0.084941},
-                {0.056976,-0.084627,-0.018144,0.000666},
-                {-0.015588,0.003690,0.003994,0.002435},
-                {0.023178,-0.024961,0.004433,-0.015144},
-                {0.042007,-0.006559,-0.005887,0.083685},
-                {0.007638,0.057870,-0.014244,0.041457},
-                {-0.018006,-0.017846,-0.063624,-0.016378},
-                {0.004914,-0.001756,-0.046715,0.015975},
-                {0.004341,-0.014575,0.000560,0.050902},
-                {0.000470,-0.036961,0.038622,0.031383},
-                {-0.045796,0.000262,0.009858,0.031958},
+                {0.009012,-0.074734,-0.012636,-0.022757},
+                {-0.004497,-0.106839,-0.003898,-0.060385},
+                {-0.027254,-0.048478,0.019716,-0.036242},
+                {0.013156,-0.104055,-0.000360,-0.152481},
+                {0.031217,-0.125947,-0.035797,-0.083334},
+                {0.061165,0.111355,-0.044391,0.065363},
+                {-0.005528,-0.063873,0.008229,0.001122},
+                {0.070588,0.092495,-0.081852,0.104497},
+                {0.065521,0.052868,-0.066022,0.110135},
+                {0.094440,-0.028949,-0.096088,-0.002352},
+                {0.072197,0.040330,-0.102320,0.048607},
+                {-0.045416,0.106115,0.059613,0.041986},
+                {0.069641,-0.061826,-0.082194,0.005864},
+                {-0.035529,-0.145869,0.033578,-0.124722},
+                {0.075097,0.027494,-0.075664,0.046463},
             };
 
             int freq_spread[15];
-- 
2.47.0

