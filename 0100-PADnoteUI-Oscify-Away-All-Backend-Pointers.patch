From a62f22dcbe13567f1c7c3060051df2cd028f0e67 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Mon, 5 Aug 2013 13:47:37 -0400
Subject: [PATCH 0100/1936] PADnoteUI: Oscify Away All Backend Pointers

---
 src/Misc/MiddleWare.cpp             |  15 +-
 src/Params/PADnoteParameters.cpp    |  54 +++++-
 src/UI/Fl_Osc_Dial.H                |   3 +-
 src/UI/Fl_Osc_Dial.cpp              |  18 +-
 src/UI/Fl_Osc_Widget.H              |   1 +
 src/UI/Fl_Osc_Widget.cpp            |   1 +
 src/UI/Fl_PADnoteOvertonePosition.h |   2 -
 src/UI/MasterUI.fl                  |   6 +-
 src/UI/PADnoteUI.fl                 | 288 +++++++++++-----------------
 src/UI/PartUI.fl                    |   2 +-
 10 files changed, 193 insertions(+), 197 deletions(-)

diff --git a/src/Misc/MiddleWare.cpp b/src/Misc/MiddleWare.cpp
index 38b18265..1ff607c8 100644
--- a/src/Misc/MiddleWare.cpp
+++ b/src/Misc/MiddleWare.cpp
@@ -374,9 +374,12 @@ struct MiddleWareImpl
         //}
 
         PADnoteParameters::ports.dispatch(msg, d);
-        if(!d.matches)
+        if(!d.matches) {
+            fprintf(stderr, "%c[%d;%d;%dm", 0x1B, 1, 7 + 30, 0 + 40);
             fprintf(stderr, "Unknown location '%s%s'<%s>\n",
                     path.c_str(), msg, rtosc_argument_string(msg));
+            fprintf(stderr, "%c[%d;%d;%dm", 0x1B, 0, 7 + 30, 0 + 40);
+        }
 
         return true;
     }
@@ -397,9 +400,12 @@ struct MiddleWareImpl
         }
 
         OscilGen::ports.dispatch(msg, d);
-        if(!d.matches)
+        if(!d.matches) {
+            fprintf(stderr, "%c[%d;%d;%dm", 0x1B, 1, 7 + 30, 0 + 40);
             fprintf(stderr, "Unknown location '%s%s'<%s>\n",
                     path.c_str(), msg, rtosc_argument_string(msg));
+            fprintf(stderr, "%c[%d;%d;%dm", 0x1B, 0, 7 + 30, 0 + 40);
+        }
 
         return true;
     }
@@ -627,6 +633,11 @@ class UI_Interface:public Fl_Osc_Interface
                         //fprintf(stderr, "tossing char to %p\n", pair.second);
                         pair.second->OSC_value((char)rtosc_argument(msg,0).i,
                                 handle);
+                    } else if(!strcmp(arg_str, "i")) {
+                        //printf("'%s' => '%d'\n", msg, rtosc_argument(msg,0).i);
+                        //fprintf(stderr, "tossing char to %p\n", pair.second);
+                        pair.second->OSC_value((int)rtosc_argument(msg,0).i,
+                                handle);
                     } else if(!strcmp(arg_str, "f")) {
                         //printf("'%s' => '%d'\n", msg, rtosc_argument(msg,0).i);
                         //fprintf(stderr, "tossing char to %p\n", pair.second);
diff --git a/src/Params/PADnoteParameters.cpp b/src/Params/PADnoteParameters.cpp
index 0e96ae2b..fe735b64 100644
--- a/src/Params/PADnoteParameters.cpp
+++ b/src/Params/PADnoteParameters.cpp
@@ -61,6 +61,7 @@ static rtosc::Ports localPorts =
     rRecurp(GlobalFilter, "Post Filter"),
     PARAMC(PADnoteParameters, Pmode, mode,
             "0 - bandwidth, 1 - discrete 2 - continious"),
+    PC(Volume),
     PC(hp.base.type),
     PC(hp.base.par1),
     PC(hp.freqmult),
@@ -101,8 +102,23 @@ static rtosc::Ports localPorts =
     PC(FilterVelocityScale),
     PC(FilterVelocityScaleFunction),
 
+    {"Pbandwidth::i:c", NULL, NULL,
+        [](const char *msg, rtosc::RtData &d) {
+            PADnoteParameters *p = ((PADnoteParameters*)d.obj);
+            if(rtosc_narguments(msg)) {
+                p->setPbandwidth(rtosc_argument(msg, 0).i);
+            } else {
+                d.reply(d.loc, "i", p->Pbandwidth);
+            }}},
+    
+    {"bandwidthvalue:", NULL, NULL,
+        [](const char *, rtosc::RtData &d) {
+            PADnoteParameters *p = ((PADnoteParameters*)d.obj);
+            d.reply(d.loc, "f", p->setPbandwidth(p->Pbandwidth));
+        }},
 
-    {"nhr:", "::Returns the harmonic shifts",
+
+    {"nhr:", rDoc("Returns the harmonic shifts"),
         NULL, [](const char *, rtosc::RtData &d) {
             PADnoteParameters *p = ((PADnoteParameters*)d.obj);
             const unsigned n = synth->oscilsize / 2;
@@ -111,7 +127,7 @@ static rtosc::Ports localPorts =
                 tmp[i] = p->getNhr(i);
             d.reply(d.loc, "b", n*sizeof(float), tmp);
             delete[] tmp;}},
-    {"profile:i", "::UI display of the harmonic profile",
+    {"profile:i", rDoc("UI display of the harmonic profile"),
         NULL, [](const char *m, rtosc::RtData &d) {
             PADnoteParameters *p = ((PADnoteParameters*)d.obj);
             const unsigned n = rtosc_argument(m, 0).i;
@@ -120,7 +136,7 @@ static rtosc::Ports localPorts =
             d.reply(d.loc, "b", n*sizeof(float), tmp);
             d.reply(d.loc, "i", realbw);
             delete[] tmp;}},
-    {"sample#64:ifb", "::Nothing to see here", 0,
+    {"sample#64:ifb", rDoc("Nothing to see here"), 0,
         [](const char *m, rtosc::RtData d)
         {
             PADnoteParameters *p = (PADnoteParameters*)d.obj;
@@ -133,6 +149,38 @@ static rtosc::Ports localPorts =
 
             //XXX TODO memory managment (deallocation of smp buffer)
         }},
+    //weird stuff for PCoarseDetune
+    {"detunevalue:", NULL, NULL, [](const char *, RtData &d)
+        {
+            PADnoteParameters *obj = (PADnoteParameters *)d.obj;
+            d.reply(d.loc, "f", getdetune(obj->PDetuneType, 0, obj->PDetune));
+        }},
+    {"octave::c:i", NULL, NULL, [](const char *msg, RtData &d)
+        {
+            PADnoteParameters *obj = (PADnoteParameters *)d.obj;
+            if(!rtosc_narguments(msg)) {
+                int k=obj->PCoarseDetune/1024;
+                if (k>=8) k-=16;
+                d.reply(d.loc, "i", k);
+            } else {
+                int k=(int) rtosc_argument(msg, 0).i;
+                if (k<0) k+=16;
+                obj->PCoarseDetune = k*1024 + obj->PCoarseDetune%1024;
+            }
+        }},
+    {"coarsedetune::c:i", NULL, NULL, [](const char *msg, RtData &d)
+        {
+            PADnoteParameters *obj = (PADnoteParameters *)d.obj;
+            if(!rtosc_narguments(msg)) {
+                int k=obj->PCoarseDetune%1024;
+                if (k>=512) k-=1024;
+                d.reply(d.loc, "i", k);
+            } else {
+                int k=(int) rtosc_argument(msg, 0).i;
+                if (k<0) k+=1024;
+                obj->PCoarseDetune = k + (obj->PCoarseDetune/1024)*1024;
+            }
+        }},
 };
 
 rtosc::Ports &PADnoteParameters::ports = localPorts;
diff --git a/src/UI/Fl_Osc_Dial.H b/src/UI/Fl_Osc_Dial.H
index 41a5bc36..d34f23ca 100644
--- a/src/UI/Fl_Osc_Dial.H
+++ b/src/UI/Fl_Osc_Dial.H
@@ -4,7 +4,7 @@
 #include "Fl_Osc_Widget.H"
 #include <string>
 
-class Fl_Osc_Dial:public WidgetPDial, Fl_Osc_Widget
+class Fl_Osc_Dial:public WidgetPDial, public Fl_Osc_Widget
 {
 
     public:
@@ -18,6 +18,7 @@ class Fl_Osc_Dial:public WidgetPDial, Fl_Osc_Widget
         //Normal Initialization
         void init(const char *path);
         //void OSC_value(float);
+        void OSC_value(int);
         void OSC_value(char);
         using Fl_Osc_Widget::OSC_value;
 
diff --git a/src/UI/Fl_Osc_Dial.cpp b/src/UI/Fl_Osc_Dial.cpp
index d7fccd5c..3f57ebcc 100644
--- a/src/UI/Fl_Osc_Dial.cpp
+++ b/src/UI/Fl_Osc_Dial.cpp
@@ -24,7 +24,7 @@ Fl_Osc_Pane *fetch_osc_pane(Fl_Widget *w)
 }
 
 Fl_Osc_Dial::Fl_Osc_Dial(int X, int Y, int W, int H, const char *label)
-    :WidgetPDial(X,Y,W,H, label), Fl_Osc_Widget()
+    :WidgetPDial(X,Y,W,H, label), Fl_Osc_Widget(this)
 {
     bounds(0.0, 127.0f);
     WidgetPDial::callback(callback_fn);
@@ -33,13 +33,9 @@ Fl_Osc_Dial::Fl_Osc_Dial(int X, int Y, int W, int H, const char *label)
 
 void Fl_Osc_Dial::init(const char *path_)
 {
-    Fl_Osc_Pane *pane = fetch_osc_pane(this);
-    assert(pane);
-    osc = pane->osc;
     assert(osc);
-    loc = pane->pane_name;
     path = path_;
-    full_path = pane->pane_name + path;
+    full_path = loc + path;
     oscRegister(path_);
 };
         
@@ -63,6 +59,11 @@ void Fl_Osc_Dial::callback(Fl_Callback *cb, void *p)
     cb_data.second = p;
 }
 
+void Fl_Osc_Dial::OSC_value(int v)
+{
+    value(v+minimum());
+}
+
 void Fl_Osc_Dial::OSC_value(char v)
 {
     value(v+minimum());
@@ -77,7 +78,10 @@ void Fl_Osc_Dial::cb(void)
 {
     assert(osc);
 
-    oscWrite(path, "c", (char)(value()-minimum()));
+    if((maximum()-minimum()) == 127 || (maximum()-minimum()) == 255)
+        oscWrite(path, "c", (char)(value()-minimum()));
+    else
+        oscWrite(path, "i", (int)(value()-minimum()));
     
     if(cb_data.first)
         cb_data.first(this, cb_data.second);
diff --git a/src/UI/Fl_Osc_Widget.H b/src/UI/Fl_Osc_Widget.H
index 47f92d69..28370c6d 100644
--- a/src/UI/Fl_Osc_Widget.H
+++ b/src/UI/Fl_Osc_Widget.H
@@ -23,6 +23,7 @@ class Fl_Osc_Widget
         //labeled forwarding methods
         virtual void OSC_value(float x, const char *);
         virtual void OSC_value(bool x, const char *);
+        virtual void OSC_value(int x, const char *);
         virtual void OSC_value(char x, const char *);
         virtual void OSC_value(unsigned x, void *v, const char *);
 
diff --git a/src/UI/Fl_Osc_Widget.cpp b/src/UI/Fl_Osc_Widget.cpp
index b358d872..20cf47a4 100644
--- a/src/UI/Fl_Osc_Widget.cpp
+++ b/src/UI/Fl_Osc_Widget.cpp
@@ -29,6 +29,7 @@ void Fl_Osc_Widget::OSC_value(unsigned,void*) {}
 //labeled forwarding methods
 void Fl_Osc_Widget::OSC_value(float x, const char *) {OSC_value(x);}
 void Fl_Osc_Widget::OSC_value(bool x, const char *) {OSC_value(x);}
+void Fl_Osc_Widget::OSC_value(int x, const char *) {OSC_value(x);}
 void Fl_Osc_Widget::OSC_value(char x, const char *) {OSC_value(x);}
 void Fl_Osc_Widget::OSC_value(unsigned x, void *v, const char *) {OSC_value(x,v);}
 
diff --git a/src/UI/Fl_PADnoteOvertonePosition.h b/src/UI/Fl_PADnoteOvertonePosition.h
index 46c06e3b..76e1f6c2 100644
--- a/src/UI/Fl_PADnoteOvertonePosition.h
+++ b/src/UI/Fl_PADnoteOvertonePosition.h
@@ -62,7 +62,6 @@ class PADnoteOvertonePosition: public Fl_Box, Fl_Osc_Widget
         virtual void OSC_value(unsigned N, void *data, const char *name)
             override
         {
-            printf("why hello there, I seem to have a '%s'\n", name);
             assert(N==(4*nsamples));
             float *d = (float*)data;
             if(!strcmp(name, "spectrum"))
@@ -74,7 +73,6 @@ class PADnoteOvertonePosition: public Fl_Box, Fl_Osc_Widget
         }
         virtual void OSC_value(char x, const char *name) override
         {
-            printf("whyy hello there, I seem to have a '%s'\n", name);
             assert(!strcmp(name, "mode"));
             mode = x;
             regenerateOvertones();
diff --git a/src/UI/MasterUI.fl b/src/UI/MasterUI.fl
index 3b2f88d6..b13d633d 100644
--- a/src/UI/MasterUI.fl
+++ b/src/UI/MasterUI.fl
@@ -510,11 +510,13 @@ if (result!=0) fl_alert("Error: Could not save the file.");}
             }
           }
         }
+        Fl_Box dummy {
+          code0 {win_root->osc = osc;}
+          code1 {win_root->pane_name = "/";}
+        }
         Fl_Dial mastervolumedial {
           label {Master Volume}
           tooltip {Master Volume} xywh {20 37 55 55} box ROUND_UP_BOX labelsize 9 align 130 maximum 127 step 1
-          code0 {win_root->osc = osc;}
-          code1 {win_root->pane_name = "/";}
           code2 {o->init("volume");}
           class Fl_Osc_Dial
         }
diff --git a/src/UI/PADnoteUI.fl b/src/UI/PADnoteUI.fl
index 75d0668d..5029e8ed 100644
--- a/src/UI/PADnoteUI.fl
+++ b/src/UI/PADnoteUI.fl
@@ -41,7 +41,10 @@ decl {\#include <string.h>} {private local
 decl {\#include <string>} {public local
 } 
 
-decl {\#include "WidgetPDial.h"} {public local
+decl {\#include "Fl_Osc_Slider.H"} {public local
+} 
+
+decl {\#include "Fl_Osc_VSlider.H"} {public local
 } 
 
 decl {\#include "EnvelopeUI.h"} {public local
@@ -67,13 +70,12 @@ decl {\#include "PresetsUI.h"} {public local
 
 class PADnoteUI {open : {public PresetsUI_}
 } {
-  Function {PADnoteUI(PADnoteParameters *parameters, std::string location_, Fl_Osc_Interface *osc_)} {open
+  Function {PADnoteUI(std::string location_, Fl_Osc_Interface *osc_)} {open
   } {
     code {assert(osc_);
 assert(!location_.empty());
 
 location=location_;
-pars=parameters;
 oscui=NULL;
 osc_i = osc_;
 resui=new ResonanceUI(osc_i, location+"resonance/");
@@ -85,7 +87,13 @@ make_window();} {selected
     Fl_Window padnotewindow {
       label {PAD synth Parameters} open
       xywh {52 324 535 435} type Double hide
+      class Fl_Osc_Window
     } {
+
+      Fl_Box dummy {
+        code0 {padnotewindow->osc = osc_i; padnotewindow->pane_name = location;}
+        code1 {puts("dummy setup done...");}
+      }
       Fl_Tabs {} {
         callback {if (o->value()!=harmonicstructuregroup) applybutton->hide();
 	else applybutton->show();} open
@@ -98,24 +106,23 @@ make_window();} {selected
         } {
           Fl_Group bwprofilegroup {open
             xywh {5 30 90 260} box UP_FRAME
-            code0 {if (pars->Pmode!=0) o->deactivate();}
+            class Fl_Osc_Group
           } {
             Fl_Dial hpbasepar1 {
               label Width
               callback {hpui->update();
 cbwidget->do_callback();}
               xywh {20 75 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code1 {harmonicstructuregroup->osc = osc_i; harmonicstructuregroup->pane_name = location;}
-              code2 {o->init("hp.base.par1");}
+              code2 {o->init("Php.base.par1");}
               class Fl_Osc_Dial
             }
             Fl_Choice hpbasetype {
               label {Base Type}
-              callback {pars->Php.base.type=o->value();
-hprofile->redraw();
+              callback {hprofile->redraw();
 cbwidget->do_callback();}
               xywh {15 45 75 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
-              code0 {o->value(pars->Php.base.type);}
+              code0 {o->init("Php.base.type");}
+              class Fl_Osc_Choice
             } {
               MenuItem {} {
                 label Gauss
@@ -135,7 +142,7 @@ cbwidget->do_callback();}
               callback {hpui->update();
 cbwidget->do_callback();}
               xywh {55 75 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->init("hp.freqmult");}
+              code0 {o->init("Php.freqmult");}
               class Fl_Osc_Dial
             }
             Fl_Dial hpmpar1 {
@@ -143,7 +150,7 @@ cbwidget->do_callback();}
               callback {hpui->update();
 cbwidget->do_callback();}
               xywh {15 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->init("hp.modulator.par1");}
+              code0 {o->init("Php.modulator.par1");}
               class Fl_Osc_Dial
             }
             Fl_Dial hpmfreq {
@@ -151,7 +158,7 @@ cbwidget->do_callback();}
               callback {hpui->update();
 cbwidget->do_callback();}
               xywh {40 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->init("hp.modulator.freq");}
+              code0 {o->init("Php.modulator.freq");}
               class Fl_Osc_Dial
             }
             Fl_Group {} {
@@ -159,11 +166,11 @@ cbwidget->do_callback();}
             } {
               Fl_Choice hpamptype {
                 label AmpMultiplier
-                callback {pars->Php.amp.type=o->value();
-hprofile->redraw();
+                callback {hprofile->redraw();
 cbwidget->do_callback();}
                 xywh {15 175 70 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
-                code0 {o->value(pars->Php.amp.type);}
+                code0 {o->init("Php.amp.type");}
+                class Fl_Osc_Choice
               } {
                 MenuItem {} {
                   label OFF
@@ -187,7 +194,7 @@ cbwidget->do_callback();}
                 callback {hpui->update();
 cbwidget->do_callback();}
                 xywh {15 205 70 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
-                code0 {o->init("hp.amp.mode");}
+                code0 {o->init("Php.amp.mode");}
                 class Fl_Osc_Choice
               } {
                 MenuItem {} {
@@ -212,7 +219,7 @@ cbwidget->do_callback();}
                 callback {hpui->update();
 cbwidget->do_callback();}
                 xywh {15 235 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-                code0 {o->init("hp.amp.par1");}
+                code0 {o->init("Php.amp.par1");}
                 class Fl_Osc_Dial
               }
               Fl_Dial hpamppar2 {
@@ -220,24 +227,24 @@ cbwidget->do_callback();}
                 callback {hpui->update();
 cbwidget->do_callback();}
                 xywh {55 235 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-                code0 {o->init("hp.amp.par2");}
+                code0 {o->init("Php.amp.par2");}
                 class Fl_Osc_Dial
               }
             }
             Fl_Check_Button hpautoscale {
               label autoscale
-              callback {pars->Php.autoscale=(int) o->value();
-hprofile->redraw();
+              callback {hprofile->redraw();
 cbwidget->do_callback();}
               xywh {10 270 60 15} down_box DOWN_BOX labelsize 10
-              code0 {o->value(pars->Php.autoscale);}
+              code0 {o->init("Php.autoscale");}
+              class Fl_Osc_Check
             }
             Fl_Choice hponehalf {
-              callback {pars->Php.onehalf=o->value();
-hprofile->redraw();
+              callback {hprofile->redraw();
 cbwidget->do_callback();}
               xywh {10 143 80 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
-              code0 {o->value(pars->Php.onehalf);}
+              code0 {o->init("Php.onehalf");}
+              class Fl_Osc_Choice
             } {
               MenuItem {} {
                 label Full
@@ -257,7 +264,7 @@ cbwidget->do_callback();}
               callback {hpui->update();
 cbwidget->do_callback();}
               xywh {65 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->init("hp.width");}
+              code0 {o->init("Php.width");}
               class Fl_Osc_Dial
             }
           }
@@ -289,29 +296,27 @@ resui->setcbwidget(cbwidget,applybutton);}
           }
           Fl_Dial bwdial {
             label BandWidth
-            callback {bwcents->value(pars->setPbandwidth((int) o->value()));
-cbwidget->do_callback();}
+            callback {o->oscWrite("bandwidthvalue");cbwidget->do_callback();}
             xywh {15 295 35 35} box ROUND_UP_BOX labelsize 10 maximum 1000 step 1
-            code0 {o->value(pars->Pbandwidth);}
-            code1 {if (pars->Pmode!=0) o->deactivate();}
-            class WidgetPDial
+            code0 {o->init("Pbandwidth");}
+            class Fl_Osc_Dial
           }
           Fl_Value_Output bwcents {
             label cents
             xywh {55 305 55 15} labelsize 10 align 6 maximum 10000 step 0.1
-            code0 {o->value(pars->setPbandwidth(pars->Pbandwidth));}
-            code1 {if (pars->Pmode!=0) o->deactivate();}
+            code0 {o->init("bandwidthvalue");}
+            class Fl_Osc_Output
           }
           Fl_Group {} {open
             xywh {315 295 215 45} box UP_FRAME
           } {
             Fl_Choice hrpostype {
               label OvertonesPosition
-              callback {pars->Phrpos.type=o->value();
-opui->update();
+              callback {opui->update();
 cbwidget->do_callback();}
               xywh {325 310 80 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
-              code0 {o->value(pars->Phrpos.type);}
+              code0 {o->init("Phrpos.type");}
+              class Fl_Osc_Choice
             } {
               MenuItem {} {
                 label Harmonic
@@ -345,35 +350,35 @@ cbwidget->do_callback();}
             Fl_Dial hrpospar1 {
               label Par1
               callback {opui->update();
+                  hpui->update();
 cbwidget->do_callback();}
-              xywh {425 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
-              code0 {o->init("hrpos.par1");}
+              xywh {425 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
+              code0 {o->init("Phrpos.par1");}
               class Fl_Osc_Dial
             }
             Fl_Dial hrpospar2 {
               label Par2
               callback {opui->update();
 cbwidget->do_callback();}
-              xywh {460 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
-              code0 {o->init("hrpos.par2");}
+              xywh {460 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
+              code0 {o->init("Phrpos.par2");}
               class Fl_Osc_Dial
             }
             Fl_Dial hrpospar3 {
               label ForceH
               callback {opui->update();
 cbwidget->do_callback();}
-              xywh {495 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
-              code0 {o->init("hrpos.par3");}
+              xywh {495 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
+              code0 {o->init("Phrpos.par3");}
               class Fl_Osc_Dial
             }
           }
           Fl_Choice bwscale {
             label {Bandwidth Scale}
-            callback {pars->Pbwscale=(int) o->value();
-cbwidget->do_callback();}
+            callback {cbwidget->do_callback();}
             xywh {120 305 80 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
-            code0 {o->value(pars->Pbwscale);}
-            code1 {if (pars->Pmode!=0) o->deactivate();}
+            code0 {o->init("Pbwscale");}
+            class Fl_Osc_Choice
           } {
             MenuItem {} {
               label Normal
@@ -415,10 +420,10 @@ cbwidget->do_callback();}
           } {}
           Fl_Choice qsamplesize {
             label {Sample Size}
-            callback {pars->Pquality.samplesize=(int) o->value();
-cbwidget->do_callback();}
+            callback {cbwidget->do_callback();}
             xywh {375 190 115 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
-            code0 {o->value(pars->Pquality.samplesize);}
+            code0 {o->init("Pquality.samplesize");}
+            class Fl_Osc_Choice
           } {
             MenuItem {} {
               label {16k (Tiny)}
@@ -451,10 +456,10 @@ cbwidget->do_callback();}
           }
           Fl_Choice qsmpoct {
             label {smp/oct}
-            callback {pars->Pquality.smpoct=(int) o->value();
-cbwidget->do_callback();}
+            callback {cbwidget->do_callback();}
             xywh {430 155 45 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
-            code0 {o->value(pars->Pquality.smpoct);}
+            code0 {o->init("Pquality.smpoct");}
+            class Fl_Osc_Choice
           } {
             MenuItem {} {
               label {0.5}
@@ -487,10 +492,10 @@ cbwidget->do_callback();}
           }
           Fl_Choice qoct {
             label {no.oct}
-            callback {pars->Pquality.oct=(int) o->value();
-cbwidget->do_callback();}
+            callback {cbwidget->do_callback();}
             xywh {480 155 45 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
-            code0 {o->value(pars->Pquality.oct);}
+            code0 {o->init("Pquality.oct");}
+            class Fl_Osc_Choice
           } {
             MenuItem {} {
               label 1
@@ -527,10 +532,10 @@ cbwidget->do_callback();}
           }
           Fl_Choice qbasenote {
             label base
-            callback {pars->Pquality.basenote=(int) o->value();
-cbwidget->do_callback();}
+            callback {cbwidget->do_callback();}
             xywh {375 155 50 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
-            code0 {o->value(pars->Pquality.basenote);}
+            code0 {o->init("Pquality.basenote");}
+            class Fl_Osc_Choice
           } {
             MenuItem {} {
               label {C-2}
@@ -573,7 +578,6 @@ cbwidget->do_callback();}
             xywh {100 45 430 90} box FLAT_BOX color 51 selection_color 218 labelcolor 63
             code0 {hpui=new PADnoteHarmonicProfile(o->x(),o->y(),o->w(),o->h(),"");}
             code1 {hpui->init();}
-            code2 {if (pars->Pmode!=0) { o->deactivate(); o->color(48);};}
           } {}
           Fl_Box {} {
             label {Profile of One Harmonic (Frequency Distribution)}
@@ -581,9 +585,8 @@ cbwidget->do_callback();}
           }
           Fl_Choice spectrummode {
             label {Spectrum Mode}
-            callback {pars->Pmode=(int) o->value();
-
-if (pars->Pmode==0){
+            callback {
+if (o->value()==0){
    bwprofilegroup->activate();
    bwdial->activate();
    bwcents->activate();
@@ -599,9 +602,11 @@ if (pars->Pmode==0){
    bwscale->deactivate();
 };
 
+hpui->update();
 cbwidget->do_callback();}
             xywh {220 305 90 20} down_box BORDER_BOX labelfont 1 labelsize 10 align 5 textsize 11
-            code0 {o->value(pars->Pmode);}
+            code0 {o->init("Pmode");}
+            class Fl_Osc_Choice
           } {
             MenuItem {} {
               label Bandwidth
@@ -633,26 +638,16 @@ cbwidget->do_callback();}
             } {}
             Fl_Counter octave {
               label Octave
-              callback {int k=(int) o->value();
-if (k<0) k+=16;
-pars->PCoarseDetune = k*1024+
-   pars->PCoarseDetune%1024;}
               tooltip Octave xywh {470 295 45 15} type Simple labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
-              code0 {int k=pars->PCoarseDetune/1024;}
-              code1 {if (k>=8) k-=16;}
-              code2 {o->value(k);}
+              code0 {o->init("octave");}
+              class Fl_Osc_Counter
             }
             Fl_Counter coarsedet {
               label {Coarse det.}
-              callback {int k=(int) o->value();
-if (k<0) k+=1024;
-pars->PCoarseDetune = k+
-   (pars->PCoarseDetune/1024)*1024;}
               tooltip {Coarse Detune} xywh {455 365 70 20} type Simple labelsize 10 align 5 minimum -64 maximum 63 step 1 textfont 1 textsize 11
-              code0 {int k=pars->PCoarseDetune%1024;}
-              code1 {if (k>=512) k-=1024;}
-              code2 {o->value(k);}
+              code0 {o->init("coarsedetune");}
               code3 {o->lstep(10);}
+              class Fl_Osc_Counter
             }
             Fl_Group freqlfo {
               label {Frequency LFO     } open
@@ -661,41 +656,38 @@ pars->PCoarseDetune = k+
               class LFOUI
             } {}
             Fl_Slider detune {
-              callback {pars->PDetune=(int)o->value()+8192;
-detunevalueoutput->do_callback();}
+              callback {o->oscWrite("detunevalue");}
               tooltip {Fine Detune (cents)} xywh {60 295 295 15} type {Horz Knob} box NO_BOX minimum -8192 maximum 8191 step 1
-              code0 {o->value(pars->PDetune-8192);}
+              code0 {o->init("PDetune", 'i');}
+              class Fl_Osc_Slider
             }
             Fl_Value_Output detunevalueoutput {
               label Detune
-              callback {o->value(getdetune(pars->PDetuneType,0,pars->PDetune));}
               xywh {12 295 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 step 0.01 textfont 1 textsize 10
-              code0 {o->value(getdetune(pars->PDetuneType,0,pars->PDetune));}
+              code0 {o->init("detunevalue");}
+              class Fl_Osc_Output
             }
             Fl_Choice detunetype {
               label {Detune Type}
-              callback {pars->PDetuneType=(int) o->value()+1;
-detunevalueoutput->do_callback();} open
+              callback {o->oscWrite("detunevalue");} open
               xywh {450 330 75 20} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
               code0 {o->add("L35cents");o->add("L10cents");o->add("E100cents");o->add("E1200cents");}
-              code1 {o->value(pars->PDetuneType-1);}
+              code1 {o->init("PDetuneType",1);}
+              class Fl_Osc_Choice
             } {}
             Fl_Check_Button hz440 {
               label 440Hz
-              callback {int x=(int) o->value();
-pars->Pfixedfreq=x;
-if (x==0) fixedfreqetdial->deactivate();
+              callback {if (o->value()==0) fixedfreqetdial->deactivate();
    else fixedfreqetdial->activate();}
               tooltip {set the base frequency to 440Hz} xywh {365 295 50 15} down_box DOWN_BOX labelfont 1 labelsize 10
-              code0 {o->value(pars->Pfixedfreq);}
+              code0 {o->init("Pfixedfreq");}
+              class Fl_Osc_Check
             }
             Fl_Dial fixedfreqetdial {
               label {Eq.T.}
-              callback {pars->PfixedfreqET=(int) o->value();}
               tooltip {How the frequency varies acording to the keyboard (leftmost for fixed frequency)} xywh {420 295 15 15} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
-              code0 {o->value(pars->PfixedfreqET);}
-              code1 {if (pars->Pfixedfreq==0) o->deactivate();}
-              class WidgetPDial
+              code0 {o->init("PfixedfreqET");}
+              class Fl_Osc_Dial
             }
           }
           Fl_Group {} {
@@ -704,50 +696,45 @@ if (x==0) fixedfreqetdial->deactivate();
           } {
             Fl_Value_Slider volume {
               label Vol
-              callback {pars->PVolume=(int)o->value();}
               tooltip Volume xywh {10 50 160 15} type {Horz Knob} box NO_BOX labelsize 11 align 8 maximum 127 step 1
-              code0 {o->value(pars->PVolume);}
+              code0 {o->init("PVolume", 'c');}
+              class Fl_Osc_VSlider
             }
             Fl_Value_Slider vsns {
               label {V.Sns}
-              callback {pars->PAmpVelocityScaleFunction=(int) o->value();}
               tooltip {Velocity Sensing Function (rightmost to disable)} xywh {10 70 160 15} type {Horz Knob} box NO_BOX labelsize 11 align 8 maximum 127 step 1
-              code0 {o->value(pars->PAmpVelocityScaleFunction);}
+              code0 {o->init("PAmpVelocityScaleFunction");}
+              class Fl_Osc_VSlider
             }
             Fl_Dial pan {
               label Pan
-              callback {pars->PPanning=(int) o->value();}
               tooltip {Panning (leftmost is Random)} xywh {210 45 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
-              code0 {o->value(pars->PPanning);}
-              class WidgetPDial
+              code0 {o->init("PPanning");}
+              class Fl_Osc_Dial
             }
             Fl_Dial pstr {
               label {P.Str.}
-              callback {pars->PPunchStrength=(int) o->value();}
               tooltip {Punch Strength} xywh {125 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->value(pars->PPunchStrength);}
-              class WidgetPDial
+              code0 {o->init("PPunchStrength");}
+              class Fl_Osc_Dial
             }
             Fl_Dial pt {
               label {P.t.}
-              callback {pars->PPunchTime=(int) o->value();}
               tooltip {Punch Time (duration)} xywh {155 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->value(pars->PPunchTime);}
-              class WidgetPDial
+              code0 {o->init("PPunchTime");}
+              class Fl_Osc_Dial
             }
             Fl_Dial pstc {
               label {P.Stc.}
-              callback {pars->PPunchStretch=(int) o->value();}
               tooltip {Punch Stretch} xywh {185 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->value(pars->PPunchStretch);}
-              class WidgetPDial
+              code0 {o->init("PPunchStretch");}
+              class Fl_Osc_Dial
             }
             Fl_Dial pvel {
               label {P.Vel.}
-              callback {pars->PPunchVelocitySensing=(int) o->value();}
               tooltip {Punch Velocity Sensing} xywh {215 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
-              code0 {o->value(pars->PPunchVelocitySensing);}
-              class WidgetPDial
+              code0 {o->init("PPunchVelocitySensing");}
+              class Fl_Osc_Dial
             }
             Fl_Group ampenv {
               label {PADSynth - Amplitude Envelope} open
@@ -763,10 +750,10 @@ if (x==0) fixedfreqetdial->deactivate();
             } {}
             Fl_Check_Button stereo {
               label Stereo
-              callback {pars->PStereo=(int) o->value();
-hprofile->redraw();}
+              callback {hprofile->redraw();}
               xywh {15 245 70 25} down_box DOWN_BOX
-              code0 {o->value(pars->PStereo);}
+              code0 {o->init("PStereo");}
+              class Fl_Osc_Check
             }
           }
           Fl_Group {} {
@@ -818,12 +805,12 @@ if (resui!=NULL) {
       }
       Fl_Button {} {
         label C
-        callback {presetsui->copy(pars);}
+        callback {/*presetsui->copy(pars);*/}
         xywh {65 400 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
       }
       Fl_Button {} {
         label P
-        callback {presetsui->paste(pars,this);}
+        callback {/*presetsui->paste(pars,this);*/}
         xywh {95 400 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
       }
       Fl_Button {} {
@@ -832,42 +819,15 @@ if (resui!=NULL) {
 filename=fl_file_chooser("Export samples:","(*.wav)",NULL,0);
 if (filename==NULL) return;
 fl_filename_setext(filename,"");
-
-
-
-pars->export2wav(filename);}
+o->oscWrite("export2wav", "s", filename);}
         tooltip {export samples as wav file} xywh {5 400 55 30} box THIN_UP_BOX color 51 labelsize 11 align 128
+        class Fl_Osc_Button
       }
     }
   }
   Function {refresh()} {open
   } {
-    code {volume->value(pars->PVolume);
-vsns->value(pars->PAmpVelocityScaleFunction);
-pan->value(pars->PPanning);
-
-stereo->value(pars->PStereo);
-
-
-pstr->value(pars->PPunchStrength);
-pt->value(pars->PPunchTime);
-pstc->value(pars->PPunchStretch);
-pvel->value(pars->PPunchVelocitySensing);
-
-detunevalueoutput->value(getdetune(pars->PDetuneType,0,pars->PDetune));
-detune->value(pars->PDetune-8192);
-
-int k=pars->PCoarseDetune/1024;if (k>=8) k-=16;
-octave->value(k);
-
-detunetype->value(pars->PDetuneType-1);
-k=pars->PCoarseDetune%1024;if (k>=512) k-=1024;
-coarsedet->value(k);
-
-hz440->value(pars->Pfixedfreq);
-fixedfreqetdial->value(pars->PfixedfreqET);
-
-amplfo->refresh();
+    code {amplfo->refresh();
 freqlfo->refresh();
 filterlfo->refresh();
 
@@ -880,25 +840,9 @@ filterui->refresh();
 /* harmonic structure parametrs */
 
 resui->refresh();
-if (oscui!=NULL) oscui->refresh();
-
-hpbasetype->value(pars->Php.base.type);
-hpbasepar1->value(pars->Php.base.par1);
-hpfreqmult->value(pars->Php.freqmult);
-
-hpmpar1->value(pars->Php.modulator.par1);
-hpmfreq->value(pars->Php.modulator.freq);
-hpwidth->value(pars->Php.width);
-
-hponehalf->value(pars->Php.onehalf);
-hpamptype->value(pars->Php.amp.type);
-hpampmode->value(pars->Php.amp.mode);
-hpamppar1->value(pars->Php.amp.par1);
-hpamppar2->value(pars->Php.amp.par2);
-hpautoscale->value(pars->Php.autoscale);
+if (oscui) oscui->refresh();
 
-bwdial->value(pars->Pbandwidth);
-if (pars->Pmode==0){
+if (spectrummode->value()==0){
    bwprofilegroup->activate();
    bwdial->activate();
    bwcents->activate();
@@ -914,23 +858,11 @@ if (pars->Pmode==0){
    bwscale->activate();
 };
 
-spectrummode->value(pars->Pmode);
-
-qbasenote->value(pars->Pquality.basenote);
-qsmpoct->value(pars->Pquality.smpoct);
-qoct->value(pars->Pquality.oct);
-qsamplesize->value(pars->Pquality.samplesize);
-
-hrpostype->value(pars->Phrpos.type);
-hrpospar1->value(pars->Phrpos.par1);
-hrpospar2->value(pars->Phrpos.par2);
-hrpospar3->value(pars->Phrpos.par3);
-
 hprofile->redraw();
 opui->update();
 
 osc->redraw();
-MiddleWare::preparePadSynth(location.c_str(), pars);
+//MiddleWare::preparePadSynth(location.c_str(), pars);
 applybutton->color(FL_GRAY);
 applybutton->parent()->redraw();} {}
   }
@@ -940,8 +872,6 @@ delete(resui);
 
 padnotewindow->hide();
 delete(padnotewindow);} {}
-  }
-  decl {PADnoteParameters *pars;} {public local
   }
   decl {OscilEditor *oscui;} {public local
   }
diff --git a/src/UI/PartUI.fl b/src/UI/PartUI.fl
index 0cd839bf..a3501c3f 100644
--- a/src/UI/PartUI.fl
+++ b/src/UI/PartUI.fl
@@ -1102,7 +1102,7 @@ if (kititem!=lastkititem){
     if (part->kit[kititem].padpars) {
       char buffer[1024];
       snprintf(buffer, 1024, "%skit%d/padpars/", part_path.c_str(), kititem); 
-      padnoteui=new PADnoteUI(part->kit[kititem].padpars, buffer, osc);
+      padnoteui=new PADnoteUI(buffer, osc);
       }
 
 };
-- 
2.47.0

