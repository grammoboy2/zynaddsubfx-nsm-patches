From f6c39c73a5d24472c22c0c73f38f7602c5e7f75c Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Sun, 10 Jan 2021 21:32:25 -0500
Subject: [PATCH 1704/1936] Convert some lurking tabs to spaces

---
 src/Effects/EQ.cpp                     |  8 ++++----
 src/Misc/Allocator.cpp                 | 14 +++++++-------
 src/Misc/MemLocker.h                   | 16 ++++++++--------
 src/Params/Controller.cpp              | 12 ++++++------
 src/Plugin/ZynAddSubFX/ZynAddSubFX.cpp |  6 +++---
 src/Synth/SUBnote.cpp                  |  2 +-
 src/Synth/SUBnote.h                    |  6 +++---
 src/Synth/SynthNote.cpp                |  2 +-
 src/Tests/AdNoteTest.h                 |  2 +-
 src/globals.h                          |  2 +-
 10 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/src/Effects/EQ.cpp b/src/Effects/EQ.cpp
index 1d8e809b..3db89e7f 100644
--- a/src/Effects/EQ.cpp
+++ b/src/Effects/EQ.cpp
@@ -154,8 +154,8 @@ void EQ::setvolume(unsigned char _Pvolume)
 
 unsigned char EQ::getpresetpar(unsigned char npreset, unsigned int npar)
 {
-#define	PRESET_SIZE 1
-#define	NUM_PRESETS 2
+#define PRESET_SIZE 1
+#define NUM_PRESETS 2
     static const unsigned char presets[NUM_PRESETS][PRESET_SIZE] = {
         {67}, //EQ 1
         {67}  //EQ 2
@@ -163,8 +163,8 @@ unsigned char EQ::getpresetpar(unsigned char npreset, unsigned int npar)
     if(npreset < NUM_PRESETS && npar < PRESET_SIZE) {
         return presets[npreset][npar];
     } else if (npar >= 10 && npar < (10 + MAX_EQ_BANDS * 5)) {
-	static const unsigned char bp_preset[5] = { 0, 64, 64, 64, 0 };
-	return bp_preset[npar % 5];
+        static const unsigned char bp_preset[5] = { 0, 64, 64, 64, 0 };
+        return bp_preset[npar % 5];
     }
     return 0;
 }
diff --git a/src/Misc/Allocator.cpp b/src/Misc/Allocator.cpp
index d9c5ae8a..c2f000f7 100644
--- a/src/Misc/Allocator.cpp
+++ b/src/Misc/Allocator.cpp
@@ -124,15 +124,15 @@ void AllocatorClass::addMemory(void *v, size_t mem_size)
 //From tlsf internals
 typedef struct block_header_t
 {
-	/* Points to the previous physical block. */
-	struct block_header_t* prev_phys_block;
+    /* Points to the previous physical block. */
+    struct block_header_t* prev_phys_block;
 
-	/* The size of this block, excluding the block header. */
-	size_t size;
+    /* The size of this block, excluding the block header. */
+    size_t size;
 
-	/* Next and previous free blocks. */
-	struct block_header_t* next_free;
-	struct block_header_t* prev_free;
+    /* Next and previous free blocks. */
+    struct block_header_t* next_free;
+    struct block_header_t* prev_free;
 } block_header_t;
 static const size_t block_header_free_bit = 1 << 0;
 #endif
diff --git a/src/Misc/MemLocker.h b/src/Misc/MemLocker.h
index b5e87fcc..dd7248e9 100644
--- a/src/Misc/MemLocker.h
+++ b/src/Misc/MemLocker.h
@@ -16,15 +16,15 @@ namespace zyn {
 //! Class to lock all pages in memory 
 class MemLocker
 {
-	bool isLocked = false;
+    bool isLocked = false;
 public:
-	MemLocker() = default;
-	~MemLocker() { unlock(); }
-	
-	//! try to lock all current and future pages, if not already locked
-	void lock();
-	//! try to unlock all pages, if locked
-	void unlock();
+    MemLocker() = default;
+    ~MemLocker() { unlock(); }
+
+    //! try to lock all current and future pages, if not already locked
+    void lock();
+    //! try to unlock all pages, if locked
+    void unlock();
 };
 
 }
diff --git a/src/Params/Controller.cpp b/src/Params/Controller.cpp
index 89f76a9b..9479e2ac 100644
--- a/src/Params/Controller.cpp
+++ b/src/Params/Controller.cpp
@@ -167,7 +167,7 @@ void Controller::setexpression(int value)
     expression.data = value;
     if(expression.receive != 0)
     {
-	assert( value <= 127 );	/* to protect what's left of JML's hearing */
+        assert( value <= 127 ); /* to protect what's left of JML's hearing */
 
         expression.relvolume = value / 127.0f;
     }
@@ -244,12 +244,12 @@ void Controller::setvolume(int value)
     if(volume.receive != 0)
     {
         /* volume.volume = powf(0.1f, (127 - value) / 127.0f * 2.0f); */
-	/* rather than doing something fancy that results in a value
-	 * of 0 not completely muting the output, do the reasonable
-	 * thing and just give the value the user ordered. */
-	assert( value <= 127 );
+        /* rather than doing something fancy that results in a value
+         * of 0 not completely muting the output, do the reasonable
+         * thing and just give the value the user ordered. */
+        assert( value <= 127 );
 
-	volume.volume = value / 127.0f;
+        volume.volume = value / 127.0f;
     }
     else
         volume.volume = 1.0f;
diff --git a/src/Plugin/ZynAddSubFX/ZynAddSubFX.cpp b/src/Plugin/ZynAddSubFX/ZynAddSubFX.cpp
index d2368a67..cc9596df 100644
--- a/src/Plugin/ZynAddSubFX/ZynAddSubFX.cpp
+++ b/src/Plugin/ZynAddSubFX/ZynAddSubFX.cpp
@@ -52,7 +52,7 @@ public:
                   thread.start(middleware);
           }
 
-	  void updateMiddleWare(zyn::MiddleWare* const mw) noexcept
+          void updateMiddleWare(zyn::MiddleWare* const mw) noexcept
           {
               middleware = mw;
           }
@@ -60,7 +60,7 @@ public:
       private:
           const bool wasRunning;
           MiddleWareThread& thread;
-	  zyn::MiddleWare* middleware;
+          zyn::MiddleWare* middleware;
 
           DISTRHO_PREVENT_HEAP_ALLOCATION
           DISTRHO_DECLARE_NON_COPY_CLASS(ScopedStopper)
@@ -509,7 +509,7 @@ private:
 
     void _initMaster()
     {
-	middleware = new zyn::MiddleWare(std::move(synth), &config);
+        middleware = new zyn::MiddleWare(std::move(synth), &config);
         middleware->setUiCallback(__uiCallback, this);
         middleware->setIdleCallback(__idleCallback, this);
         _masterChangedCallback(middleware->spawnMaster());
diff --git a/src/Synth/SUBnote.cpp b/src/Synth/SUBnote.cpp
index 10e54fd9..805442d3 100644
--- a/src/Synth/SUBnote.cpp
+++ b/src/Synth/SUBnote.cpp
@@ -30,7 +30,7 @@
 #include "../Misc/Allocator.h"
 
 #ifndef M_PI
-# define M_PI		3.14159265358979323846	/* pi */
+# define M_PI    3.14159265358979323846 /* pi */
 #endif
 
 namespace zyn {
diff --git a/src/Synth/SUBnote.h b/src/Synth/SUBnote.h
index 1e02e78a..32489394 100644
--- a/src/Synth/SUBnote.h
+++ b/src/Synth/SUBnote.h
@@ -38,9 +38,9 @@ class SUBnote:public SynthNote
 
         void setup(float velocity,
                    int portamento_,
-		   float note_log2_freq,
+                   float note_log2_freq,
                    bool legato = false, WatchManager *wm = 0, const char *prefix = 0);
-	float setupFilters(float basefreq, int *pos, bool automation);
+        float setupFilters(float basefreq, int *pos, bool automation);
         void computecurrentparameters();
         /*
          * Initialize envelopes and global filter
@@ -57,7 +57,7 @@ class SUBnote:public SynthNote
         int       numharmonics; //number of harmonics (after the too higher hamonics are removed)
         int       firstnumharmonics; //To keep track of the first note's numharmonics value, useful in legato mode.
         int       start; //how the harmonics start
-	float     note_log2_freq;
+        float     note_log2_freq;
         float     BendAdjust;
         float     OffsetHz;
         float     panning;
diff --git a/src/Synth/SynthNote.cpp b/src/Synth/SynthNote.cpp
index 1b78fe08..8000d9d0 100644
--- a/src/Synth/SynthNote.cpp
+++ b/src/Synth/SynthNote.cpp
@@ -133,7 +133,7 @@ void SynthNote::Legato::apply(SynthNote &note, float *outl, float *outr)
                         //previous freq during the fadeout.
                         const float catchupfreq_log2 = 2.0f * param.note_log2_freq - lastfreq_log2;
                         LegatoParams pars{param.vel, param.portamento,
-					  catchupfreq_log2, false, param.seed};
+                            catchupfreq_log2, false, param.seed};
                         note.legatonote(pars);
                         break;
                     }
diff --git a/src/Tests/AdNoteTest.h b/src/Tests/AdNoteTest.h
index 140b6ccb..06ae843e 100644
--- a/src/Tests/AdNoteTest.h
+++ b/src/Tests/AdNoteTest.h
@@ -74,7 +74,7 @@ class AdNoteTest:public CxxTest::TestSuite
                 float out = lfo->lfoout();
                 TS_ASSERT((-2.0f < out && out < 2.0f));
             }
-		}
+        }
 
 
 
diff --git a/src/globals.h b/src/globals.h
index 7d95f33b..ba0e9cc9 100644
--- a/src/globals.h
+++ b/src/globals.h
@@ -358,7 +358,7 @@ private:
 public:
     smooth_float() {
         init = false;
-	next_value = curr_value = 0.0f;
+        next_value = curr_value = 0.0f;
     };
     smooth_float(const float value) {
         init = true;
-- 
2.47.0

