From df00e32a2e2032926a99c96cb8f547fd0009fe38 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Fri, 13 May 2016 11:41:43 -0400
Subject: [PATCH 0900/1936] SUBnoteParameters: Adding Short Parameter Names

---
 src/Params/SUBnoteParameters.cpp | 51 ++++++++++++++++----------------
 1 file changed, 26 insertions(+), 25 deletions(-)

diff --git a/src/Params/SUBnoteParameters.cpp b/src/Params/SUBnoteParameters.cpp
index 924bef17..f998f727 100644
--- a/src/Params/SUBnoteParameters.cpp
+++ b/src/Params/SUBnoteParameters.cpp
@@ -31,50 +31,51 @@ using namespace rtosc;
 static const rtosc::Ports SUBnotePorts = {
     rSelf(SUBnoteParameters),
     rPaste,
-    rToggle(Pstereo, "Stereo Enable"),
-    rParamZyn(PVolume,  "Volume"),
-    rParamZyn(PPanning, "Left Right Panning"),
-    rParamZyn(PAmpVelocityScaleFunction, "Amplitude Velocity Sensing function"),
-    rParamI(PDetune, "Detune in detune type units"),
-    rParamI(PCoarseDetune, "Coarse Detune"),
+    rToggle(Pstereo,    rShort("stereo"), "Stereo Enable"),
+    rParamZyn(PVolume,  rShort("volume"), "Volume"),
+    rParamZyn(PPanning, rShort("panning"), "Left Right Panning"),
+    rParamZyn(PAmpVelocityScaleFunction, rShort("sense"), "Amplitude Velocity Sensing function"),
+    rParamI(PDetune,       rShort("detune"), "Detune in detune type units"),
+    rParamI(PCoarseDetune, rShort("cdetune"), "Coarse Detune"),
     //Real values needed
-    rOption(PDetuneType, rOptions("100 cents", "200 cents", "500 cents"), "Detune Scale"),
-    rToggle(PFreqEnvelopeEnabled, "Enable for Frequency Envelope"),
-    rToggle(PBandWidthEnvelopeEnabled, "Enable for Bandwidth Envelope"),
-    rToggle(PGlobalFilterEnabled, "Enable for Global Filter"),
-    rParamZyn(PGlobalFilterVelocityScale, "Filter Velocity Magnitude"),
-    rParamZyn(PGlobalFilterVelocityScaleFunction, "Filter Velocity Function Shape"),
+    rOption(PDetuneType,               rShort("det. scl."), rOptions("100 cents", "200 cents", "500 cents"), "Detune Scale"),
+    rToggle(PFreqEnvelopeEnabled,      rShort("enable"), "Enable for Frequency Envelope"),
+    rToggle(PBandWidthEnvelopeEnabled, rShort("enable"), "Enable for Bandwidth Envelope"),
+    rToggle(PGlobalFilterEnabled,                 rShort("enable"), "Enable for Global Filter"),
+    rParamZyn(PGlobalFilterVelocityScale,         rShort("scale"), "Filter Velocity Magnitude"),
+    rParamZyn(PGlobalFilterVelocityScaleFunction, rShort("sense"), "Filter Velocity Function Shape"),
     //rRecur(FreqEnvelope, EnvelopeParams),
     //rToggle(),//continue
-    rToggle(Pfixedfreq, "Base frequency fixed frequency enable"),
-    rParamZyn(PfixedfreqET, "Equal temeperate control for fixed frequency operation"),
-    rParamZyn(PBendAdjust,          "Pitch bend adjustment"),
-    rParamZyn(POffsetHz,            "Voice constant offset"),
+    rToggle(Pfixedfreq,     rShort("fixed freq"), "Base frequency fixed frequency enable"),
+    rParamZyn(PfixedfreqET, rShort("fixed ET"),   "Equal temeperate control for fixed frequency operation"),
+    rParamZyn(PBendAdjust,  rShort("bend"),       "Pitch bend adjustment"),
+    rParamZyn(POffsetHz,    rShort("+ Hz"),       "Voice constant offset"),
 #undef rChangeCb
 #define rChangeCb obj->updateFrequencyMultipliers(); if (obj->time) { \
     obj->last_update_timestamp = obj->time->time(); }
-    rParamI(POvertoneSpread.type, rMap(min, 0), rMap(max, 7),
+    rParamI(POvertoneSpread.type, rMap(min, 0), rMap(max, 7), rShort("spread type")
+            rOptions(Harmonic, ShiftU, ShiftL, PowerU, PowerL, Sine, Power, Shift),
             "Spread of harmonic frequencies"),
-    rParamI(POvertoneSpread.par1, rMap(min, 0), rMap(max, 255),
+    rParamI(POvertoneSpread.par1, rMap(min, 0), rMap(max, 255), rShort("p1"),
             "Overtone Parameter"),
-    rParamI(POvertoneSpread.par2, rMap(min, 0), rMap(max, 255),
+    rParamI(POvertoneSpread.par2, rMap(min, 0), rMap(max, 255), rShort("p2"),
             "Overtone Parameter"),
-    rParamI(POvertoneSpread.par3, rMap(min, 0), rMap(max, 255),
+    rParamI(POvertoneSpread.par3, rMap(min, 0), rMap(max, 255), rShort("p3"),
             "Overtone Parameter"),
 #undef rChangeCb
 #define rChangeCb if (obj->time) { obj->last_update_timestamp = obj->time->time(); }
-    rParamZyn(Pnumstages, rMap(min, 1), rMap(max, 5), "Number of filter stages"),
-    rParamZyn(Pbandwidth, "Bandwidth of filters"),
-    rParamZyn(Phmagtype, "How the magnitudes are computed (0=linear,1=-60dB,2=-60dB)"),
+    rParamZyn(Pnumstages, rShort("stages"), rMap(min, 1), rMap(max, 5), "Number of filter stages"),
+    rParamZyn(Pbandwidth, rShort("bandwidth"), "Bandwidth of filters"),
+    rParamZyn(Phmagtype,  rShort("mag. type"),"How the magnitudes are computed (0=linear,1=-60dB,2=-60dB)"),
     rArray(Phmag, MAX_SUB_HARMONICS, "Harmonic magnitudes"),
     rArray(Phrelbw, MAX_SUB_HARMONICS, "Relative bandwidth"),
-    rParamZyn(Pbwscale, "Bandwidth scaling with frequency"),
+    rParamZyn(Pbwscale, rShort("stretch"), "Bandwidth scaling with frequency"),
     rRecurp(AmpEnvelope,          "Amplitude envelope"),
     rRecurp(FreqEnvelope,         "Frequency Envelope"),
     rRecurp(BandWidthEnvelope,    "Bandwidth Envelope"),
     rRecurp(GlobalFilterEnvelope, "Post Filter Envelope"),
     rRecurp(GlobalFilter,         "Post Filter"),
-    rOption(Pstart, rOptions("zero", "random", "ones"), "How harmonics are initialized"),
+    rOption(Pstart, rShort("initial"), rOptions("zero", "random", "ones"), "How harmonics are initialized"),
 
     {"clear:", rDoc("Reset all harmonics to equal bandwidth/zero amplitude"), NULL, [](const char *, RtData &d)
         {
-- 
2.47.0

