From 204b67ac8f617d9a18269d5fa902e293a3ca8191 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Sat, 11 May 2013 23:51:40 -0400
Subject: [PATCH 0083/1936] ABS: Fl_Osc_Tree Populated with all entries

Not perfect, as this is currently going to result in some events getting applied
in the wrong thread, but one can now connect to ports lodged deeply in the tree
and see the right widgets wiggle around on the GUI side of thigns.
In this case the tested params were
/part0/kit0/adnote/voice0/oscil/basefuncmodulationpar1
/part0/kit0/adnote/voice0/oscil/basefuncmodulationpar2
/part0/kit0/adnote/voice0/oscil/basefuncmodulationpar3

Judging by the lack of Fl_Oscilloscope updates, I'm going to need to fuss with
when callbacks are spawned or include some of the info in the backend.
---
 src/Misc/Master.cpp     |  6 ++++
 src/Misc/Master.h       |  2 +-
 src/Misc/MiddleWare.cpp |  2 +-
 src/Misc/Util.h         |  3 --
 src/Synth/OscilGen.cpp  | 79 +++++++++++++++++++++--------------------
 src/UI/Fl_Osc_Tree.H    | 51 +++++++++++++++++++-------
 src/UI/OscilGenUI.fl    | 24 ++++++-------
 7 files changed, 97 insertions(+), 70 deletions(-)

diff --git a/src/Misc/Master.cpp b/src/Misc/Master.cpp
index 78119d49..297ee7f6 100644
--- a/src/Misc/Master.cpp
+++ b/src/Misc/Master.cpp
@@ -164,8 +164,14 @@ Master::Master()
         char loc_buf[1024];
         DataObj d{loc_buf, 1024, the_master, bToU};
         memset(loc_buf, sizeof(loc_buf), 0);
+        printf("sending an event to the owner of '%s'\n", m);
         Master::ports.dispatch(m+1, d);
     };
+
+    midi.error_cb = [](const char *a, const char *b)
+    {
+        fprintf(stderr, "MIDI- got an error '%s' -- '%s'\n");
+    };
 }
 
 void Master::defaults()
diff --git a/src/Misc/Master.h b/src/Misc/Master.h
index 81e36451..072bdf93 100644
--- a/src/Misc/Master.h
+++ b/src/Misc/Master.h
@@ -168,7 +168,7 @@ class Master
         //Statistics on output levels
         vuData vu;
 
-        rtosc::MidiTable<64,64> midi;
+        rtosc::MidiTable<1024,64> midi;
     private:
         bool   nullRun;
         float  sysefxvol[NUM_SYS_EFX][NUM_MIDI_PARTS];
diff --git a/src/Misc/MiddleWare.cpp b/src/Misc/MiddleWare.cpp
index eb3eec4c..42670384 100644
--- a/src/Misc/MiddleWare.cpp
+++ b/src/Misc/MiddleWare.cpp
@@ -537,7 +537,7 @@ class UI_Interface:public Fl_Osc_Interface
         void tryLink(const char *msg) override
         {
 
-            printf("trying the link for a '%s'\\n", msg);
+            printf("trying the link for a '%s'\n", msg);
             const char *handle = rindex(msg,'/');
             if(handle)
                 ++handle;
diff --git a/src/Misc/Util.h b/src/Misc/Util.h
index 74b1b903..f7d32f9a 100644
--- a/src/Misc/Util.h
+++ b/src/Misc/Util.h
@@ -164,10 +164,7 @@ const char *message_snip(const char *m);
         if(rtosc_narguments(m)==0) {\
             d.reply(d.loc, "c", ((type*)d.obj)->var); \
         } else if(rtosc_narguments(m)==1 && rtosc_type(m,0)=='c') {\
-            printf("looking at value %d\n", rtosc_argument(m,0).i); \
-            printf("limited value is %d\n", limit<char>(0,127,rtosc_argument(m,0).i)); \
             ((type*)d.obj)->var = limit<char>(rtosc_argument(m,0).i,0,127); \
-            printf("set " #var" to value %d\n", ((type*)d.obj)->var); \
             d.broadcast(d.loc, "c", ((type*)d.obj)->var);}}}
 
 ///Recur - perform a simple recursion
diff --git a/src/Synth/OscilGen.cpp b/src/Synth/OscilGen.cpp
index 21bef61f..0b47fd15 100644
--- a/src/Synth/OscilGen.cpp
+++ b/src/Synth/OscilGen.cpp
@@ -35,49 +35,50 @@ int main_thread = 0;
 
 #include <rtosc/ports.h>
 
-template<int i>
-void simpleset(const char *m, rtosc::RtData &d)
-{
-    unsigned char *addr = ((unsigned char*) d.obj)+i;
-    if(!rtosc_narguments(m))
-        d.reply(d.loc, "c", *addr);
-    else
-        *addr = rtosc_argument(m, 0).i;
-}
-#undef  PARAMC
-#define PARAMC(x) rtosc::Port{#x "::c", "::", NULL, \
-    simpleset<__builtin_offsetof(class OscilGen, P##x)>}
+//template<int i>
+//void simpleset(const char *m, rtosc::RtData &d)
+//{
+//    unsigned char *addr = ((unsigned char*) d.obj)+i;
+//    if(!rtosc_narguments(m))
+//        d.reply(d.loc, "c", *addr);
+//    else
+//        *addr = rtosc_argument(m, 0).i;
+//}
+//#undef  PARAMC
+//#define PARAMC(x) rtosc::Port{#x "::c", "::", NULL, \
+//    simpleset<__builtin_offsetof(class OscilGen, P##x)>}
+#define PC(x) PARAMC(OscilGen, P##x, x, "")
 
 static rtosc::Ports localPorts = {
-    PARAMC(hmagtype),
-    PARAMC(currentbasefunc),
-    PARAMC(basefuncpar),
-    PARAMC(basefuncpar),
-    PARAMC(basefuncmodulation),
-    PARAMC(basefuncmodulationpar1),
-    PARAMC(basefuncmodulationpar2),
-    PARAMC(basefuncmodulationpar3),
-    PARAMC(waveshaping),
-    PARAMC(waveshapingfunction),
-    PARAMC(filtertype),
-    PARAMC(filterpar1),
-    PARAMC(filterpar2),
-    PARAMC(filterbeforews),
-    PARAMC(satype),
-    PARAMC(sapar),
+    PC(hmagtype),
+    PC(currentbasefunc),
+    PC(basefuncpar),
+    PC(basefuncpar),
+    PC(basefuncmodulation),
+    PC(basefuncmodulationpar1),
+    PC(basefuncmodulationpar2),
+    PC(basefuncmodulationpar3),
+    PC(waveshaping),
+    PC(waveshapingfunction),
+    PC(filtertype),
+    PC(filterpar1),
+    PC(filterpar2),
+    PC(filterbeforews),
+    PC(satype),
+    PC(sapar),
     //FIXME missing int stuff
-    PARAMC(modulation),
-    PARAMC(modulationpar1),
-    PARAMC(modulationpar2),
-    PARAMC(modulationpar3),
+    PC(modulation),
+    PC(modulationpar1),
+    PC(modulationpar2),
+    PC(modulationpar3),
     //FIXME realtime parameters lurking below
-    PARAMC(rand),
-    PARAMC(amprandpower),
-    PARAMC(amprandtype),
-    PARAMC(adaptiveharmonics),
-    PARAMC(adaptiveharmonicsbasefreq),
-    PARAMC(adaptiveharmonicspower),
-    PARAMC(adaptiveharmonicspar),
+    PC(rand),
+    PC(amprandpower),
+    PC(amprandtype),
+    PC(adaptiveharmonics),
+    PC(adaptiveharmonicsbasefreq),
+    PC(adaptiveharmonicspower),
+    PC(adaptiveharmonicspar),
 
     {"phase#128::c", "::Sets harmonic phase",
         NULL, [](const char *m, rtosc::RtData &d) {
diff --git a/src/UI/Fl_Osc_Tree.H b/src/UI/Fl_Osc_Tree.H
index a9dfe9d5..4f73c6c4 100644
--- a/src/UI/Fl_Osc_Tree.H
+++ b/src/UI/Fl_Osc_Tree.H
@@ -16,6 +16,22 @@ class Fl_Osc_Tree: public Fl_Tree
             callback(Fl_Osc_Tree::cb, NULL);
         }
 
+        void sprout(std::string s)
+        {
+            if(s[s.length()-1] == '/') {
+                attach(s);
+                attach(s+"nil");
+                close(s.c_str());
+            } else
+                attach(s);
+        }
+
+        void attach(std::string s)
+        {
+            if(!find_item(s.c_str()))
+                add(s.c_str());
+        }
+
         static void cb(Fl_Widget *w, void*)
         {
             using namespace rtosc;
@@ -37,20 +53,30 @@ class Fl_Osc_Tree: public Fl_Tree
             if(reason==3) //Populate fields
             {
                 const Ports &p = *Fl_Osc_Tree::subtree_lookup(t->root_ports,pathname+1);
+                printf("ok, I got the tree\n");
                 if(auto *i = t->find_item((std::string(pathname)+"/"+"nil").c_str()))
                     t->remove(i);
                 for(const Port &port : p) {
-                    bool subnodes = index(port.name, '/');
-                    string path = std::string(pathname)+"/"+port.name;
-                    if(subnodes) {
-                        if(!t->find_item(path.c_str()))
-                            t->add(path.c_str());
-                        if(!t->find_item((path+"nil").c_str()))
-                            t->add((path+"nil").c_str());
-                        t->close(path.c_str());
+                    printf("handling '%s'\n", port.name);
+                    const bool subnodes   = index(port.name, '/');
+                    const bool enumerated = index(port.name, '#');
+                    const string path = std::string(pathname)+"/"+port.name;
+                    if(!enumerated) {
+                        t->sprout(path);
                     } else {
-                        if(!t->find_item(path.c_str()))
-                            t->add(path.c_str());
+                        char tmpa[1024];
+                        char tmpb[1024];
+                        strncpy(tmpa, path.c_str(), 1024);
+                        char *pound = index(tmpa, '#');
+                        int N = atoi(pound+1);
+                        *pound = 0;
+                        char terminal = subnodes ? '/' : '\0';
+
+                        for(int i = 0; i < N; ++i) {
+                            snprintf(tmpb, 1024, "%s%d%c",
+                                    tmpa, i, terminal);
+                            t->sprout(tmpb);
+                        }
                     }
                 }
 
@@ -70,8 +96,9 @@ class Fl_Osc_Tree: public Fl_Tree
                 const char *name  = port.name;
                 if(!index(name, '/'))//only accept objects that will have subports
                     continue;
-                if(s.substr(0,strlen(name)) == name) {
-                    return subtree_lookup(port.ports, s.substr(strlen(name)));
+                if(rtosc_match(name, s.c_str())) {
+                    return subtree_lookup(port.ports,
+                            s.substr(index(s.c_str(), '/')-s.c_str()+1));
                 }
             }
 
diff --git a/src/UI/OscilGenUI.fl b/src/UI/OscilGenUI.fl
index d443416a..687399b2 100644
--- a/src/UI/OscilGenUI.fl
+++ b/src/UI/OscilGenUI.fl
@@ -111,7 +111,7 @@ class Oscilharmonic {: {public Fl_Group}
   Function {make_window()} {open private
   } {
     Fl_Window harmonic {open
-      private xywh {464 756 100 225} type Double box NO_BOX
+      private xywh {467 756 100 225} type Double box NO_BOX
       class Fl_Osc_Group visible
     } {
       Fl_Slider mag {
@@ -130,8 +130,7 @@ if (x==64) o->selection_color(0);
  o->osc->requestValue(o->loc+"spectrum");
  o->osc->requestValue(o->loc+"waveform");
 
-display->redraw();
-}
+display->redraw();}
         xywh {0 15 15 115} type {Vert Knob} box NO_BOX selection_color 222 maximum 127 step 1 value 64
         code0 {o->phase=false;//o->value(127-oscil->Phmag[n]);}
         code1 {//if (oscil->Phmag[n]==64) o->selection_color(0);}
@@ -147,8 +146,7 @@ o->osc->requestValue(o->loc+"prepare");
 o->osc->requestValue(o->loc+"spectrum");
 o->osc->requestValue(o->loc+"waveform");
 
-display->redraw();
-}
+display->redraw();}
         xywh {0 135 15 75} type {Vert Knob} box NO_BOX selection_color 222 maximum 127 step 1 value 64
         code0 {o->phase=true;//o->value(oscil->Phphase[n]);}
         class PSlider
@@ -173,8 +171,7 @@ display->redraw();
   }
   Function {Oscilharmonic(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
     code {n=0;
-display=NULL;
-} {}
+display=NULL;} {}
   }
   Function {init(int n_,Fl_Group *display_, std::string loc_, Fl_Osc_Interface *osc_)} {open
   } {
@@ -232,7 +229,7 @@ class OscilEditor {open : {public PresetsUI_}
   } {
     Fl_Window osceditUI {
       label {ADsynth Oscillator Editor} open
-      xywh {52 386 735 595} type Double
+      xywh {52 100 735 595} type Double
       code0 {//if (oscil->ADvsPAD) o->label("PADsynth Harmonic Content Editor");} visible
     } {
       Fl_Group dummy {open
@@ -247,7 +244,7 @@ class OscilEditor {open : {public PresetsUI_}
 //	cbapplywidget->do_callback();
 //	cbapplywidget->color(FL_GRAY);
 //	cbapplywidget->redraw();
-//};} selected
+//};}
           xywh {305 285 60 20} box THIN_UP_BOX labelfont 1
           code0 {if(adnotep) o->hide();}
           code1 {dummy->pane_name = loc;}
@@ -448,7 +445,7 @@ redrawoscil();
             label {Par.}
             xywh {495 290 25 15} labelsize 12 minimum -63 maximum 63 step 1
           }
-          Fl_Group basefuncmodulation {
+          Fl_Group basefuncmodulation {open
             xywh {555 281 169 25} box UP_FRAME
             code0 {//if ((oscil->Pcurrentbasefunc==0)||(oscil->Pcurrentbasefunc==127)) basefuncmodulation->deactivate();}
           } {
@@ -491,9 +488,9 @@ redrawoscil();}
               class Fl_Osc_Dial
             }
             Fl_Dial bfmodpar3 {
-              callback {redrawoscil();}
+              callback {redrawoscil();} selected
               tooltip {Oscillator's modulation parameter 3} xywh {704 286 15 15} maximum 127 step 1
-              code0 {o->init("basefunctionmodulationpar3");}
+              code0 {o->init("basefuncmodulationpar3");}
               class Fl_Osc_Dial
             }
           }
@@ -1034,8 +1031,7 @@ oscilo_base->update();
 oscils_base->update();
 
 //oscildisplaygroup->redraw();
-//basefuncdisplaygroup->redraw();
-} {}
+//basefuncdisplaygroup->redraw();} {}
   }
   decl {Oscilharmonic *h[MAX_AD_HARMONICS];} {private local
   }
-- 
2.47.0

