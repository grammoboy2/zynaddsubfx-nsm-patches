From 195de5fe4ce3bdd103fc154e5748e738c7a069e6 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Wed, 13 Jul 2016 16:14:18 -0400
Subject: [PATCH 0942/1936] Add More OSC Metadata

---
 src/Effects/Alienwah.cpp         | 45 ++++++----------------------
 src/Effects/Chorus.cpp           | 50 +++++++-------------------------
 src/Effects/Distorsion.cpp       | 46 +++++++----------------------
 src/Effects/Echo.cpp             | 23 +++++++++++++++
 src/Effects/Echo.h               |  2 ++
 src/Effects/Effect.h             | 21 ++++++++++++++
 src/Effects/EffectMgr.cpp        | 16 ++++++++--
 src/Effects/Phaser.cpp           | 32 ++++++++++++++++++++
 src/Effects/Phaser.h             |  1 +
 src/Misc/Master.cpp              |  6 +++-
 src/Params/PADnoteParameters.cpp | 18 +++++++++++-
 11 files changed, 144 insertions(+), 116 deletions(-)

diff --git a/src/Effects/Alienwah.cpp b/src/Effects/Alienwah.cpp
index 2c06f8fe..18a36ba1 100644
--- a/src/Effects/Alienwah.cpp
+++ b/src/Effects/Alienwah.cpp
@@ -29,42 +29,15 @@ rtosc::Ports Alienwah::ports = {
                   rBegin;
                   rEnd},
     //Pvolume/Ppanning are common
-    {"Pfreq::i", rShort("freq")
-                   rDoc("Effect Frequency"), 0,
-                   rBegin;
-                   rEnd},
-    {"Pfreqrnd::i", rShort("rand")
-                    rDoc("Frequency Randomness"), 0,
-                    rBegin;
-                    rEnd},
-    {"PLFOtype::i", rShort("shape")
-                    rDoc("LFO Shape"), 0,
-                    rBegin;
-                    rEnd},
-    {"PStereo::T:F", rShort("stereo")
-                     rDoc("Stereo/Mono Mode"), 0,
-                     rBegin;
-                     rEnd},
-    {"Pdepth::i", rShort("depth")
-                  rDoc("LFO Depth"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pfeedback::i", rShort("fb")
-                  rDoc("Feedback"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pdelay::i", rShort("delay")
-                  rDoc("Delay"), 0,
-                  rBegin;
-                  rEnd},
-    {"Plrcross::i", rShort("l/r")
-                  rDoc("Left/Right Crossover"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pphase::i", rShort("phase")
-                  rDoc("Phase"), 0,
-                  rBegin;
-                  rEnd},
+    rEffPar(Pfreq,     2, rShort("freq"), "Effect Frequency"),
+    rEffPar(Pfreqrnd,  3, rShort("rand"), "Frequency Randomness"),
+    rEffPar(PLFOtype,  4, rShort("shape"), "LFO Shape"),
+    rEffParTF(PStereo, 5, rShort("stereo"), "Stereo/Mono Mode"),
+    rEffPar(Pdepth,    6, rShort("depth"), "LFO Depth"),
+    rEffPar(Pfeedback, 7, rShort("fb"), "Feedback"),
+    rEffPar(Pdelay,    8, rShort("delay"), "Delay"),
+    rEffPar(Plrcross,  9, rShort("l/r"), "Left/Right Crossover"),
+    rEffPar(Pphase,   10, rShort("phase"), "Phase"),
 };
 #undef rBegin
 #undef rEnd
diff --git a/src/Effects/Chorus.cpp b/src/Effects/Chorus.cpp
index 28777722..1d97e3b2 100644
--- a/src/Effects/Chorus.cpp
+++ b/src/Effects/Chorus.cpp
@@ -30,46 +30,16 @@ rtosc::Ports Chorus::ports = {
                   rBegin;
                   rEnd},
     //Pvolume/Ppanning are common
-    {"Pfreq::i", rShort("freq")
-                   rDoc("Effect Frequency"), 0,
-                   rBegin;
-                   rEnd},
-    {"Pfreqrnd::i", rShort("rand")
-                    rDoc("Frequency Randomness"), 0,
-                    rBegin;
-                    rEnd},
-    {"PLFOtype::i", rShort("shape")
-                    rDoc("LFO Shape"), 0,
-                    rBegin;
-                    rEnd},
-    {"PStereo::T:F", rShort("stereo")
-                     rDoc("Stereo/Mono Mode"), 0,
-                     rBegin;
-                     rEnd},
-    {"Pdepth::i", rShort("depth")
-                  rDoc("LFO Depth"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pdelay::i", rShort("delay")
-                  rDoc("Delay"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pfeedback::i", rShort("fb")
-                  rDoc("Feedback"), 0,
-                  rBegin;
-                  rEnd},
-    {"Plrcross::i", rShort("l/r")
-                  rDoc("Left/Right Crossover"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pflangemode::T:F", rShort("flange")
-                  rDoc("Flange Mode"), 0,
-                  rBegin;
-                  rEnd},
-    {"Poutsub::T:F", rShort("sub")
-                  rDoc("Output Subtraction"), 0,
-                  rBegin;
-                  rEnd},
+    rEffPar(Pfreq,    2, rShort("freq"), "Effect Frequency"),
+    rEffPar(Pfreqrnd, 3, rShort("rand"), "Frequency Randomness"),
+    rEffPar(PLFOtype, 4, rShort("shape"), "LFO Shape"),
+    rEffParTF(PStereo,5, rShort("stereo"), "Stereo/Mono Mode"),
+    rEffPar(Pdepth,   6, rShort("depth"), "LFO Depth"),
+    rEffPar(Pdelay,   7, rShort("delay"), "Delay"),
+    rEffPar(Pfeedback,8, rShort("fb"), "Feedback"),
+    rEffPar(Plrcross, 9, rShort("l/r"), "Left/Right Crossover"),
+    rEffParTF(Pflangemode, 10, rShort("flange"), "Flange Mode"),
+    rEffParTF(Poutsub, 11, rShort("sub"), "Output Subtraction"),
 };
 #undef rBegin
 #undef rEnd
diff --git a/src/Effects/Distorsion.cpp b/src/Effects/Distorsion.cpp
index 2abbad6a..fe5c127f 100644
--- a/src/Effects/Distorsion.cpp
+++ b/src/Effects/Distorsion.cpp
@@ -29,42 +29,16 @@ rtosc::Ports Distorsion::ports = {
                   rBegin;
                   rEnd},
     //Pvolume/Ppanning are common
-    {"Plrcross::i", rShort("l/r")
-                  rDoc("Left/Right Crossover"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pdrive::i", rShort("drive")
-                   rDoc("Input amplification"), 0,
-                   rBegin;
-                   rEnd},
-    {"Plevel::i", rShort("output")
-                    rDoc("Output amplification"), 0,
-                    rBegin;
-                    rEnd},
-    {"Ptype::i", rShort("type")
-                    rDoc("Distortion Shape"), 0,
-                    rBegin;
-                    rEnd},
-    {"Pnegate::T:F", rShort("neg")
-                     rDoc("Negate Signal"), 0,
-                     rBegin;
-                     rEnd},
-    {"Plpf::i", rShort("lpf")
-                  rDoc("Low Pass Cutoff"), 0,
-                  rBegin;
-                  rEnd},
-    {"Phpf::i", rShort("hpf")
-                  rDoc("High Pass Cutoff"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pstereo::T:F", rShort("stereo")
-                  rDoc("Stereo"), 0,
-                  rBegin;
-                  rEnd},
-    {"Pprefiltering::T:F", rShort("p.filt")
-                  rDoc("Filtering before/after non-linearity"), 0,
-                  rBegin;
-                  rEnd},
+    rEffPar(Plrcross, 2, rShort("l/r") "Left/Right Crossover"),
+    rEffPar(Pdrive,   3, rShort("drive"), "Input amplification"),
+    rEffPar(Plevel,   4, rShort("output"), "Output amplification"),
+    rEffPar(Ptype,    5, rShort("type"), "Distortion Shape"),
+    rEffParTF(Pnegate, 6, rShort("neg"), "Negate Signal"),
+    rEffPar(Plpf, 7, rShort("lpf"), "Low Pass Cutoff"),
+    rEffPar(Phpf, 8, rShort("hpf"), "High Pass Cutoff"),
+    rEffParTF(Pstereo, 9, rShort("stereo"), "Stereo"),
+    rEffParTF(Pprefiltering, 10, rShort("p.filt"),
+                  "Filtering before/after non-linearity"),
 };
 #undef rBegin
 #undef rEnd
diff --git a/src/Effects/Echo.cpp b/src/Effects/Echo.cpp
index 9ff79348..9858f31e 100644
--- a/src/Effects/Echo.cpp
+++ b/src/Effects/Echo.cpp
@@ -14,11 +14,34 @@
 */
 
 #include <cmath>
+#include <rtosc/ports.h>
+#include <rtosc/port-sugar.h>
 #include "../Misc/Allocator.h"
 #include "Echo.h"
 
 #define MAX_DELAY 2
 
+#define rObject Echo
+#define rBegin [](const char *, rtosc::RtData &) {
+#define rEnd }
+
+rtosc::Ports Echo::ports = {
+    {"preset::i", rOptions(Echo 1, Echo 2, Echo 3, Simple Echo, Canyon, Panning Echo 1, Panning Echo 2, Panning Echo 3, Feedback Echo)
+                  rProp(parameter)
+                  rDoc("Instrument Presets"), 0,
+                  rBegin;
+                  rEnd},
+    //Pvolume/Ppanning are common
+    rEffPar(Pdelay,   2, rShort("delay"),    "Length of Echo"),
+    rEffPar(Plrdelay, 3, rShort("lr delay"), "Difference In Left/Right Delay"),
+    rEffPar(Plrcross, 4, rShort("cross"),    "Left/Right Crossover"),
+    rEffPar(Pfb,      5, rShort("feedback"), "Echo Feedback"),
+    rEffPar(Phidamp,  6, rShort("damp"),     "Dampen High Frequencies"),
+};
+#undef rBegin
+#undef rEnd
+#undef rObject
+
 Echo::Echo(EffectParams pars)
     :Effect(pars),
       Pvolume(50),
diff --git a/src/Effects/Echo.h b/src/Effects/Echo.h
index 5316369b..be4420db 100644
--- a/src/Effects/Echo.h
+++ b/src/Effects/Echo.h
@@ -59,6 +59,8 @@ class Echo:public Effect
         unsigned char getpar(int npar) const;
         int getnumparams(void);
         void cleanup(void);
+
+        static rtosc::Ports ports;
     private:
         //Parameters
         unsigned char Pvolume;  /**<#1 Volume or Dry/Wetness*/
diff --git a/src/Effects/Effect.h b/src/Effects/Effect.h
index 667f0939..36d8ea8b 100644
--- a/src/Effects/Effect.h
+++ b/src/Effects/Effect.h
@@ -22,6 +22,27 @@
 class FilterParams;
 class Allocator;
 
+#ifndef rEffPar
+#define rEffPar(name, idx, ...) \
+  {STRINGIFY(name) "::i",  rProp(parameter) DOC(__VA_ARGS__), NULL, rEffParCb(idx)}
+#define rEffParTF(name, idx, ...) \
+  {STRINGIFY(name) "::T:F",  rProp(parameter) DOC(__VA_ARGS__), NULL, rEffParTFCb(idx)}
+#define rEffParCb(idx) \
+    [](const char *msg, rtosc::RtData &d) {\
+        rObject &obj = *(rObject*)d.obj; \
+        if(rtosc_narguments(msg)) \
+            obj.changepar(idx, rtosc_argument(msg, 0).i); \
+        else \
+            d.reply(d.loc, "i", obj.getpar(idx));}
+#define rEffParTFCb(idx) \
+    [](const char *msg, rtosc::RtData &d) {\
+        rObject &obj = *(rObject*)d.obj; \
+        if(rtosc_narguments(msg)) \
+            obj.changepar(idx, rtosc_argument(msg, 0).T*127); \
+        else \
+            d.reply(d.loc, obj.getpar(idx)?"T":"F");}
+#endif
+
 struct EffectParams
 {
     /**
diff --git a/src/Effects/EffectMgr.cpp b/src/Effects/EffectMgr.cpp
index 56badb86..2988dd6a 100644
--- a/src/Effects/EffectMgr.cpp
+++ b/src/Effects/EffectMgr.cpp
@@ -33,6 +33,14 @@
 
 
 #define rObject EffectMgr
+#define rSubtype(name) \
+    {STRINGIFY(name)"/", NULL, &name::ports,\
+        [](const char *msg, rtosc::RtData &data){\
+            rObject &o = *(rObject*)data.obj; \
+            data.obj = o.efx; \
+            SNIP \
+            name::ports.dispatch(msg, data); \
+        }}
 static const rtosc::Ports local_ports = {
     rSelf(EffectMgr),
     rPaste,
@@ -94,7 +102,9 @@ static const rtosc::Ports local_ports = {
             eq->getFilter(a,b);
             d.reply(d.loc, "bb", sizeof(a), a, sizeof(b), b);
         }},
-    {"efftype::i", rProp(parameter) rDoc("Get Effect Type"), NULL,
+    {"efftype::i", rOptions(Disabled, Reverb, Echo, Chorus,
+            Phaser, Alienwah, Distorsion, EQ, DynamicFilter)
+            rProp(parameter) rDoc("Get Effect Type"), NULL,
         [](const char *m, rtosc::RtData &d)
         {
             EffectMgr *eff  = (EffectMgr*)d.obj;
@@ -121,7 +131,9 @@ static const rtosc::Ports local_ports = {
             //Return the old data for distruction
             d.reply("/free", "sb", "EffectMgr", sizeof(EffectMgr*), &eff_);
         }},
-
+    rSubtype(Echo),
+    rSubtype(Alienwah),
+    rSubtype(Distorsion),
 };
 
 const rtosc::Ports &EffectMgr::ports = local_ports;
diff --git a/src/Effects/Phaser.cpp b/src/Effects/Phaser.cpp
index 363c7770..5a34a54a 100644
--- a/src/Effects/Phaser.cpp
+++ b/src/Effects/Phaser.cpp
@@ -17,11 +17,43 @@
 
 #include <cmath>
 #include <algorithm>
+#include <rtosc/ports.h>
+#include <rtosc/port-sugar.h>
 #include "../Misc/Allocator.h"
 #include "Phaser.h"
 
 using namespace std;
 
+#define rObject Phaser
+#define rBegin [](const char *, rtosc::RtData &) {
+#define rEnd }
+
+rtosc::Ports Phaser::ports = {
+    {"preset::i", rOptions(Alienwah 1, Alienwah 2, Alienwah 3, Alienwah 4)
+                  rDoc("Instrument Presets"), 0,
+                  rBegin;
+                  rEnd},
+    //Pvolume/Ppanning are common
+    rEffPar(lfo.Pfreq, 2, ""),
+    rEffPar(lfo.Prandomness, 3, ""),
+    rEffPar(lfo.PLFOtype, 4, ""),
+    rEffPar(lfo.Pstereo, 5, ""),
+    rEffPar(Pdepth, 6, ""),
+    rEffPar(Pfb, 7, ""),
+    rEffPar(Pstages, 8, ""),
+    rEffPar(Plrcross, 9, ""),
+    rEffPar(Poffset, 9, ""),
+    rEffParTF(Poutsub, 10, ""),
+    rEffPar(Pphase, 11, ""),
+    rEffPar(Pwidth, 11, ""),
+    rEffPar(Phyper, 12, ""),
+    rEffPar(Pdistortion, 13, ""),
+    rEffPar(Panalog, 14, ""),
+};
+#undef rBegin
+#undef rEnd
+#undef rObject
+
 #define PHASER_LFO_SHAPE 2
 #define ONE_  0.99999f        // To prevent LFO ever reaching 1.0f for filter stability purposes
 #define ZERO_ 0.00001f        // Same idea as above.
diff --git a/src/Effects/Phaser.h b/src/Effects/Phaser.h
index b572aafc..b62078f2 100644
--- a/src/Effects/Phaser.h
+++ b/src/Effects/Phaser.h
@@ -34,6 +34,7 @@ class Phaser:public Effect
         unsigned char getpar(int npar) const;
         void cleanup();
 
+        static rtosc::Ports ports;
     private:
         //Phaser parameters
         EffectLFO     lfo;          //Phaser modulator
diff --git a/src/Misc/Master.cpp b/src/Misc/Master.cpp
index 713c3abc..d36a4302 100644
--- a/src/Misc/Master.cpp
+++ b/src/Misc/Master.cpp
@@ -116,7 +116,11 @@ static const Ports master_ports = {
     rRecursp(insefx, 8, "Insertion Effect"),//NUM_INS_EFX
     rRecur(microtonal, "Micrtonal Mapping Functionality"),
     rRecur(ctl, "Controller"),
-    rArrayI(Pinsparts, NUM_INS_EFX, "Part to insert part onto"),
+    rArrayI(Pinsparts, NUM_INS_EFX, rOpt(-1, Master),
+            rOptions(Part1, Part2, Part3, Part4,  Part5, Part6,
+                 Part7, Part8, Part9, Part10, Part11, Part12,
+                 Part13, Part14, Part15, Part16),
+                "Part to insert part onto"),
     {"Pkeyshift::i", rShort("key shift") rProp(parameter) rLinear(0,127) rDoc("Global Key Shift"), 0, [](const char *m, RtData&d) {
         if(rtosc_narguments(m)==0) {
             d.reply(d.loc, "i", ((Master*)d.obj)->Pkeyshift);
diff --git a/src/Params/PADnoteParameters.cpp b/src/Params/PADnoteParameters.cpp
index 4867dc9f..8b5257bd 100644
--- a/src/Params/PADnoteParameters.cpp
+++ b/src/Params/PADnoteParameters.cpp
@@ -226,8 +226,24 @@ static const rtosc::Ports non_realtime_ports =
             float *tmp = new float[n];
             float realbw = p->getprofile(tmp, n);
             d.reply(d.loc, "b", n*sizeof(float), tmp);
-            d.reply(d.loc, "i", realbw);
+            d.reply(d.loc, "i", (int)realbw);
             delete[] tmp;}},
+    {"harmonic_profile:", rProp(non-realtime) rDoc("UI display of the harmonic profile"),
+        NULL, [](const char *m, rtosc::RtData &d) {
+            PADnoteParameters *p = ((PADnoteParameters*)d.obj);
+#define RES 512
+            char        types[RES+2] = {0};
+            rtosc_arg_t args[RES+1];
+            float tmp[RES];
+            types[0]  = 'f';
+            args[0].f = p->getprofile(tmp, RES);
+            for(int i=0; i<RES; ++i) {
+                types[i+1]  = 'f';
+                args[i+1].f = tmp[i];
+            }
+            d.replyArray(d.loc, types, args);
+#undef RES
+        }},
     {"needPrepare:", rDoc("Unimplemented Stub"),
         NULL, [](const char *, rtosc::RtData&) {}},
 };
-- 
2.47.0

