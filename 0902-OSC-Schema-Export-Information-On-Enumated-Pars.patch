From f0de0b1265705188705e120a3f4e8195774678e3 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Fri, 13 May 2016 14:09:25 -0400
Subject: [PATCH 0902/1936] OSC-Schema: Export Information On Enumated Pars

---
 src/Misc/Schema.cpp              | 35 ++++++++++++++++++++++++++++----
 src/Params/SUBnoteParameters.cpp |  4 ++--
 2 files changed, 33 insertions(+), 6 deletions(-)

diff --git a/src/Misc/Schema.cpp b/src/Misc/Schema.cpp
index 2b23675a..7a073664 100644
--- a/src/Misc/Schema.cpp
+++ b/src/Misc/Schema.cpp
@@ -12,6 +12,7 @@ using namespace rtosc;
  *   - 'tooltip'   : string [OPTIONAL]
  *   - 'type'      : type
  *   - 'domain'    : range [OPTIONAL]
+ *   - 'options'   : [option...] [OPTIONAL]
  * type : {'int', 'float', 'boolean'}
  * action :
  *   - 'path' : path-id
@@ -19,6 +20,9 @@ using namespace rtosc;
  * arg :
  *   - 'type'   : type
  *   - 'domain' : range [OPTIONAL]
+ * option :
+ *   - 'id'    : id-number
+ *   - 'value' : string-rep
  */
 
 void walk_ports2(const rtosc::Ports *base,
@@ -100,12 +104,14 @@ static ostream &add_options(ostream &o, Port::MetaContainer meta)
 static bool first = true;
 void dump_param_cb(const rtosc::Port *p, const char *name, void *v)
 {
+    typedef std::vector<std::pair<int,std::string>> opts;
     std::ostream &o  = *(std::ostream*)v;
     auto meta        = p->meta();
     const char *args = strchr(p->name, ':');
     auto mparameter  = meta.find("parameter");
     auto mdoc        = meta.find("documentation");
     auto msname      = meta.find("shortname");
+    opts options;
     string doc;
 
     //Escape Characters
@@ -154,6 +160,15 @@ void dump_param_cb(const rtosc::Port *p, const char *name, void *v)
     const char *min = meta["min"];
     const char *max = meta["max"];
 
+    for(auto m:meta) {
+        if(strlen(m.title) >= 5 && !bcmp(m.title, "map ", 4)) {
+            int id = atoi(m.title+4);
+            std::string val = m.value;
+            options.push_back(std::make_pair(id, val));
+            printf("PUSHING ONTO THE OPTIONS\n");
+        }
+    }
+
     if(!first)
         o << ",\n";
     else
@@ -167,10 +182,22 @@ void dump_param_cb(const rtosc::Port *p, const char *name, void *v)
     o << "        \"tooltip\"  : \"" << doc  << "\",\n";
     o << "        \"type\"     : \"" << type  << "\"";
     if(min && max)
-    o << ",\n        \"range\"    : [" << min << "," << max << "]\n";
-    else
-        o << "\n";
-    o << "    }";
+        o << ",\n        \"range\"    : [" << min << "," << max << "]";
+    if(!options.empty()) {
+        o << ",\n        \"options\"  : [\n";
+        int N = options.size();
+        for(int i=0; i<N; ++i) {
+            o << "        {\n";
+            o << "            \"id\"     : "   << options[i].first << ",\n";
+            o << "            \"value\"  : \"" << options[i].second << "\"\n";
+            o << "        }";
+            if(i != N-1)
+                o << ",";
+            o << "\n";
+        }
+        o << "        ]";
+    }
+    o << "\n    }";
 }
 
 void dump_json(std::ostream &o, const rtosc::Ports &p)
diff --git a/src/Params/SUBnoteParameters.cpp b/src/Params/SUBnoteParameters.cpp
index f998f727..44a75b34 100644
--- a/src/Params/SUBnoteParameters.cpp
+++ b/src/Params/SUBnoteParameters.cpp
@@ -38,7 +38,7 @@ static const rtosc::Ports SUBnotePorts = {
     rParamI(PDetune,       rShort("detune"), "Detune in detune type units"),
     rParamI(PCoarseDetune, rShort("cdetune"), "Coarse Detune"),
     //Real values needed
-    rOption(PDetuneType,               rShort("det. scl."), rOptions("100 cents", "200 cents", "500 cents"), "Detune Scale"),
+    rOption(PDetuneType,               rShort("det. scl."), rOptions(100 cents, 200 cents, 500 cents), "Detune Scale"),
     rToggle(PFreqEnvelopeEnabled,      rShort("enable"), "Enable for Frequency Envelope"),
     rToggle(PBandWidthEnvelopeEnabled, rShort("enable"), "Enable for Bandwidth Envelope"),
     rToggle(PGlobalFilterEnabled,                 rShort("enable"), "Enable for Global Filter"),
@@ -75,7 +75,7 @@ static const rtosc::Ports SUBnotePorts = {
     rRecurp(BandWidthEnvelope,    "Bandwidth Envelope"),
     rRecurp(GlobalFilterEnvelope, "Post Filter Envelope"),
     rRecurp(GlobalFilter,         "Post Filter"),
-    rOption(Pstart, rShort("initial"), rOptions("zero", "random", "ones"), "How harmonics are initialized"),
+    rOption(Pstart, rShort("initial"), rOptions(zero, random, ones), "How harmonics are initialized"),
 
     {"clear:", rDoc("Reset all harmonics to equal bandwidth/zero amplitude"), NULL, [](const char *, RtData &d)
         {
-- 
2.47.0

