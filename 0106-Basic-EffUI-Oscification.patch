From 470490cbda42a2004763d395e7277882cb2ecf07 Mon Sep 17 00:00:00 2001
From: fundamental <mark.d.mccurry@gmail.com>
Date: Thu, 8 Aug 2013 16:22:03 -0400
Subject: [PATCH 0106/1936] Basic EffUI Oscification

Wow, that's a lot of widgets...

- All Effects except the EQ are now oscified
- Effect refreshing does not work under preset changes
- Effects are not yet allocated in middleware
- Rebasing has not been effectively implemented yet
- SimpleUI may have caught fire
---
 src/Effects/EQ.h          |   8 +-
 src/Effects/EffectMgr.cpp |  46 +-
 src/Effects/EffectMgr.h   |   4 +-
 src/Misc/Master.cpp       |   6 +-
 src/Misc/MiddleWare.cpp   |  17 +-
 src/Misc/Part.cpp         |   3 +-
 src/UI/CMakeLists.txt     |   1 +
 src/UI/EffUI.fl           | 919 +++++++++++++++-----------------------
 src/UI/Fl_EQGraph.H       |  23 +
 src/UI/Fl_EQGraph.cpp     | 148 ++++++
 src/UI/MasterUI.fl        |  42 +-
 src/UI/PartUI.fl          |  16 +-
 12 files changed, 638 insertions(+), 595 deletions(-)
 create mode 100644 src/UI/Fl_EQGraph.H
 create mode 100644 src/UI/Fl_EQGraph.cpp

diff --git a/src/Effects/EQ.h b/src/Effects/EQ.h
index 9dd14fbf..025b5cf7 100644
--- a/src/Effects/EQ.h
+++ b/src/Effects/EQ.h
@@ -48,7 +48,13 @@ class EQ:public Effect
             //parameters
             unsigned char Ptype, Pfreq, Pgain, Pq, Pstages;
             //internal values
-            class AnalogFilter * l, *r;
+            
+            /* TODO
+             * The analog filters here really ought to be dumbed down some as
+             * you are just looking to do a batch convolution in the end
+             * Perhaps some static functions to do the filter design?
+             */
+            class AnalogFilter *l, *r;
         } filter[MAX_EQ_BANDS];
 };
 
diff --git a/src/Effects/EffectMgr.cpp b/src/Effects/EffectMgr.cpp
index c2fce519..cd17b4bd 100644
--- a/src/Effects/EffectMgr.cpp
+++ b/src/Effects/EffectMgr.cpp
@@ -20,6 +20,10 @@
 
 */
 
+#include <rtosc/ports.h>
+#include <rtosc/port-sugar.h>
+
+
 #include "EffectMgr.h"
 #include "Effect.h"
 #include "Reverb.h"
@@ -29,19 +33,41 @@
 #include "EQ.h"
 #include "DynamicFilter.h"
 #include "../Misc/XMLwrapper.h"
+#include "../Misc/Util.h"
 #include "../Params/FilterParams.h"
 
-#include <iostream>
-using namespace std;
 
-EffectMgr::EffectMgr(const bool insertion_, pthread_mutex_t *mutex_)
+rtosc::Ports EffectMgr::ports = {
+    RECURP(EffectMgr, FilterParams, Filter, filterpars, "Filter Parameter for Dynamic Filter"),
+    {"parameter#64::c", rProp(alias), NULL, [](const char *msg, rtosc::RtData &d)
+        {
+            EffectMgr *eff = (EffectMgr*)d.obj;
+            const char *mm = msg;
+            while(!isdigit(*mm))++mm;
+
+            if(!rtosc_narguments(msg))
+                d.reply(d.loc, "c", eff->geteffectpar(atoi(mm)));
+            else
+                eff->seteffectpar_nolock(atoi(mm), rtosc_argument(msg, 0).i);
+        }},
+    {"preset::c", rProp(alias), NULL, [](const char *msg, rtosc::RtData &d)
+        {
+            EffectMgr *eff = (EffectMgr*)d.obj;
+            if(!rtosc_narguments(msg))
+                d.reply(d.loc, "c", eff->getpreset());
+            else
+                eff->changepreset_nolock(rtosc_argument(msg, 0).i);
+        }},
+
+};
+
+EffectMgr::EffectMgr(const bool insertion_)
     :insertion(insertion_),
       efxoutl(new float[synth->buffersize]),
       efxoutr(new float[synth->buffersize]),
       filterpars(NULL),
       nefx(0),
       efx(NULL),
-      mutex(mutex_),
       dryonly(false)
 {
     setpresettype("Peffect");
@@ -67,6 +93,10 @@ void EffectMgr::defaults(void)
 //Change the effect
 void EffectMgr::changeeffect(int _nefx)
 {
+    //TODO there should be a sane way to upper bound the memory of every effect
+    //and just use placement new to eliminate any allocation/deallocation when
+    //chaning effects
+    
     cleanup();
     if(nefx == _nefx)
         return;
@@ -142,9 +172,7 @@ void EffectMgr::changepreset_nolock(unsigned char npreset)
 //Change the preset of the current effect(with thread locking)
 void EffectMgr::changepreset(unsigned char npreset)
 {
-    pthread_mutex_lock(mutex);
-    changepreset_nolock(npreset);
-    pthread_mutex_unlock(mutex);
+    abort();
 }
 
 
@@ -159,9 +187,7 @@ void EffectMgr::seteffectpar_nolock(int npar, unsigned char value)
 // Change a parameter of the current effect (with thread locking)
 void EffectMgr::seteffectpar(int npar, unsigned char value)
 {
-    pthread_mutex_lock(mutex);
-    seteffectpar_nolock(npar, value);
-    pthread_mutex_unlock(mutex);
+    abort();
 }
 
 //Get a parameter of the current effect
diff --git a/src/Effects/EffectMgr.h b/src/Effects/EffectMgr.h
index 256a8d81..4660be77 100644
--- a/src/Effects/EffectMgr.h
+++ b/src/Effects/EffectMgr.h
@@ -43,7 +43,7 @@ class XMLwrapper;
 class EffectMgr:public Presets
 {
     public:
-        EffectMgr(const bool insertion_, pthread_mutex_t *mutex_);
+        EffectMgr(const bool insertion_);
         ~EffectMgr();
 
         void add2XML(XMLwrapper *xml);
@@ -76,10 +76,10 @@ class EffectMgr:public Presets
 
         FilterParams *filterpars;
 
+        static rtosc::Ports ports;
     private:
         int     nefx;
         Effect *efx;
-        pthread_mutex_t *mutex;
         bool dryonly;
 };
 
diff --git a/src/Misc/Master.cpp b/src/Misc/Master.cpp
index dc6514c0..480f4892 100644
--- a/src/Misc/Master.cpp
+++ b/src/Misc/Master.cpp
@@ -46,6 +46,8 @@ using rtosc::RtData;
 
 static Ports localports = {
     RECURSP(Master, Part, part, part, 16, "Part"),//NUM_MIDI_PARTS
+    RECURSP(Master, EffectMgr, sysefx, sysefx, 4, "System Effect"),//NUM_SYS_EFX
+    RECURSP(Master, EffectMgr, insefx, insefx, 8, "Insertion Effect"),//NUM_INS_EFX
     {"echo", "=doc\0:Hidden port to echo messages\0", 0, [](const char *m, RtData&) {
        bToU->raw_write(m-1);}},
     {"get-vu", "", 0, [](const char *, RtData &d) {
@@ -166,11 +168,11 @@ Master::Master()
 
     //Insertion Effects init
     for(int nefx = 0; nefx < NUM_INS_EFX; ++nefx)
-        insefx[nefx] = new EffectMgr(1, &mutex);
+        insefx[nefx] = new EffectMgr(1);
 
     //System Effects init
     for(int nefx = 0; nefx < NUM_SYS_EFX; ++nefx)
-        sysefx[nefx] = new EffectMgr(0, &mutex);
+        sysefx[nefx] = new EffectMgr(0);
 
 
     defaults();
diff --git a/src/Misc/MiddleWare.cpp b/src/Misc/MiddleWare.cpp
index a98e621f..f871a4cd 100644
--- a/src/Misc/MiddleWare.cpp
+++ b/src/Misc/MiddleWare.cpp
@@ -254,7 +254,8 @@ class DummyDataObj:public rtosc::RtData
         }
         virtual void reply(const char *msg)
         {
-            printf("reply used for '%s'\n", msg);
+            //DEBUG
+            //printf("reply used for '%s'\n", msg);
             osc->tryLink(msg);
             cb(ui, msg);
         }
@@ -610,8 +611,9 @@ class UI_Interface:public Fl_Osc_Interface
         void tryLink(const char *msg) override
         {
 
-            if(strcmp(msg, "/vu-meter"))//Ignore repeated message
-                printf("trying the link for a '%s'<%s>\n", msg, rtosc_argument_string(msg));
+            //DEBUG
+            //if(strcmp(msg, "/vu-meter"))//Ignore repeated message
+            //    printf("trying the link for a '%s'<%s>\n", msg, rtosc_argument_string(msg));
             const char *handle = rindex(msg,'/');
             if(handle)
                 ++handle;
@@ -626,26 +628,17 @@ class UI_Interface:public Fl_Osc_Interface
                     //Always provide the raw message
                     pair.second->OSC_raw(msg);
 
-                    //printf("Possible location for application of '%s' is '%p'\n", msg, pair.second);
                     if(!strcmp(arg_str, "b")) {
-                        //printf("'%s' matches '%s' ala blob\n", pair.first.c_str(), msg);
-                        //fprintf(stderr, "tossing blob params %d %p (%p)\n", rtosc_argument(msg,0).b.len,rtosc_argument(msg,0).b.data, pair.second);
                         pair.second->OSC_value(rtosc_argument(msg,0).b.len,
                                 rtosc_argument(msg,0).b.data,
                                 handle);
                     } else if(!strcmp(arg_str, "c")) {
-                        //printf("'%s' => '%d'\n", msg, rtosc_argument(msg,0).i);
-                        //fprintf(stderr, "tossing char to %p\n", pair.second);
                         pair.second->OSC_value((char)rtosc_argument(msg,0).i,
                                 handle);
                     } else if(!strcmp(arg_str, "i")) {
-                        //printf("'%s' => '%d'\n", msg, rtosc_argument(msg,0).i);
-                        //fprintf(stderr, "tossing char to %p\n", pair.second);
                         pair.second->OSC_value((int)rtosc_argument(msg,0).i,
                                 handle);
                     } else if(!strcmp(arg_str, "f")) {
-                        //printf("'%s' => '%d'\n", msg, rtosc_argument(msg,0).i);
-                        //fprintf(stderr, "tossing char to %p\n", pair.second);
                         pair.second->OSC_value((float)rtosc_argument(msg,0).f,
                                 handle);
                     } else if(!strcmp(arg_str, "T") || !strcmp(arg_str, "F")) {
diff --git a/src/Misc/Part.cpp b/src/Misc/Part.cpp
index a9273c80..2587b7ab 100644
--- a/src/Misc/Part.cpp
+++ b/src/Misc/Part.cpp
@@ -46,6 +46,7 @@ using rtosc::RtData;
 #define rObject Part
 static Ports partPorts = {
     RECURS(Part, Part::Kit, kit, kit, 16, "Kit"),//NUM_KIT_ITEMS
+    RECURSP(Part, EffectMgr, partefx, partefx, 3, "Part Effect"),
     rRecur(ctl,       "Controller"),
     rToggle(Penabled, "Part enable"),
     rParam(Pvolume, "Part Volume"),
@@ -123,7 +124,7 @@ Part::Part(Microtonal *microtonal_, FFTwrapper *fft_, pthread_mutex_t *mutex_)
 
     //Part's Insertion Effects init
     for(int nefx = 0; nefx < NUM_PART_EFX; ++nefx) {
-        partefx[nefx]    = new EffectMgr(1, mutex);
+        partefx[nefx]    = new EffectMgr(1);
         Pefxbypass[nefx] = false;
     }
 
diff --git a/src/UI/CMakeLists.txt b/src/UI/CMakeLists.txt
index b84c5b33..3fcdf59e 100644
--- a/src/UI/CMakeLists.txt
+++ b/src/UI/CMakeLists.txt
@@ -48,6 +48,7 @@ add_library(zynaddsubfx_gui STATIC
         Fl_Osc_Counter.cpp
         Fl_Osc_Input.cpp
         Fl_Resonance_Graph.cpp
+        Fl_EQGraph.cpp
         FormantFilterGraph.cpp
         EnvelopeFreeEdit.cpp
         BankView.cpp
diff --git a/src/UI/EffUI.fl b/src/UI/EffUI.fl
index 037e8ffe..fead031f 100644
--- a/src/UI/EffUI.fl
+++ b/src/UI/EffUI.fl
@@ -1,171 +1,55 @@
 # data file for the Fltk User Interface Designer (fluid)
-version 1.0110 
+version 1.0302 
 header_name {.h} 
 code_name {.cc}
-decl {//Copyright (c) 2002-2005 Nasca Octavian Paul} {} 
-
-decl {//License: GNU GPL version 2 or later} {} 
-
-decl {\#include <stdlib.h>} {public
+decl {//Copyright (c) 2002-2005 Nasca Octavian Paul} {private local
 } 
 
-decl {\#include <stdio.h>} {public
+decl {//License: GNU GPL version 2 or later} {private local
 } 
 
-decl {\#include <string.h>} {public
+decl {\#include <stdlib.h>} {public local
 } 
 
-decl {\#include "../globals.h"} {public
+decl {\#include <stdio.h>} {public local
 } 
 
-decl {\#include "WidgetPDial.h"} {public
+decl {\#include <string.h>} {public local
 } 
 
-decl {\#include "EnvelopeUI.h"} {public
+decl {\#include "../globals.h"} {public local
 } 
 
-decl {\#include "FilterUI.h"} {public
+decl {\#include "Fl_Osc_Dial.H"} {public local
 } 
 
-decl {\#include "../Misc/Util.h"} {public
+decl {\#include "Fl_Osc_Check.H"} {public local
 } 
 
-decl {\#include "../Effects/EffectMgr.h"} {public
+decl {\#include "Fl_EQGraph.H"} {public local
 } 
 
-decl {\#include "PresetsUI.h"} {public
+decl {\#include "EnvelopeUI.h"} {public local
 } 
 
-decl {\#include "common.H"} {public
+decl {\#include "FilterUI.h"} {public local
 } 
 
-class EQGraph {: {public Fl_Box}
-} {
-  Function {EQGraph(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
-    code {eff=NULL;
-maxdB=30;} {}
-  }
-  Function {init(EffectMgr *eff_)} {} {
-    code {eff=eff_;
-oldx=-1;
-khzval=-1;} {}
-  }
-  Function {draw_freq_line(float freq,int type)} {} {
-    code {fl_color(FL_GRAY);
-float freqx=getfreqpos(freq);
-switch(type){
-  case 0:if (active_r()) fl_color(FL_WHITE);
-            else fl_color(205,205,205);
-         fl_line_style(FL_SOLID);
-         break;
-  case 1:fl_line_style(FL_DOT);break;
-  case 2:fl_line_style(FL_DASH);break;
-}; 
-
-
-if ((freqx>0.0)&&(freqx<1.0))
-   fl_line(x()+(int) (freqx*w()),y(),
-   x()+(int) (freqx*w()),y()+h());} {}
-  }
-  Function {draw()} {} {
-    code {int ox=x(),oy=y(),lx=w(),ly=h(),i;
-    double iy,oiy;
-float freqx;
-
-if (active_r()) fl_color(fl_darker(FL_GRAY));
-       else fl_color(FL_GRAY);
-fl_rectf(ox,oy,lx,ly);
-
-
-//draw the lines
-fl_color(fl_lighter( FL_GRAY));
-
-fl_line_style(FL_SOLID);
-fl_line(ox+2,oy+ly/2,ox+lx-2,oy+ly/2);
-
-freqx=getfreqpos(1000.0);
-if ((freqx>0.0)&&(freqx<1.0))
-   fl_line(ox+(int) (freqx*lx),oy,
-    ox+(int) (freqx*lx),oy+ly);
-
-for (i=1;i<10;i++){
-   if(i==1){
-     draw_freq_line(i*100.0,0);
-     draw_freq_line(i*1000.0,0);
-   }else 
-    if (i==5){
-      draw_freq_line(i*10.0,2);
-      draw_freq_line(i*100.0,2);
-      draw_freq_line(i*1000.0,2);
-    }else{
-      draw_freq_line(i*10.0,1);
-      draw_freq_line(i*100.0,1);
-      draw_freq_line(i*1000.0,1);
-    };
-};
-
-draw_freq_line(10000.0,0);
-draw_freq_line(20000.0,1);
-
-
-fl_line_style(FL_DOT);
-int GY=6;if (ly<GY*3) GY=-1;
-for (i=1;i<GY;i++){
-   int tmp=(int)(ly/(float)GY*i);
-   fl_line(ox+2,oy+tmp,ox+lx-2,oy+tmp);
-};
-
-
-//draw the frequency response
-if (active_r()) fl_color(FL_YELLOW);
-       else fl_color(200,200,80);
-fl_line_style(FL_SOLID,2);
-fl_color( fl_color_add_alpha( fl_color(), 127 ) );
-oiy=getresponse(ly,getfreqx(0.0));
-fl_begin_line();
-for (i=1;i<lx;i++){
-   float frq=getfreqx(i/(float) lx);
-   if (frq>synth->samplerate/2) break;
-   iy=getresponse(ly,frq);
-   if ((oiy>=0) && (oiy<ly) &&
-       (iy>=0) && (iy<ly) )
-        fl_vertex(ox+i,oy+ly-iy);
-   oiy=iy;
-};
-fl_end_line();
-fl_line_style(FL_SOLID,0);} {}
-  }
-  Function {getresponse(int maxy,float freq)} {return_type double
-  } {
-    code {float dbresp=eff->getEQfreqresponse(freq);
-int idbresp=(int) ((dbresp/maxdB+1.0)*maxy/2.0);
-
+decl {\#include "../Misc/Util.h"} {public local
+} 
 
-//fprintf(stderr,"%.5f\\n",(dbresp/maxdB+1.0)*maxy/2.0);
+decl {\#include "../Effects/EffectMgr.h"} {public local
+} 
 
+decl {\#include "PresetsUI.h"} {public local
+} 
 
-return(idbresp);} {}
-  }
-  Function {getfreqx(float x)} {return_type float
-  } {
-    code {if (x>1.0) x=1.0;
-return(20.0*pow((float)1000.0,x));} {}
-  }
-  Function {getfreqpos(float freq)} {return_type float
-  } {
-    code {if (freq<0.00001) freq=0.00001;
-return(log(freq/20.0)/log(1000.0));} {}
-  }
-  decl {int oldx,oldy;} {}
-  decl {float khzval;} {public
-  }
-  decl {EffectMgr *eff;} {}
-  decl {int maxdB;} {}
+decl {\#include "common.H"} {public local
 } 
 
-class EffUI {open : {public Fl_Group,public PresetsUI_}
+class EffUI {open : {public Fl_Osc_Group,public PresetsUI_}
 } {
-  Function {EffUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
+  Function {EffUI(int x,int y, int w, int h, const char *label=0):Fl_Osc_Group(x,y,w,h,label)} {} {
     code {eff=NULL;
 filterwindow=NULL;} {}
   }
@@ -189,7 +73,7 @@ if (filterwindow!=NULL){
   } {
     Fl_Window effnullwindow {
       label {No Effect}
-      xywh {612 881 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 16
+      xywh {618 881 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {}
@@ -198,16 +82,15 @@ if (filterwindow!=NULL){
   } {
     Fl_Window effreverbwindow {
       label Reverb open
-      xywh {377 636 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {383 682 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice revp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Cathedral 1}
@@ -264,10 +147,11 @@ refresh(eff);}
       }
       Fl_Choice revp10 {
         label Type
-        callback {eff->seteffectpar(10,(int) o->value());
-if (eff->geteffectpar(10)==2) revp12->activate();
+        callback {if(o->value()==2) revp12->activate();
 	else revp12->deactivate();}
         xywh {110 15 85 15} down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("parameter10");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label Random
@@ -284,73 +168,69 @@ if (eff->geteffectpar(10)==2) revp12->activate();
       }
       Fl_Dial revp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp2 {
         label Time
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {Duration of Effect} xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp3 {
         label {I.del}
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {Initial Delay} xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp4 {
         label {I.delfb}
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {Initial Delay Feedback} xywh {155 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp12 {
         label bw
-        callback {eff->seteffectpar(12,(int) o->value());}
         xywh {200 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127 deactivate
-        code0 {if (eff->geteffectpar(10)==2) o->activate();}
-        class WidgetPDial
+        code0 {o->init("parameter12");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp6 {
         label {E/R}
-        callback {eff->seteffectpar(6,(int) o->value());}
         xywh {235 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127 deactivate
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp7 {
         label LPF
-        callback {eff->seteffectpar(7,(int) o->value());}
         tooltip {Low Pass Filter} xywh {270 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp8 {
         label HPF
-        callback {eff->seteffectpar(8,(int) o->value());}
         tooltip {High Pass Filter} xywh {305 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter8");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp9 {
         label Damp
-        callback {eff->seteffectpar(9,(int) o->value());}
         tooltip Dampening xywh {340 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 minimum 64 maximum 127 step 1
-        class WidgetPDial
+        code0 {o->init("parameter9");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp11 {
         label {R.S.}
-        callback {int x=64;
-if (Fl::event_button1()) x=(int)o->value();
-   else o->value(x);
-eff->seteffectpar(11,x);}
         tooltip RoomSize xywh {200 10 25 25} box ROUND_UP_BOX labelfont 1 labelsize 8 align 8 minimum 1 maximum 127 step 1
-        class WidgetPDial
+        code0 {o->init("parameter11");}
+        class Fl_Osc_Dial
       }
     }
   }
@@ -358,15 +238,15 @@ eff->seteffectpar(11,x);}
   } {
     Fl_Window effechowindow {
       label Echo
-      xywh {897 611 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {897 657 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice echop {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {11 15 95 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Echo 1}
@@ -407,45 +287,45 @@ refresh(eff);}
       }
       Fl_Dial echop0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop2 {
         label Delay
-        callback {eff->seteffectpar(2,(int) o->value());}
         xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop3 {
         label {LRdl.}
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {Delay Between L/R} xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop4 {
         label {LRc.}
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {L/R Crossover} xywh {155 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop5 {
         label {Fb.}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip Feedback xywh {195 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop6 {
         label Damp
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip Dampening xywh {235 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
     }
   }
@@ -453,15 +333,15 @@ refresh(eff);}
   } {
     Fl_Window effchoruswindow {
       label Chorus open
-      xywh {467 742 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {473 788 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice chorusp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Chorus 1}
@@ -506,73 +386,75 @@ refresh(eff);}
       }
       Fl_Dial chorusp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp3 {
         label Rnd
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp5 {
         label {St.df}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip {L/R Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp6 {
         label Dpth
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip {LFO Depth} xywh {235 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp7 {
         label Delay
-        callback {eff->seteffectpar(7,(int) o->value());}
         xywh {270 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp8 {
         label Fb
-        callback {eff->seteffectpar(8,(int) o->value());}
         tooltip Feedback xywh {305 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter8");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp9 {
         label {L/R}
-        callback {eff->seteffectpar(9,(int) o->value());}
         tooltip {Channel Routing} xywh {340 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter9");}
+        class Fl_Osc_Dial
       }
       Fl_Check_Button {} {
         label Flange
-        callback {eff->seteffectpar(10,(int) o->value());}
         xywh {120 10 55 20} box THIN_UP_BOX down_box DOWN_BOX color 230 labelfont 1 labelsize 10 hide deactivate
-        code0 {o->value(eff->geteffectpar(10));}
+        code0 {o->init("parameter10");}
+        class Fl_Osc_Check
       }
       Fl_Check_Button chorusp11 {
         label Substract
-        callback {eff->seteffectpar(11,(int) o->value());}
         tooltip {inverts the output} xywh {185 10 70 20} box THIN_UP_BOX down_box DOWN_BOX color 51 labelsize 10
+        code0 {o->init("parameter11");}
+        class Fl_Osc_Check
       }
       Fl_Choice chorusp4 {
         label {LFO type}
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {LFO function} xywh {155 50 40 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 130 textsize 8
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label SINE
@@ -589,15 +471,15 @@ refresh(eff);}
   } {
     Fl_Window effphaserwindow {
       label Phaser open
-      xywh {101 232 380 95} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {107 278 380 95} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice phaserp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 100 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Phaser 1}
@@ -650,32 +532,33 @@ refresh(eff);}
       }
       Fl_Dial phaserp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO frequency} xywh {85 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp3 {
         label Rnd
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {LFO randomness} xywh {120 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Choice phaserp4 {
         label LFO
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {LFO function} xywh {245 55 40 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 130 textsize 8
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label SIN
@@ -688,60 +571,64 @@ refresh(eff);}
       }
       Fl_Dial phaserp5 {
         label {St.df}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip {Left/Right Channel Phase Shift} xywh {155 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp6 {
         label Dpth
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip {LFO Depth} xywh {120 5 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp7 {
         label Fb
-        callback {eff->seteffectpar(7,(int) o->value());}
         tooltip Feedback xywh {185 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Counter phaserp8 {
         label Stages
-        callback {eff->seteffectpar(8,(int) o->value());}
         xywh {290 55 35 15} type Simple labelfont 1 labelsize 11 minimum 0 maximum 127 step 1
         code0 {o->range(1,MAX_PHASER_STAGES);}
+        code1 {o->init("parameter8");}
+        class Fl_Osc_Counter
       }
       Fl_Dial phaserp9 {
         label {L/R}
-        callback {eff->seteffectpar(9,(int) o->value());}
         tooltip {Channel Routing} xywh {215 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter9");}
+        class Fl_Osc_Dial
       }
       Fl_Check_Button phaserp10 {
         label Substract
-        callback {eff->seteffectpar(10,(int) o->value());} selected
         tooltip {inverts output} xywh {200 10 74 20} box THIN_UP_BOX down_box DOWN_BOX color 51 labelfont 1 labelsize 10
+        code0 {o->init("parameter10");}
+        class Fl_Osc_Check
       }
       Fl_Dial phaserp11 {
         label Phase
-        callback {eff->seteffectpar(11,(int) o->value());}
         xywh {155 5 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter11");}
+        class Fl_Osc_Dial
       }
       Fl_Check_Button phaserp12 {
         label {hyp.}
-        callback {eff->seteffectpar(12,(int) o->value());}
         tooltip hyper xywh {245 35 55 15} down_box DOWN_BOX
+        code0 {o->init("parameter12");}
+        class Fl_Osc_Check
       }
       Fl_Dial phaserp13 {
         label dist
-        callback {eff->seteffectpar(13,(int) o->value());}
         tooltip Distortion xywh {340 50 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter13");}
+        class Fl_Osc_Dial
       }
       Fl_Check_Button phaserp14 {
         label Analog
-        callback {eff->seteffectpar(14,(int) o->value());}
         xywh {305 35 70 15} down_box DOWN_BOX
+        code0 {o->init("parameter14");}
+        class Fl_Osc_Check
       }
     }
   }
@@ -749,15 +636,15 @@ refresh(eff);}
   } {
     Fl_Window effalienwahwindow {
       label AlienWah
-      xywh {253 353 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {259 399 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice awp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Alienwah 1}
@@ -778,56 +665,57 @@ refresh(eff);}
       }
       Fl_Dial awp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp3 {
         label Rnd
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp5 {
         label {St.df}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip {Left/Right Channel Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp6 {
         label Dpth
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip Depth xywh {235 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp7 {
         label Fb
-        callback {eff->seteffectpar(7,(int) o->value());}
         tooltip Feedback xywh {270 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp9 {
         label {L/R}
-        callback {eff->seteffectpar(9,(int) o->value());}
         xywh {345 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter9");}
+        class Fl_Osc_Dial
       }
       Fl_Choice awp4 {
         label {LFO type}
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {LFO function} xywh {155 50 40 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 130 textsize 8
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label SINE
@@ -840,15 +728,16 @@ refresh(eff);}
       }
       Fl_Dial awp10 {
         label Phase
-        callback {eff->seteffectpar(10,(int) o->value());}
         xywh {160 5 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter10");}
+        class Fl_Osc_Dial
       }
       Fl_Counter awp8 {
         label Delay
-        callback {eff->seteffectpar(8,(int) o->value());}
         xywh {305 55 35 15} type Simple labelfont 1 labelsize 11 minimum 0 maximum 127 step 1
         code0 {o->range(1,MAX_ALIENWAH_DELAY);}
+        code1 {o->init("parameter8");}
+        class Fl_Osc_Counter
       }
     }
   }
@@ -856,15 +745,15 @@ refresh(eff);}
   } {
     Fl_Window effdistorsionwindow {
       label Distortion open
-      xywh {544 217 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {550 263 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice distp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {11 15 95 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Overdrive 1}
@@ -893,50 +782,51 @@ refresh(eff);}
       }
       Fl_Dial distp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp2 {
         label {LRc.}
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {L/R Mix} xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp3 {
         label Drive
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {Input Amplification} xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp4 {
         label Level
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {Output Amplification} xywh {155 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp7 {
         label LPF
-        callback {eff->seteffectpar(7,(int) o->value());}
         tooltip {Low Pass Filter} xywh {285 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp8 {
         label HPF
-        callback {eff->seteffectpar(8,(int) o->value());}
         tooltip {High Pass Filter} xywh {320 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter8");}
+        class Fl_Osc_Dial
       }
       Fl_Choice distp5 {
         label Type
-        callback {eff->seteffectpar(5,(int) o->value());}
         xywh {190 50 60 20} box UP_BOX down_box BORDER_BOX labelfont 1 labelsize 11 align 2 textsize 10
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label Atan
@@ -997,18 +887,21 @@ refresh(eff);}
       }
       Fl_Check_Button distp6 {
         label {Neg.}
-        callback {eff->seteffectpar(6,(int) o->value());}
         xywh {260 55 15 15} down_box DOWN_BOX labelfont 1 labelsize 11 align 2
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Check
       }
       Fl_Check_Button distp9 {
         label {St.}
-        callback {eff->seteffectpar(9,(int) o->value());}
         tooltip Stereo xywh {355 60 15 15} down_box DOWN_BOX labelfont 1 labelsize 11 align 2
+        code0 {o->init("parameter9");}
+        class Fl_Osc_Check
       }
       Fl_Check_Button distp10 {
         label PF
-        callback {eff->seteffectpar(10,(int) o->value());}
         tooltip {Applies the filters(before or after) the distorsion} xywh {355 44 15 15} down_box DOWN_BOX labelfont 1 labelsize 11 align 1
+        code0 {o->init("parameter10");}
+        class Fl_Osc_Check
       }
     }
   }
@@ -1016,16 +909,16 @@ refresh(eff);}
   } {
     Fl_Window effeqwindow {
       label EQ open
-      xywh {682 881 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {688 881 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Dial eqp0 {
         label Gain
-        callback {eff->seteffectpar(0,(int) o->value());
-eqgraph->redraw();}
+        callback {eqgraph->redraw();}
         xywh {10 35 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Counter bandcounter {
         label {B.}
@@ -1065,7 +958,7 @@ stagescounter->value(dbl);}
 eff->seteffectpar(np,(int) o->value());
 eqgraph->redraw();}
           xywh {250 50 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 when 3 maximum 127
-          class WidgetPDial
+          class Fl_Osc_Dial
         }
         Fl_Dial gaindial {
           label Gain
@@ -1073,7 +966,7 @@ eqgraph->redraw();}
 eff->seteffectpar(np,(int) o->value());
 eqgraph->redraw();}
           xywh {280 50 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 when 3 maximum 127 step 1
-          class WidgetPDial
+          class Fl_Osc_Dial
         }
         Fl_Dial qdial {
           label Q
@@ -1081,7 +974,7 @@ eqgraph->redraw();}
 eff->seteffectpar(np,(int) o->value());
 eqgraph->redraw();}
           tooltip {Resonance/Bandwidth} xywh {310 50 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 when 3 maximum 127
-          class WidgetPDial
+          class Fl_Osc_Dial
         }
         Fl_Counter stagescounter {
           label {St.}
@@ -1143,8 +1036,7 @@ eqgraph->redraw();}
       }
       Fl_Box eqgraph {
         xywh {45 10 190 75} box BORDER_BOX color 50
-        code0 {o->init(eff);}
-        class EQGraph
+        class Fl_EQGraph
       }
     }
   }
@@ -1152,15 +1044,15 @@ eqgraph->redraw();}
   } {
     Fl_Window effdynamicfilterwindow {
       label DynFilter open
-      xywh {819 290 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 25
+      xywh {825 336 380 100} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice dfp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 14 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label WahWah
@@ -1185,44 +1077,45 @@ refresh(eff);}
       }
       Fl_Dial dfp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp1 {
         label Pan
-        callback {eff->seteffectpar(1,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter1");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp3 {
         label Rnd
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp5 {
         label {St.df}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip {Left/Right Channel Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp6 {
         label LfoD
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip {LFO Depth} xywh {235 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Choice dfp4 {
         label {LFO type}
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {LFO function} xywh {155 50 40 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 130 textsize 8
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label SINE
@@ -1243,20 +1136,21 @@ refresh(eff);}
       } {
         Fl_Dial dfp7 {
           label {A.S.}
-          callback {eff->seteffectpar(7,(int) o->value());}
           tooltip {Filter vs Amplitude} xywh {275 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-          class WidgetPDial
+          code0 {o->init("parameter7");}
+          class Fl_Osc_Dial
         }
         Fl_Dial dfp9 {
           label {A.M}
-          callback {eff->seteffectpar(9,(int) o->value());}
           tooltip {rate that  amplitude changes the filter} xywh {305 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-          class WidgetPDial
+          code0 {o->init("parameter9");}
+          class Fl_Osc_Dial
         }
         Fl_Check_Button dfp8 {
           label {A.Inv.}
-          callback {eff->seteffectpar(8,(int) o->value());}
           tooltip {enable for filter frequency to lower with higher input amplitude} xywh {345 55 15 15} down_box DOWN_BOX labelfont 1 labelsize 11 align 2
+          code0 {o->init("parameter8");}
+          class Fl_Osc_Check
         }
       }
     }
@@ -1265,13 +1159,13 @@ refresh(eff);}
   } {
     Fl_Window filterwindow {
       label {Filter Parameters for DynFilter Eff.}
-      xywh {801 474 290 110} type Double
+      xywh {807 520 290 110} type Double
       code0 {set_module_parameters(o);} visible
     } {
       Fl_Group {} {
         label {DynFilter effect  - Filter}
         xywh {5 5 275 75} box FLAT_BOX color 50 align 144
-        code0 {o->init("",osc, loc, "Filter/");}
+        code0 {o->init("",osc, loc(), "Filter/");}
         code1 {o->use_for_dynamic_filter();}
         class FilterUI
       } {}
@@ -1282,10 +1176,8 @@ refresh(eff);}
       }
     }
   }
-  Function {init(EffectMgr *eff_, Fl_Osc_Interface *osc_, std::string loc_)} {} {
+  Function {init(EffectMgr *eff_)} {} {
     code {eff=eff_;
-    osc = osc_;
-    loc = loc_;
 
 make_null_window();
 make_reverb_window();
@@ -1316,6 +1208,21 @@ refresh(eff);} {}
   } {
     code {eff=eff_;
 this->hide();
+osc->requestValue(loc()+"parameter0");
+osc->requestValue(loc()+"parameter1");
+osc->requestValue(loc()+"parameter2");
+osc->requestValue(loc()+"parameter3");
+osc->requestValue(loc()+"parameter4");
+osc->requestValue(loc()+"parameter5");
+osc->requestValue(loc()+"parameter6");
+osc->requestValue(loc()+"parameter7");
+osc->requestValue(loc()+"parameter8");
+osc->requestValue(loc()+"parameter9");
+osc->requestValue(loc()+"parameter10");
+osc->requestValue(loc()+"parameter11");
+osc->requestValue(loc()+"parameter12");
+osc->requestValue(loc()+"parameter13");
+osc->requestValue(loc()+"parameter14");
 
 effnullwindow->hide();
 effreverbwindow->hide();
@@ -1329,105 +1236,39 @@ effdynamicfilterwindow->hide();
 
 eqband=0;
 
-if (filterwindow!=NULL){
+if (filterwindow){
 	filterwindow->hide();
 	delete(filterwindow);
 	filterwindow=NULL;
 };
+	
+    if(insertion) {
+        revp0->label("D/W");
+        echop0->label("D/W");
+        chorusp0->label("D/W");
+        phaserp0->label("D/W");
+        awp0->label("D/W");
+        distp0->label("D/W");
+        dfp0->label("D/W");
+    }
 
 switch(eff->geteffect()){
      case 1:
-	revp->value(eff->getpreset());
-	revp0->value(eff->geteffectpar(0));if (eff->insertion!=0) revp0->label("D/W");
-	revp1->value(eff->geteffectpar(1));
-	revp2->value(eff->geteffectpar(2));
-	revp3->value(eff->geteffectpar(3));
-	revp4->value(eff->geteffectpar(4));
-	//revp5->value(eff->geteffectpar(5));
-	revp6->value(eff->geteffectpar(6));
-	revp7->value(eff->geteffectpar(7));
-	revp8->value(eff->geteffectpar(8));
-	revp9->value(eff->geteffectpar(9));
-	revp10->value(eff->geteffectpar(10));
-	revp11->value(eff->geteffectpar(11));
-	revp12->value(eff->geteffectpar(12));
-            
         effreverbwindow->show();
         break; 
      case 2:
-	echop->value(eff->getpreset());
-	echop0->value(eff->geteffectpar(0));if (eff->insertion!=0) echop0->label("D/W");
-	echop1->value(eff->geteffectpar(1));
-	echop2->value(eff->geteffectpar(2));
-	echop3->value(eff->geteffectpar(3));
-	echop4->value(eff->geteffectpar(4));
-	echop5->value(eff->geteffectpar(5));
-	echop6->value(eff->geteffectpar(6));
 	effechowindow->show();
         break; 
      case 3:
-	chorusp->value(eff->getpreset());
-	chorusp0->value(eff->geteffectpar(0));if (eff->insertion!=0) chorusp0->label("D/W");
-	chorusp1->value(eff->geteffectpar(1));
-	chorusp2->value(eff->geteffectpar(2));
-	chorusp3->value(eff->geteffectpar(3));
-	chorusp4->value(eff->geteffectpar(4));
-	chorusp5->value(eff->geteffectpar(5));
-	chorusp6->value(eff->geteffectpar(6));
-	chorusp7->value(eff->geteffectpar(7));
-	chorusp8->value(eff->geteffectpar(8));
-	chorusp9->value(eff->geteffectpar(9));
-	chorusp11->value(eff->geteffectpar(11));
 	effchoruswindow->show();
         break; 
      case 4:
-	phaserp->value(eff->getpreset());
-	phaserp0->value(eff->geteffectpar(0));if (eff->insertion!=0) phaserp0->label("D/W");
-	phaserp1->value(eff->geteffectpar(1));
-	phaserp2->value(eff->geteffectpar(2));
-	phaserp3->value(eff->geteffectpar(3));
-	phaserp4->value(eff->geteffectpar(4));
-	phaserp5->value(eff->geteffectpar(5));
-	phaserp6->value(eff->geteffectpar(6));
-	phaserp7->value(eff->geteffectpar(7));
-	phaserp8->value(eff->geteffectpar(8));
-	phaserp9->value(eff->geteffectpar(9));
-	phaserp10->value(eff->geteffectpar(10));
-	phaserp11->value(eff->geteffectpar(11));
-	phaserp12->value(eff->geteffectpar(12));
-	phaserp13->value(eff->geteffectpar(13));
-	phaserp14->value(eff->geteffectpar(14));
 	effphaserwindow->show();
         break; 
      case 5:
-	awp->value(eff->getpreset());
-	awp0->value(eff->geteffectpar(0));if (eff->insertion!=0) awp0->label("D/W");
-	awp1->value(eff->geteffectpar(1));
-	awp2->value(eff->geteffectpar(2));
-	awp3->value(eff->geteffectpar(3));
-	awp4->value(eff->geteffectpar(4));
-	awp5->value(eff->geteffectpar(5));
-	awp6->value(eff->geteffectpar(6));
-	awp7->value(eff->geteffectpar(7));
-	awp8->value(eff->geteffectpar(8));
-	awp9->value(eff->geteffectpar(9));
-	awp10->value(eff->geteffectpar(10));
-
 	effalienwahwindow->show();
         break; 
      case 6:
-	distp->value(eff->getpreset());
-	distp0->value(eff->geteffectpar(0));if (eff->insertion!=0) distp0->label("D/W");
-	distp1->value(eff->geteffectpar(1));
-	distp2->value(eff->geteffectpar(2));
-	distp3->value(eff->geteffectpar(3));
-	distp4->value(eff->geteffectpar(4));
-	distp5->value(eff->geteffectpar(5));
-	distp6->value(eff->geteffectpar(6));
-	distp7->value(eff->geteffectpar(7));
-	distp8->value(eff->geteffectpar(8));
-	distp9->value(eff->geteffectpar(9));
-	distp10->value(eff->geteffectpar(10));
 	effdistorsionwindow->show();
         break;
      case 7:eqband=0;
@@ -1441,22 +1282,9 @@ switch(eff->geteffect()){
 	if (eff->geteffectpar(10)<6) gaindial->deactivate();
 	qdial->value(eff->geteffectpar(13));
 	stagescounter->value(eff->geteffectpar(14));
-        eqgraph->init(eff);
 	effeqwindow->show();
         break;
      case 8:make_filter_window();
-	dfp->value(eff->getpreset());
-	dfp0->value(eff->geteffectpar(0));if (eff->insertion!=0) dfp0->label("D/W");
-	dfp1->value(eff->geteffectpar(1));
-	dfp2->value(eff->geteffectpar(2));
-	dfp3->value(eff->geteffectpar(3));
-	dfp4->value(eff->geteffectpar(4));
-	dfp5->value(eff->geteffectpar(5));
-	dfp6->value(eff->geteffectpar(6));
-	dfp7->value(eff->geteffectpar(7));
-	dfp8->value(eff->geteffectpar(8));
-	dfp9->value(eff->geteffectpar(9));
-
             
 	effdynamicfilterwindow->show();
 	break;
@@ -1472,13 +1300,13 @@ this->show();} {}
   }
   decl {EffectMgr *eff;} {}
   decl {int eqband;} {}
-  decl {Fl_Osc_Interface *osc;} {}
-  decl {std::string loc;} {}
+  decl {bool insertion;} {public local
+  }
 } 
 
-class SimpleEffUI {open : {public Fl_Group,public PresetsUI_}
+class SimpleEffUI {open : {public Fl_Osc_Group,public PresetsUI_}
 } {
-  Function {SimpleEffUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
+  Function {SimpleEffUI(int x,int y, int w, int h, const char *label=0):Fl_Osc_Group(x,y,w,h,label)} {} {
     code {eff=NULL;} {}
   }
   Function {~SimpleEffUI()} {} {
@@ -1496,7 +1324,7 @@ effdynamicfilterwindow->hide();//delete (effdynamicfilterwindow);} {}
   } {
     Fl_Window effnullwindow {
       label {No Effect} open
-      xywh {1047 755 230 95} type Double box UP_BOX color 221 labelfont 1 labelsize 19 align 16
+      xywh {1047 801 230 95} type Double box UP_BOX color 221 labelfont 1 labelsize 19
       code0 {set_module_parameters(o);}
       class Fl_Group visible
     } {}
@@ -1505,16 +1333,15 @@ effdynamicfilterwindow->hide();//delete (effdynamicfilterwindow);} {}
   } {
     Fl_Window effreverbwindow {
       label Reverb open
-      xywh {1047 463 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {1047 509 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice revp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-
-refresh(eff);}
         xywh {10 15 90 15} down_box BORDER_BOX color 47 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Cathedral 1}
@@ -1571,27 +1398,27 @@ refresh(eff);}
       }
       Fl_Dial revp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp2 {
         label Time
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {Duration of Reverb} xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp3 {
         label {I.del}
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {Initial Delay} xywh {85 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial revp9 {
         label Damp
-        callback {eff->seteffectpar(9,(int) o->value());}
         tooltip Dampening xywh {120 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 minimum 64 maximum 127 step 1
-        class WidgetPDial
+        code0 {o->init("parameter9");}
+        class Fl_Osc_Dial
       }
     }
   }
@@ -1599,15 +1426,15 @@ refresh(eff);}
   } {
     Fl_Window effechowindow {
       label Echo open
-      xywh {428 823 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {434 869 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice echop {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {11 15 95 15} box UP_BOX down_box BORDER_BOX color 47 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Echo 1}
@@ -1648,21 +1475,21 @@ refresh(eff);}
       }
       Fl_Dial echop0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop2 {
         label Delay
-        callback {eff->seteffectpar(2,(int) o->value());}
         xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial echop5 {
         label {Fb.}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip Feedback xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
     }
   }
@@ -1670,15 +1497,15 @@ refresh(eff);}
   } {
     Fl_Window effchoruswindow {
       label Chorus open
-      xywh {719 588 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {725 634 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice chorusp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 47 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Chorus 1}
@@ -1723,39 +1550,39 @@ refresh(eff);}
       }
       Fl_Dial chorusp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO Frequency} xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp6 {
         label Dpth
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip Depth xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp7 {
         label Delay
-        callback {eff->seteffectpar(7,(int) o->value());}
         xywh {115 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Dial chorusp8 {
         label Fb
-        callback {eff->seteffectpar(8,(int) o->value());}
         tooltip Feedback xywh {150 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter8");}
+        class Fl_Osc_Dial
       }
       Fl_Check_Button {} {
         label Flange
-        callback {eff->seteffectpar(10,(int) o->value());}
         xywh {120 10 55 20} box THIN_UP_BOX down_box DOWN_BOX color 230 labelfont 1 labelsize 10 hide deactivate
-        code0 {o->value(eff->geteffectpar(10));}
+        code0 {o->init("parameter10");}
+        class Fl_Osc_Check
       }
     }
   }
@@ -1763,15 +1590,15 @@ refresh(eff);}
   } {
     Fl_Window effphaserwindow {
       label Phaser open
-      xywh {1047 831 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {1047 877 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice phaserp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 47 selection_color 0 labelfont 1 labelsize 10 labelcolor 55 align 5 textfont 1 textsize 10 textcolor 7
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Phaser 1}
@@ -1800,39 +1627,40 @@ refresh(eff);}
       }
       Fl_Dial phaserp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO frequency} xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp5 {
         label {St.df}
-        callback {eff->seteffectpar(5,(int) o->value());}
         tooltip {Left/Right Channel Phase Shift} xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp6 {
         label Dpth
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip Depth xywh {115 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Dial phaserp7 {
         label Fb
-        callback {eff->seteffectpar(7,(int) o->value());}
         tooltip Feedback xywh {150 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Counter phaserp8 {
         label Stages
-        callback {eff->seteffectpar(8,(int) o->value());}
         xywh {185 55 35 15} type Simple labelfont 1 labelsize 11 minimum 0 maximum 127 step 1
         code0 {o->range(1,MAX_PHASER_STAGES);}
+        code1 {o->init("parameter8");}
+        class Fl_Osc_Counter
       }
     }
   }
@@ -1840,15 +1668,15 @@ refresh(eff);}
   } {
     Fl_Window effalienwahwindow {
       label AlienWah open
-      xywh {403 480 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {409 526 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice awp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 47 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Alienwah 1}
@@ -1869,27 +1697,28 @@ refresh(eff);}
       }
       Fl_Dial awp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO frequency} xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial awp6 {
         label Dpth
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip Depth xywh {85 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Counter awp8 {
         label Delay
-        callback {eff->seteffectpar(8,(int) o->value());}
         xywh {125 55 35 15} type Simple labelfont 1 labelsize 11 minimum 0 maximum 127 step 1
         code0 {o->range(1,MAX_ALIENWAH_DELAY);}
+        code1 {o->init("parameter8");}
+        class Fl_Osc_Counter
       }
     }
   }
@@ -1897,15 +1726,15 @@ refresh(eff);}
   } {
     Fl_Window effdistorsionwindow {
       label Distortion open
-      xywh {353 881 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {85 881 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice distp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {11 15 95 15} box UP_BOX down_box BORDER_BOX color 47 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label {Overdrive 1}
@@ -1934,32 +1763,33 @@ refresh(eff);}
       }
       Fl_Dial distp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp3 {
         label Drive
-        callback {eff->seteffectpar(3,(int) o->value());}
         tooltip {Input amplification} xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 when 4 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter3");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp4 {
         label Level
-        callback {eff->seteffectpar(4,(int) o->value());}
         tooltip {Output Amplification} xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter4");}
+        class Fl_Osc_Dial
       }
       Fl_Dial distp7 {
         label LPF
-        callback {eff->seteffectpar(7,(int) o->value());}
         tooltip {Low Pass Filter} xywh {190 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter7");}
+        class Fl_Osc_Dial
       }
       Fl_Choice distp5 {
         label Type
-        callback {eff->seteffectpar(5,(int) o->value());}
         xywh {120 50 60 20} box UP_BOX down_box BORDER_BOX labelfont 1 labelsize 11 align 2 textsize 10
+        code0 {o->init("parameter5");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label Atan
@@ -2024,7 +1854,7 @@ refresh(eff);}
   } {
     Fl_Window effeqwindow {
       label EQ open
-      xywh {1047 881 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {1047 881 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
@@ -2066,7 +1896,7 @@ stagescounter->value(dbl);}
 eff->seteffectpar(np,(int) o->value());
 eqgraph->redraw();}
           xywh {10 10 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 when 3 maximum 127
-          class WidgetPDial
+          class Fl_Osc_Dial
         }
         Fl_Dial gaindial {
           label Gain
@@ -2074,7 +1904,7 @@ eqgraph->redraw();}
 eff->seteffectpar(np,(int) o->value());
 eqgraph->redraw();}
           xywh {45 10 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 when 3 maximum 127 step 1
-          class WidgetPDial
+          class Fl_Osc_Dial
         }
         Fl_Dial qdial {
           label Q
@@ -2082,7 +1912,7 @@ eqgraph->redraw();}
 eff->seteffectpar(np,(int) o->value());
 eqgraph->redraw();}
           tooltip {Bandwidth/Resonance} xywh {10 50 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 when 3 maximum 127
-          class WidgetPDial
+          class Fl_Osc_Dial
         }
         Fl_Counter stagescounter {
           label Stages
@@ -2142,10 +1972,9 @@ eqgraph->redraw();}
           xywh {90 90 100 20} labelfont 1 labelsize 10
         }
       }
-      Fl_Box eqgraph {
+      Fl_Box eqgraph {selected
         xywh {85 35 140 55} box BORDER_BOX color 50
-        code0 {o->init(eff);}
-        class EQGraph
+        class Fl_EQGraph
       }
     }
   }
@@ -2153,15 +1982,15 @@ eqgraph->redraw();}
   } {
     Fl_Window effdynamicfilterwindow {
       label DynFilter open
-      xywh {965 527 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19 align 25
+      xywh {971 573 230 100} type Double box UP_BOX color 51 labelfont 1 labelsize 19
       code3 {set_module_parameters(o);}
       class Fl_Group visible
     } {
       Fl_Choice dfp {
         label Preset
-        callback {eff->changepreset((int)o->value());
-refresh(eff);}
         xywh {10 15 90 15} box UP_BOX down_box BORDER_BOX color 47 selection_color 7 labelfont 1 labelsize 10 align 5 textfont 1 textsize 10
+        code0 {o->init("preset");}
+        class Fl_Osc_Choice
       } {
         MenuItem {} {
           label WahWah
@@ -2186,36 +2015,36 @@ refresh(eff);}
       }
       Fl_Dial dfp0 {
         label Vol
-        callback {eff->seteffectpar(0,(int) o->value());}
         tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter0");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp2 {
         label Freq
-        callback {eff->seteffectpar(2,(int) o->value());}
         tooltip {LFO frequency} xywh {45 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter2");}
+        class Fl_Osc_Dial
       }
       Fl_Dial dfp6 {
         label LfoD
-        callback {eff->seteffectpar(6,(int) o->value());}
         tooltip {LFO depth} xywh {80 40 30 30} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-        class WidgetPDial
+        code0 {o->init("parameter6");}
+        class Fl_Osc_Dial
       }
       Fl_Group {} {
         xywh {115 40 65 45} box UP_FRAME
       } {
         Fl_Dial dfp7 {
           label {A.S.}
-          callback {eff->seteffectpar(7,(int) o->value());}
           tooltip {how filter varies with amplitude} xywh {120 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-          class WidgetPDial
+          code0 {o->init("parameter7");}
+          class Fl_Osc_Dial
         }
         Fl_Dial dfp9 {
           label {A.M}
-          callback {eff->seteffectpar(9,(int) o->value());}
           tooltip {how quickly the filter varies with amplitude} xywh {150 45 25 25} box ROUND_UP_BOX labelfont 1 labelsize 11 maximum 127
-          class WidgetPDial
+          code0 {o->init("parameter9");}
+          class Fl_Osc_Dial
         }
       }
     }
@@ -2249,10 +2078,27 @@ effdynamicfilterwindow->position(px,py);
 
 refresh(eff);} {}
   }
-  Function {refresh(EffectMgr *eff_)} {} {
+  Function {refresh(EffectMgr *eff_)} {open
+  } {
     code {eff=eff_;
 this->hide();
 
+osc->requestValue(loc()+"parameter0");
+osc->requestValue(loc()+"parameter1");
+osc->requestValue(loc()+"parameter2");
+osc->requestValue(loc()+"parameter3");
+osc->requestValue(loc()+"parameter4");
+osc->requestValue(loc()+"parameter5");
+osc->requestValue(loc()+"parameter6");
+osc->requestValue(loc()+"parameter7");
+osc->requestValue(loc()+"parameter8");
+osc->requestValue(loc()+"parameter9");
+osc->requestValue(loc()+"parameter10");
+osc->requestValue(loc()+"parameter11");
+osc->requestValue(loc()+"parameter12");
+osc->requestValue(loc()+"parameter13");
+osc->requestValue(loc()+"parameter14");
+
 effnullwindow->hide();
 effreverbwindow->hide();
 effechowindow->hide();
@@ -2265,57 +2111,33 @@ effdynamicfilterwindow->hide();
 
 eqband=0;
 
+    if(insertion) {
+	    revp0->label("D/W");
+	    echop0->label("D/W");
+	    chorusp0->label("D/W");
+	    phaserp0->label("D/W");
+	    awp0->label("D/W");
+	    distp0->label("D/W");
+	    dfp0->label("D/W");
+    }
 
 switch(eff->geteffect()){
      case 1:
-	revp->value(eff->getpreset());
-	revp0->value(eff->geteffectpar(0));if (eff->insertion!=0) revp0->label("D/W");
-	revp2->value(eff->geteffectpar(2));
-	revp3->value(eff->geteffectpar(3));
-	revp9->value(eff->geteffectpar(9));          
         effreverbwindow->show();
         break; 
      case 2:
-	echop->value(eff->getpreset());
-	echop0->value(eff->geteffectpar(0));if (eff->insertion!=0) echop0->label("D/W");
-	echop2->value(eff->geteffectpar(2));
-	echop5->value(eff->geteffectpar(5));
 	effechowindow->show();
         break; 
      case 3:
-	chorusp->value(eff->getpreset());
-	chorusp0->value(eff->geteffectpar(0));if (eff->insertion!=0) chorusp0->label("D/W");
-	chorusp2->value(eff->geteffectpar(2));
-	chorusp6->value(eff->geteffectpar(6));
-	chorusp7->value(eff->geteffectpar(7));
-	chorusp8->value(eff->geteffectpar(8));
 	effchoruswindow->show();
         break; 
      case 4:
-	phaserp->value(eff->getpreset());
-	phaserp0->value(eff->geteffectpar(0));if (eff->insertion!=0) phaserp0->label("D/W");
-	phaserp2->value(eff->geteffectpar(2));
-	phaserp5->value(eff->geteffectpar(5));
-	phaserp6->value(eff->geteffectpar(6));
-	phaserp7->value(eff->geteffectpar(7));
-	phaserp8->value(eff->geteffectpar(8));
 	effphaserwindow->show();
         break; 
      case 5:
-	awp->value(eff->getpreset());
-	awp0->value(eff->geteffectpar(0));if (eff->insertion!=0) awp0->label("D/W");
-	awp2->value(eff->geteffectpar(2));
-	awp6->value(eff->geteffectpar(6));
-	awp8->value(eff->geteffectpar(8));
 	effalienwahwindow->show();
         break; 
      case 6:
-	distp->value(eff->getpreset());
-	distp0->value(eff->geteffectpar(0));if (eff->insertion!=0) distp0->label("D/W");
-	distp3->value(eff->geteffectpar(3));
-	distp4->value(eff->geteffectpar(4));
-	distp5->value(eff->geteffectpar(5));
-	distp7->value(eff->geteffectpar(7));
 	effdistorsionwindow->show();
         break;
      case 7:
@@ -2328,18 +2150,9 @@ switch(eff->geteffect()){
 	if (eff->geteffectpar(10)<6) gaindial->deactivate();
 	qdial->value(eff->geteffectpar(13));
 	stagescounter->value(eff->geteffectpar(14));
-        eqgraph->init(eff);
 	effeqwindow->show();
         break;
      case 8:
-	dfp->value(eff->getpreset());
-	dfp0->value(eff->geteffectpar(0));if (eff->insertion!=0) dfp0->label("D/W");
-	dfp2->value(eff->geteffectpar(2));
-	dfp6->value(eff->geteffectpar(6));
-	dfp7->value(eff->geteffectpar(7));
-	dfp9->value(eff->geteffectpar(9));
-
-            
 	effdynamicfilterwindow->show();
 	break;
     default:effnullwindow->show();
@@ -2351,6 +2164,10 @@ this->show();} {}
   Function {refresh()} {} {
     code {refresh(eff);} {}
   }
-  decl {EffectMgr *eff;} {}
-  decl {int eqband;} {}
+  decl {EffectMgr *eff;} {private local
+  }
+  decl {int eqband;} {private local
+  }
+  decl {bool insertion;} {public local
+  }
 } 
diff --git a/src/UI/Fl_EQGraph.H b/src/UI/Fl_EQGraph.H
new file mode 100644
index 00000000..c0ec5351
--- /dev/null
+++ b/src/UI/Fl_EQGraph.H
@@ -0,0 +1,23 @@
+#pragma once
+#include "Fl_Osc_Widget.H"
+#include <FL/Fl_Box.H>
+
+class EffectMgr;
+class Fl_Osc_Interface;
+class Fl_EQGraph : public Fl_Osc_Widget, public Fl_Box {
+    public:
+        Fl_EQGraph(int x,int y, int w, int h, const char *label=0);
+        virtual ~Fl_EQGraph(void);
+        void draw(void);
+
+    private:
+        void draw_freq_line(float freq,int type);
+
+        double getresponse(int maxy,float freq) const;
+
+        float getfreqx(float x) const;
+        float getfreqpos(float freq) const;
+
+        float *num;
+        float *dem;
+};
diff --git a/src/UI/Fl_EQGraph.cpp b/src/UI/Fl_EQGraph.cpp
new file mode 100644
index 00000000..7dd3c0d2
--- /dev/null
+++ b/src/UI/Fl_EQGraph.cpp
@@ -0,0 +1,148 @@
+#include <FL/Fl.H>
+#include <FL/fl_draw.H>
+#include "Fl_EQGraph.H"
+#include "common.H"
+#include "../Effects/EffectMgr.h"
+#include "../globals.h"
+
+#define MAX_DB 30
+
+Fl_EQGraph::Fl_EQGraph(int x,int y, int w, int h, const char *label)
+    :Fl_Box(x,y,w,h,label)
+{
+    num = new float [3*MAX_EQ_BANDS*MAX_FILTER_STAGES];
+    dem = new float [3*MAX_EQ_BANDS*MAX_FILTER_STAGES];
+}
+
+Fl_EQGraph::~Fl_EQGraph(void)
+{}
+
+void Fl_EQGraph::draw_freq_line(float freq, int type)
+{
+    fl_color(FL_GRAY);
+    float freqx=getfreqpos(freq);
+    switch(type){
+        case 0:if (active_r()) fl_color(FL_WHITE);
+                   else fl_color(205,205,205);
+                   fl_line_style(FL_SOLID);
+                   break;
+        case 1:fl_line_style(FL_DOT);break;
+        case 2:fl_line_style(FL_DASH);break;
+    }; 
+
+
+    if ((freqx>0.0)&&(freqx<1.0))
+        fl_line(x()+(int) (freqx*w()),y(),
+                x()+(int) (freqx*w()),y()+h());
+}
+
+void Fl_EQGraph::draw(void)
+{
+    int ox=x(),oy=y(),lx=w(),ly=h(),i;
+    double iy,oiy;
+    float freqx;
+
+    if (active_r()) fl_color(fl_darker(FL_GRAY));
+    else fl_color(FL_GRAY);
+    fl_rectf(ox,oy,lx,ly);
+
+
+    //draw the lines
+    fl_color(fl_lighter( FL_GRAY));
+
+    fl_line_style(FL_SOLID);
+    fl_line(ox+2,oy+ly/2,ox+lx-2,oy+ly/2);
+
+    freqx=getfreqpos(1000.0);
+    if ((freqx>0.0)&&(freqx<1.0))
+        fl_line(ox+(int) (freqx*lx),oy,
+                ox+(int) (freqx*lx),oy+ly);
+
+    for (i=1;i<10;i++) {
+        if(i==1) {
+            draw_freq_line(i*100.0,0);
+            draw_freq_line(i*1000.0,0);
+        } else 
+            if (i==5) {
+                draw_freq_line(i*10.0,2);
+                draw_freq_line(i*100.0,2);
+                draw_freq_line(i*1000.0,2);
+            } else {
+                draw_freq_line(i*10.0,1);
+                draw_freq_line(i*100.0,1);
+                draw_freq_line(i*1000.0,1);
+            };
+    };
+
+    draw_freq_line(10000.0,0);
+    draw_freq_line(20000.0,1);
+
+
+    fl_line_style(FL_DOT);
+    int GY=6;if (ly<GY*3) GY=-1;
+    for (i=1;i<GY;i++){
+        int tmp=(int)(ly/(float)GY*i);
+        fl_line(ox+2,oy+tmp,ox+lx-2,oy+tmp);
+    };
+
+
+    //draw the frequency response
+    if (active_r()) fl_color(FL_YELLOW);
+    else fl_color(200,200,80);
+    fl_line_style(FL_SOLID,2);
+    //fl_color( fl_color_add_alpha( fl_color(), 127 ) );
+    oiy=getresponse(ly,getfreqx(0.0));
+    fl_begin_line();
+    for (i=1;i<lx;i++){
+        float frq=getfreqx(i/(float) lx);
+        if (frq>synth->samplerate/2) break;
+        iy=getresponse(ly,frq);
+        if ((oiy>=0) && (oiy<ly) &&
+                (iy>=0) && (iy<ly) )
+            fl_vertex(ox+i,oy+ly-iy);
+        oiy=iy;
+    };
+    fl_end_line();
+    fl_line_style(FL_SOLID,0);
+}
+
+/*
+ * For those not too familiar with digital filters, what is happening here is an
+ * evaluation of the filter's frequency response through the evaluation of
+ * H(z^{-1}) via z^{-1}=e^{j\omega}.
+ * This will yield a complex result which will indicate the phase and magnitude
+ * transformation of the input at the set frequency denoted by \omega
+ */
+double Fl_EQGraph::getresponse(int maxy,float freq) const
+{
+    const float angle = 2*PI*freq/synth->samplerate_f;
+    std::complex<float> num_res = 0;
+    std::complex<float> dem_res = 0;
+         
+
+    for(int i = 0; i < 3*MAX_EQ_BANDS*MAX_FILTER_STAGES; ++i) {
+        num_res += std::polar(num[i], i*angle);
+        dem_res += std::polar(dem[i], i*angle);
+    }
+
+    float dbresp=abs(num_res/dem_res);//eff->getEQfreqresponse(freq);
+
+
+
+    //rescale
+    return (int) ((dbresp/MAX_DB+1.0)*maxy/2.0);
+}
+
+float Fl_EQGraph::getfreqx(float x) const
+{
+    if(x>1.0)
+        x=1.0;
+    return(20.0*pow((float)1000.0,x));
+}
+
+float Fl_EQGraph::getfreqpos(float freq) const
+{
+    if(freq<0.00001)
+        freq=0.00001;
+    return(log(freq/20.0)/log(1000.0));
+}
diff --git a/src/UI/MasterUI.fl b/src/UI/MasterUI.fl
index 503f0df4..1ee4bafa 100644
--- a/src/UI/MasterUI.fl
+++ b/src/UI/MasterUI.fl
@@ -126,7 +126,7 @@ class Panellistitem {open : {public Fl_Osc_Group}
   Function {make_window()} {open private
   } {
     Fl_Window panellistitem {open
-      private xywh {635 721 100 260} type Double box NO_BOX
+      private xywh {638 721 100 260} type Double box NO_BOX
       class Fl_Group visible
     } {
       Fl_Group panellistitemgroup {open
@@ -249,7 +249,7 @@ if ((
     *exitprogram=1;
 };
 \#endif} open
-      xywh {330 365 390 525} type Double xclass zynaddsubfx visible
+      xywh {333 388 390 525} type Double xclass zynaddsubfx visible
     } {
       Fl_Group win_root {open
         xywh {0 0 390 525}
@@ -530,7 +530,7 @@ if (result!=0) fl_alert("Error: Could not save the file.");}
             class PartUI
           } {}
         }
-        Fl_Tabs {} {
+        Fl_Tabs {} {open
           xywh {5 150 390 165} box UP_FRAME
         } {
           Fl_Group {} {
@@ -594,10 +594,15 @@ syseffectui->refresh(master->sysefx[nsyseff]);}
             }
             Fl_Group syseffectuigroup {
               xywh {10 208 380 95} color 48
+              class Fl_Osc_Group
             } {
+              Fl_Box {} {
+                xywh {0 0 0 0}
+                code0 {syseffectuigroup->ext = "sysefx0/";}
+              }
               Fl_Group syseffectui {
                 xywh {10 208 380 95}
-                code0 {o->init(master->sysefx[nsyseff], osc, "/SysEffect/");}
+                code0 {o->init(master->sysefx[nsyseff]);}
                 class EffUI
               } {}
             }
@@ -620,7 +625,7 @@ pthread_mutex_unlock(&master->mutex);*/}
             }
           }
           Fl_Group {} {
-            label {Insertion Effects}
+            label {Insertion Effects} open
             xywh {5 170 390 145} labelsize 15 align 9
           } {
             Fl_Counter inseffnocounter {
@@ -691,12 +696,17 @@ inseffectui->show();}
                 xywh {105 105 100 20} labelfont 1 labelsize 10
               }
             }
-            Fl_Group inseffectuigroup {
+            Fl_Group inseffectuigroup {open selected
               xywh {10 210 380 95} box FLAT_BOX color 48
+              class Fl_Osc_Group
             } {
+              Fl_Box {} {
+                xywh {0 0 0 0}
+                code0 {inseffectuigroup->ext = "insefx0/";}
+              }
               Fl_Group inseffectui {
                 xywh {10 210 380 90} box UP_FRAME
-                code0 {o->init(master->insefx[ninseff], osc, "/InsEffect/");}
+                code0 {o->init(master->insefx[ninseff]);}
                 code1 {if (master->Pinsparts[ninseff]== -1) o->deactivate();}
                 class EffUI
               } {}
@@ -812,7 +822,7 @@ partui->rebase("/part"+to_s(npart)+"/");
 
 updatepanel();
 simplenpartcounter->value(nval+1);
-simplenpartcounter->do_callback();} selected
+simplenpartcounter->do_callback();}
           tooltip {The part number} xywh {10 317 50 18} type Simple labelfont 1 minimum 0 maximum 127 step 1 value 1 textfont 1
           code0 {o->bounds(1,NUM_MIDI_PARTS);}
           code1 {bankui->init(o);}
@@ -898,7 +908,7 @@ GNU General Public License for details.}
     }
     Fl_Window panelwindow {
       label {ZynAddSubFX Panel} open
-      xywh {618 230 630 635} type Double
+      xywh {621 253 630 635} type Double
       class Fl_Osc_Window visible
     } {
       Fl_Box {} {
@@ -944,13 +954,13 @@ if (fl_choice("Exit and leave the unsaved data?","No","Yes",NULL)) {
 	*exitprogram=1;
 };
 \#endif}
-      xywh {661 384 600 335} type Double
+      xywh {664 407 600 335} type Double
       class Fl_Osc_Window visible
     } {
       Fl_Box {} {
         xywh {0 0 0 0}
         code0 {simplemasterwindow->osc  = osc;}
-        code1 {simplemasterwindow->base = "/make/it/stop/";}
+        code1 {simplemasterwindow->base = "/";}
       }
       Fl_Menu_Bar simplemastermenu {
         xywh {0 0 690 25}
@@ -1243,7 +1253,12 @@ simplesyseffectui->refresh(master->sysefx[nsyseff]);}
             }
             Fl_Group simplesyseffectuigroup {
               xywh {350 95 235 95} color 48
+              class Fl_Osc_Group
             } {
+              Fl_Box {} {
+                xywh {0 0 0 0}
+                code0 {simplesyseffectuigroup->ext = "sysefx0/";}
+              }
               Fl_Group simplesyseffectui {
                 xywh {350 95 234 95}
                 code0 {o->init(master->sysefx[nsyseff]);}
@@ -1337,7 +1352,12 @@ simpleinseffectui->show();}
             }
             Fl_Group simpleinseffectuigroup {
               xywh {350 95 234 95} box FLAT_BOX color 48
+              class Fl_Osc_Group
             } {
+              Fl_Box {} {
+                xywh {0 0 0 0}
+                code0 {simpleinseffectuigroup->ext = "insefx0/";}
+              }
               Fl_Group simpleinseffectui {
                 xywh {350 95 234 95}
                 code0 {o->init(master->insefx[ninseff]);}
diff --git a/src/UI/PartUI.fl b/src/UI/PartUI.fl
index f2fe61eb..5a9eeb20 100644
--- a/src/UI/PartUI.fl
+++ b/src/UI/PartUI.fl
@@ -450,9 +450,9 @@ part->setkeylimit(val);} open
       }
       Fl_Check_Button {} {
         label Enabled
-        callback {pthread_mutex_lock(&master->mutex);
-master->partonoff(npart,(int) o->value());
-pthread_mutex_unlock(&master->mutex);
+        callback {//pthread_mutex_lock(&master->mutex);
+//master->partonoff(npart,(int) o->value());
+//pthread_mutex_unlock(&master->mutex);
 if (part->Penabled==0) partgroupui->deactivate();
     else partgroupui->activate();}
         xywh {90 5 75 20} down_box DOWN_BOX labelfont 1 labelsize 11
@@ -663,7 +663,8 @@ sendtochoice->value(x);}
       }
       Fl_Choice insefftype {
         label EffType
-        callback {pthread_mutex_lock(part->mutex);
+        callback {
+        pthread_mutex_lock(part->mutex);
 part->partefx[ninseff]->changeeffect((int) o->value());
 pthread_mutex_unlock(part->mutex);
 inseffectui->refresh(part->partefx[ninseff]);}
@@ -709,10 +710,15 @@ inseffectui->refresh(part->partefx[ninseff]);}
       }
       Fl_Group inseffectuigroup {
         xywh {5 5 380 100} box FLAT_BOX color 48
+        class Fl_Osc_Group
       } {
+        Fl_Box {} {
+          xywh {0 0 0 0}
+          code0 {inseffectuigroup->ext = "partefx0/";}
+        }
         Fl_Group inseffectui {
           xywh {5 5 380 95}
-          code0 {o->init(part->partefx[ninseff], osc, loc + "InsEffect/");}
+          code0 {o->init(part->partefx[ninseff]);}
           class EffUI
         } {}
       }
-- 
2.47.0

